<#@ template debug="true" language="C#" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ include file="$(SolutionDir)Pyro.CodeGenerationSupport\CodeGenFileManager\TemplateFileManagerV2.1.ttinclude" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="$(SolutionDir)packages\Newtonsoft.Json.8.0.2\lib\net45\Newtonsoft.Json.dll"#>
<#@ Assembly Name="$(SolutionDir)packages\Hl7.Fhir.STU3.0.90.6-alpha7\lib\net45\Hl7.Fhir.STU3.Core.dll"#>
<#@ Assembly Name="$(SolutionDir)packages\EntityFramework.6.1.3\lib\net45\EntityFramework.dll" #>
<#@ Assembly Name="$(SolutionDir)Pyro.CodeGenerationSupport\bin\Release\Pyro.CodeGenerationSupport.dll"#>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 

<#
  var manager = TemplateFileManager.Create(this);
  // Any output below here will go to the PyroDbModelCodeGenerator.cs
  var RepositoryCodeGeneration = new Pyro.CodeGenerationSupport.RepositoryCodeGeneration.RepositoryCodeGeneration();
  Pyro.CodeGenerationSupport.RepositoryCodeGeneration.RepositoryCodeGenModel oRepositoryCodeGenModel = RepositoryCodeGeneration.Generate();

  foreach(var item in oRepositoryCodeGenModel.RepositoryItemList)
  {      
    manager.StartNewFile(string.Format("{0}.cs",item.RepositoryClassName), "Pyro.DataModel", "Repository");
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using Pyro.DataModel.DatabaseModel;
using Pyro.DataModel.DatabaseModel.Base;
using Pyro.DataModel.Support;
using Pyro.DataModel.IndexSetter;
using Pyro.Common.BusinessEntities.Search;
using Pyro.Common.Interfaces;
using Pyro.Common.Interfaces.Repositories;
using Pyro.Common.Interfaces.UriSupport;
using Hl7.Fhir.Model;
using Hl7.Fhir.Introspection;



namespace Pyro.DataModel.Repository
{
  public partial class <#=item.RepositoryClassName#><ResourceType, ResourceHistoryType> : CommonResourceRepository<ResourceType, ResourceHistoryType>, IResourceRepository 
    where ResourceType : <#=item.ResourceEntityName#>, new() 
    where ResourceHistoryType :<#=item.ResourceHistoryEntityName#>, new()
  {
    public <#=item.RepositoryClassName#>(DataModel.DatabaseModel.DatabaseContext Context) : base(Context) { }

    protected override void AddResourceHistoryEntityToResourceEntity(ResourceType ResourceEntity, ResourceHistoryType ResourceHistoryEntity)
    {
      ResourceEntity.<#=item.ResourceHistoryEntityListName#>.Add(ResourceHistoryEntity);
    }
    
    protected override ResourceType LoadCurrentResourceEntity(string FhirId)
    {
      var IncludeList = new List<Expression<Func<ResourceType, object>>>();
   <#
      foreach(var IncludeItem in item.ResourceEntityIncludesList)
      { 
#>
      IncludeList.Add(x => x.<#=IncludeItem#>);
<#
      }
#>    
      var ResourceEntity = DbQueryEntityWithInclude<ResourceType>(x => x.FhirId == FhirId, IncludeList);
      return ResourceEntity;
    }
    
    protected override void ResetResourceEntity(ResourceType ResourceEntity)
    {
<#
      foreach(var NonCollectionProperty in item.ResourceEntityNonCollectionPropertiesInfoList)
      { 
        foreach(var PropertyName in NonCollectionProperty.PropertyNameList)
        { 
#>
      ResourceEntity.<#=PropertyName#> = null;      
<#
        }
      }
#> 
      
<#
      foreach(var CollectionPropertiesInfo in item.ResourceEntityCollectionPropertiesInfoList)
      { 
#>
      _Context.<#=CollectionPropertiesInfo.ClassName#>.RemoveRange(ResourceEntity.<#=CollectionPropertiesInfo.PropertyName#>);            
<#
      }
#> 
    }

    protected override void PopulateResourceEntity(ResourceType ResourceEntity, string ResourceVersion, Resource Resource, IDtoFhirRequestUri FhirRequestUri)
    {
      var ResourceTyped = Resource as <#=item.ResourceName#>;
      var ResourseEntity = ResourceEntity as ResourceType;
      IndexSettingSupport.SetResourceBaseAddOrUpdate(ResourceTyped, ResourseEntity, ResourceVersion, false);

    <#=item.EntitySetterLogic#>
      
    }

  }
} 

<#
  }
  manager.Process();
#>
