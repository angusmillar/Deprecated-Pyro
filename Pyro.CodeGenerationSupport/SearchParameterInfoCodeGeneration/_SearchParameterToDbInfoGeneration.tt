<#@ template debug="true" language="C#" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ include file="$(SolutionDir)Pyro.CodeGenerationSupport\CodeGenFileManager\TemplateFileManagerV2.1.ttinclude" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="$(SolutionDir)packages\Newtonsoft.Json.8.0.2\lib\net45\Newtonsoft.Json.dll"#>
<#@ Assembly Name="$(SolutionDir)packages\Hl7.Fhir.STU3.0.90.6-alpha7\lib\net45\Hl7.Fhir.STU3.Core.dll"#>
<#@ Assembly Name="$(SolutionDir)Pyro.CodeGenerationSupport\bin\Release\Pyro.CodeGenerationSupport.dll"#>
<#@ import namespace="System" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Pyro.CodeGenerationSupport.FhirApiIntrospection" #>
<#@ import namespace="Pyro.CodeGenerationSupport.RepositoryCodeGeneration" #>
<#@ import namespace="Pyro.CodeGenerationSupport.SearchParameterInfoCodeGeneration" #>


<#
  var manager = TemplateFileManager.Create(this);
  // Any output below here will go to the PyroDbModelCodeGenerator.cs
  var SearchParameterToDbInfoGeneration = new Pyro.CodeGenerationSupport.SearchParameterInfoCodeGeneration.SearchParameterToDbInfoGeneration();
  SearchParameterToDbInfoGeneration.Generate();
  var ResourceSearchParamInfoList = SearchParameterToDbInfoGeneration.ResourceSearchParamInfoList;
  
  manager.StartNewFile(string.Format("{0}.cs","DtoSupportedSearchParametersFactory"), "Pyro.Common", "Search");
#>
using System.Collections.Generic;
using Pyro.Common.Enum;
using Hl7.Fhir.Model;

namespace Pyro.Common.BusinessEntities.Search
{
  public partial class DtoSupportedSearchParametersFactory
  {
    public static List<DtoSupportedSearchParameters> GetSupportedParametersForResourceTypeList(FHIRAllTypes ResourceType)
    {
      var List = new List<DtoSupportedSearchParameters>();
      Pyro.Common.BusinessEntities.Search.DtoSupportedSearchParameters.AddSupportedParametersForAllResources(List);
      DtoSupportedSearchParameters SupportedSearchParameter = null; 
      switch (ResourceType)
      {
<#
    foreach (var ResourceSearchParamInfo in ResourceSearchParamInfoList)
    {#>      
        case FHIRAllTypes.<#=ResourceSearchParamInfo.ResourceName#>:
          {            
<# 
      foreach (var ResourceSearchParamInfoItem in ResourceSearchParamInfo.ResourceSearchParamInfoItemList)
      {#>      
            SupportedSearchParameter = new DtoSupportedSearchParameters();
            SupportedSearchParameter.Name = FhirSearchEnum.SearchParameterNameType.<#=ResourceSearchParamInfoItem.SearchParameterNameType#>;
            SupportedSearchParameter.Resource = ResourceType;
            SupportedSearchParameter.IsDbCollection = <#=ResourceSearchParamInfoItem.IsDbCollection#>;
            SupportedSearchParameter.DbPropertyName = "<#=ResourceSearchParamInfoItem.DbBasePropertyName#>";
            SupportedSearchParameter.DbSearchParameterType = DatabaseEnum.DbIndexType.<#=ResourceSearchParamInfoItem.DbSearchParameterType#>;
            SupportedSearchParameter.SearchParameterType = SearchParamType.<#=ResourceSearchParamInfoItem.SearchParameterType#>;
            SupportedSearchParameter.ModifierList = new List<FhirSearchEnum.SearchModifierType>();
         <# 
        foreach (var Modifier in ResourceSearchParamInfoItem.ModifierList)
        {#>
   SupportedSearchParameter.ModifierList.Add(FhirSearchEnum.SearchModifierType.<#=Modifier#>);
<#
        }
#>
   SupportedSearchParameter.TypeModifierResourceList = new List<string>();
         <# 
        foreach (var ModifierTypeModifierResource in ResourceSearchParamInfoItem.TypeModifierResourceList)
        {#>
            SupportedSearchParameter.TypeModifierResourceList.Add("<#=ModifierTypeModifierResource#>");
<#
        }
#>
   SupportedSearchParameter.PrefixList = new List<FhirSearchEnum.SearchPrefixType>();
         <# 
        foreach (var Prefix in ResourceSearchParamInfoItem.PrefixList)
        {#>
           SupportedSearchParameter.PrefixList.Add(FhirSearchEnum.SearchPrefixType.<#=Prefix#>);
<#
        }
#>
   List.Add(SupportedSearchParameter);
<#
      }
#>
          }
          break;
<#
    }
#>
   default:
          break;
      }
      return List;
    }
  }
}
   

<#  
manager.Process();
#>
