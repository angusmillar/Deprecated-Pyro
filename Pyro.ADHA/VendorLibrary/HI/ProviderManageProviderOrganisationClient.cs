using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography.X509Certificates;
using System.ServiceModel;
using System.ServiceModel.Channels;
using System.Text;
using Pyro.ADHA.mcaR32.ProviderManageProviderOrganisation;
using Pyro.ADHA.VendorLibrary.Common;
using ProductType = Pyro.ADHA.mcaR32.ProviderManageProviderOrganisation.ProductType;
using QualifiedId = Pyro.ADHA.mcaR32.ProviderManageProviderOrganisation.QualifiedId;
using TimestampType = Pyro.ADHA.mcaR32.ProviderManageProviderOrganisation.TimestampType;

namespace Pyro.ADHA.VendorLibrary.HI
{
    public class ProviderManageProviderOrganisationClient : IDisposable
    {
        internal ProviderManageProviderOrganisationPortTypeClient providerSearchForProviderOrganisationClient;

        /// <summary>
        /// SOAP messages for the last client call.
        /// </summary>
        public HIEndpointProcessor.SoapMessages SoapMessages { get; set; }


        /// <summary>
        /// The ProductType to be used in all searches.
        /// </summary>
        ProductType _product;

        /// <summary>
        /// The User to be used in all searches.
        /// </summary>
        QualifiedId _user;

        /// <summary>
        /// The hpio of the organisation.
        /// </summary>
        QualifiedId _hpio;

        #region Constructors

        /// <summary>
        /// Initializes an instance of the provider client.
        /// </summary>
        /// <param name="endpointUri">Web service endpoint for service.</param>
        /// <param name="product">PCIN (generated by Medicare) and platform name values.</param>
        /// <param name="user">Identifier for the application that is calling the service.</param>
        /// <param name="hpio">Identifier for the organisation</param>
        /// <param name="signingCert">Certificate to sign the soap message with.</param>
        /// <param name="tlsCert">Certificate for establishing TLS connection to the service.</param>
        public ProviderManageProviderOrganisationClient(Uri endpointUri, ProductType product, QualifiedId user, QualifiedId hpio, X509Certificate2 signingCert, X509Certificate2 tlsCert)
        {
            Validation.ValidateArgumentRequired("endpointUri", endpointUri);

            InitializeClient(endpointUri.ToString(), null, signingCert, tlsCert, product, user, hpio);
        }

        /// <summary>
        /// Initializes an instance of the provider client.
        /// </summary>
        /// <param name="endpointConfigurationName">Endpoint configuration name for the provider endpoint.</param>
        /// <param name="product">PCIN (generated by Medicare) and platform name values.</param>
        /// <param name="user">Identifier for the application that is calling the service.</param>
        /// <param name="hpio">Identifier for the organisation</param>
        /// <param name="signingCert">Certificate to sign the soap message with.</param>
        /// <param name="tlsCert">Certificate for establishing TLS connection to the service.</param>
        public ProviderManageProviderOrganisationClient(string endpointConfigurationName, ProductType product, QualifiedId user, QualifiedId hpio, X509Certificate2 signingCert, X509Certificate2 tlsCert)
        {
            Validation.ValidateArgumentRequired("endpointConfigurationName", endpointConfigurationName);

            InitializeClient(null, endpointConfigurationName, signingCert, tlsCert, product, user, hpio);
        }

        #endregion

        #region Private and internal methods

        private void InitializeClient(string endpointUrl, string endpointConfigurationName, X509Certificate2 signingCert, X509Certificate2 tlsCert, ProductType product, QualifiedId user, QualifiedId hpio)
        {
            Validation.ValidateArgumentRequired("product", product);
            Validation.ValidateArgumentRequired("user", user);
            Validation.ValidateArgumentRequired("signingCert", signingCert);
            Validation.ValidateArgumentRequired("tlsCert", tlsCert);

            _product = product;
            _user = user;
            _hpio = hpio;

            SoapMessages = new HIEndpointProcessor.SoapMessages();

            ProviderManageProviderOrganisationPortTypeClient client = null;

            if (!string.IsNullOrEmpty(endpointUrl))
            {
                EndpointAddress address = new EndpointAddress(endpointUrl);
                CustomBinding tlsBinding = GetBinding();

                client = new ProviderManageProviderOrganisationPortTypeClient(tlsBinding, address);
            }
            else if (!string.IsNullOrEmpty(endpointConfigurationName))
            {
                client = new ProviderManageProviderOrganisationPortTypeClient(endpointConfigurationName);
            }

            if (client != null)
            {
                HIEndpointProcessor.ProcessEndpoint(client.Endpoint, signingCert, SoapMessages);

                if (tlsCert != null)
                {
                    client.ClientCredentials.ClientCertificate.Certificate = tlsCert;
                }
                client.Open();
                providerSearchForProviderOrganisationClient = client;

            }
        }

        internal CustomBinding GetBinding()
        {
            // Set up binding
            CustomBinding tlsBinding = new CustomBinding();

            TextMessageEncodingBindingElement tlsEncoding = new TextMessageEncodingBindingElement();
            tlsEncoding.ReaderQuotas.MaxDepth = 2147483647;
            tlsEncoding.ReaderQuotas.MaxStringContentLength = 2147483647;
            tlsEncoding.ReaderQuotas.MaxArrayLength = 2147483647;
            tlsEncoding.ReaderQuotas.MaxBytesPerRead = 2147483647;
            tlsEncoding.ReaderQuotas.MaxNameTableCharCount = 2147483647;

            HttpsTransportBindingElement httpsTransport = new HttpsTransportBindingElement();
            httpsTransport.RequireClientCertificate = true;
            httpsTransport.MaxReceivedMessageSize = 2147483647;
            httpsTransport.MaxBufferSize = 2147483647;

            tlsBinding.Elements.Add(tlsEncoding);
            tlsBinding.Elements.Add(httpsTransport);

            return tlsBinding;
        }

        #endregion

        public manageProviderOrganisationResult ManageProviderOrganisation(manageProviderOrganisation manageProviderOrganisation)
        {
            manageProviderOrganisationResponse response = null;
            try
            {
                var sig = new SignatureContainerType();

                var timestamp = new TimestampType()
                {
                    created = DateTime.Now,
                    expires = DateTime.Now.AddDays(30),
                    expiresSpecified = true
                };

                response = providerSearchForProviderOrganisationClient.manageProviderOrganisation(ref _product,
                    ref sig, timestamp, _user, manageProviderOrganisation);

            }
            catch (Exception ex)
            {
                // Catch generic FaultException and call helper to throw a more specific fault
                // (FaultException<ServiceMessagesType>
                FaultHelper.ProcessAndThrowFault<ServiceMessagesType>(ex);
            }


            if (response != null && response.manageProviderOrganisationResult != null)
                return response.manageProviderOrganisationResult;
            else
                throw new ApplicationException(Properties.Resources.UnexpectedServiceResponse);
        }

        #region IDisposable Members

        /// <summary>
        /// Closes and disposes the client.
        /// </summary>
        public void Dispose()
        {
            if (providerSearchForProviderOrganisationClient != null)
            {
                var lClient = providerSearchForProviderOrganisationClient;

                if (lClient.State != CommunicationState.Closed)
                    lClient.Close();
            }
        }

        #endregion
    }
}
