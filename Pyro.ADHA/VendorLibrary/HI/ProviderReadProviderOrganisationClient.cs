/*
 * Copyright 2011 NEHTA
 *
 * Licensed under the NEHTA Open Source (Apache) License; you may not use this
 * file except in compliance with the License. A copy of the License is in the
 * 'license.txt' file, which should be provided with this work.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

using System;
using System.ServiceModel.Channels;
using System.Security.Cryptography.X509Certificates;
using System.ServiceModel;

using Pyro.ADHA.mcaR32.ProviderReadProviderOrganisation;
using Pyro.ADHA.VendorLibrary.Common;


namespace Pyro.ADHA.VendorLibrary.HI
{
    /// <summary>
    /// An implementation of a client for the Medicare Healthcare Identifiers service. This class may be used to 
    /// connect to Medicare's service to perform organisation reads, for provider information already published to the HPD.
    /// </summary>
    public class ProviderReadProviderOrganisationClient : IDisposable
    {
            internal ProviderReadProviderOrganisationPortType providerReadProviderOrganisationClient;

            /// <summary>
            /// SOAP messages for the last client call.
            /// </summary>
            public HIEndpointProcessor.SoapMessages SoapMessages { get; set; }

            /// <summary>
            /// The ProductType to be used in all searches.
            /// </summary>
            ProductType product;

            /// <summary>
            /// The User to be used in all searches.
            /// </summary>
            QualifiedId user;

            /// <summary>
            /// Gets the timestamp for the soap request.
            /// </summary>
            public TimestampType LastSoapRequestTimestamp { get; private set; }

            /// <summary>
            /// HI service name.
            /// </summary>
            public const string HIServiceOperation = "ProviderReadProviderOrganisation";

            /// <summary>
            /// HI service version.
            /// </summary>
            public const string HIServiceVersion = "3.2.0";

            #region Constructors

            /// <summary>
            /// Initializes an instance of the organisation search client.
            /// </summary>
            /// <param name="endpointUri">Web service endpoint for Medicare's organisation search service.</param>
            /// <param name="product">PCIN (generated by Medicare) and platform name values.</param>
            /// <param name="user">Identifier for the application that is calling the service.</param>
            /// <param name="signingCert">Certificate to sign the soap message with.</param>
            /// <param name="tlsCert">Certificate for establishing TLS connection to the service.</param>
            public ProviderReadProviderOrganisationClient(Uri endpointUri, ProductType product, QualifiedId user, X509Certificate2 signingCert, X509Certificate2 tlsCert)
            {
                Validation.ValidateArgumentRequired("endpointUri", endpointUri);

                InitializeClient(endpointUri.ToString(), null, signingCert, tlsCert, product, user);
            }

            /// <summary>
            /// Initializes an instance of the organisation search client.
            /// </summary>
            /// <param name="endpointConfigurationName">Endpoint configuration name for the organisation search endpoint.</param>
            /// <param name="product">PCIN (generated by Medicare) and platform name values.</param>
            /// <param name="user">Identifier for the application that is calling the service.</param>
            /// <param name="signingCert">Certificate to sign the soap message with.</param>
            /// <param name="tlsCert">Certificate for establishing TLS connection to the service.</param>
            public ProviderReadProviderOrganisationClient(string endpointConfigurationName, ProductType product, QualifiedId user, X509Certificate2 signingCert, X509Certificate2 tlsCert)
            {
                Validation.ValidateArgumentRequired("endpointConfigurationName", endpointConfigurationName);

                InitializeClient(null, endpointConfigurationName, signingCert, tlsCert, product, user);
            }

            #endregion

            #region Private and internal methods


            /// <summary>
            /// Performs the ReadProviderOrganisation call.
            /// </summary>
            /// <param name="request">The request used to perform the ReadProviderOrganisation.</param>
            /// <returns>The response returned from the ReadProviderOrganisation call.</returns>
            /// <exception cref="ApplicationException">Any exceptions returned from the call.</exception>
            public readProviderOrganisationResponse ReadProviderOrganisation(readProviderOrganisation request)
            {
                var timestamp = new TimestampType
                {
                    created = DateTime.Now.ToUniversalTime(),
                    expires = DateTime.Now.AddDays(30).ToUniversalTime(),
                    expiresSpecified = true
                };

                var readProviderOrganisationRequest = new readProviderOrganisationRequest(
                    product, new SignatureContainerType(), timestamp, user, request);


                LastSoapRequestTimestamp = readProviderOrganisationRequest.timestamp;

                readProviderOrganisationResponse1 response = null;

                try
                {
                    response = providerReadProviderOrganisationClient.readProviderOrganisation(readProviderOrganisationRequest);
                }
                catch (Exception ex)
                {
                    FaultHelper.ProcessAndThrowFault<ServiceMessagesType>(ex);
                }

                if (response != null && response.readProviderOrganisationResponse != null)
                    return response.readProviderOrganisationResponse;

                throw new ApplicationException(Properties.Resources.UnexpectedServiceResponse);
            }

            /// <summary>
            /// Initialization for the Medicare organisation search client.
            /// </summary>
            /// <param name="endpointUrl">Web service endpoint for the Medicare organisation search.</param>
            /// <param name="endpointConfigurationName">Endpoint configuration name for the Medicare's organisation search endpoint.</param>
            /// <param name="signingCert">Certificate to sign the soap message with.</param>
            /// <param name="tlsCert">Certificate for establishing TLS connection to the service.</param>
            /// <param name="product">PCIN (generated by Medicare) and platform name values.</param>
            /// <param name="user">Identifier for the application that is calling the service.</param>
            private void InitializeClient(string endpointUrl, string endpointConfigurationName, X509Certificate2 signingCert, X509Certificate2 tlsCert, ProductType product, QualifiedId user)
            {
                Validation.ValidateArgumentRequired("product", product);
                Validation.ValidateArgumentRequired("user", user);
                Validation.ValidateArgumentRequired("signingCert", signingCert);
                Validation.ValidateArgumentRequired("tlsCert", tlsCert);

                this.product = product;
                this.user = user;

                SoapMessages = new HIEndpointProcessor.SoapMessages();

                CustomBinding tlsBinding = GetBinding();

                ProviderReadProviderOrganisationPortTypeClient client = null;

                if (!string.IsNullOrEmpty(endpointUrl))
                {
                    EndpointAddress address = new EndpointAddress(endpointUrl);

                    client = new ProviderReadProviderOrganisationPortTypeClient(tlsBinding, address);
                }
                else if (!string.IsNullOrEmpty(endpointConfigurationName))
                {
                    client = new ProviderReadProviderOrganisationPortTypeClient(endpointConfigurationName);
                }

                if (client != null)
                {
                    HIEndpointProcessor.ProcessEndpoint(client.Endpoint, signingCert, SoapMessages);

                    if (tlsCert != null) client.ClientCredentials.ClientCertificate.Certificate = tlsCert;
                    providerReadProviderOrganisationClient = client;
                }
            }

            /// <summary>
            /// Gets the binding configuration for the client.
            /// </summary>
            /// <returns>Configured customBinding instance.</returns>
            internal CustomBinding GetBinding()
            {
                // Set up binding
                CustomBinding tlsBinding = new CustomBinding();

                TextMessageEncodingBindingElement tlsEncoding = new TextMessageEncodingBindingElement();
                tlsEncoding.ReaderQuotas.MaxDepth = 2147483647;
                tlsEncoding.ReaderQuotas.MaxStringContentLength = 2147483647;
                tlsEncoding.ReaderQuotas.MaxArrayLength = 2147483647;
                tlsEncoding.ReaderQuotas.MaxBytesPerRead = 2147483647;
                tlsEncoding.ReaderQuotas.MaxNameTableCharCount = 2147483647;

                HttpsTransportBindingElement httpsTransport = new HttpsTransportBindingElement();
                httpsTransport.RequireClientCertificate = true;
                httpsTransport.MaxReceivedMessageSize = 2147483647;
                httpsTransport.MaxBufferSize = 2147483647;

                tlsBinding.Elements.Add(tlsEncoding);
                tlsBinding.Elements.Add(httpsTransport);

                return tlsBinding;
            }

            #endregion

            #region IDisposable Members

            /// <summary>
            /// Closes and disposes the client.
            /// </summary>
            public void Dispose()
            {
                ClientBase<ProviderReadProviderOrganisationPortType> lClient;

                if (providerReadProviderOrganisationClient is ClientBase<ProviderReadProviderOrganisationPortType>)
                {
                    lClient = (ClientBase<ProviderReadProviderOrganisationPortType>)providerReadProviderOrganisationClient;
                    if (lClient.State != CommunicationState.Closed)
                        lClient.Close();
                }
            }

            #endregion
    }
 }
