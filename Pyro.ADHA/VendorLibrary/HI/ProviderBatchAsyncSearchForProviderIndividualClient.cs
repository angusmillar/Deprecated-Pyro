/*
 * Copyright 2011 NEHTA
 *
 * Licensed under the NEHTA Open Source (Apache) License; you may not use this
 * file except in compliance with the License. A copy of the License is in the
 * 'license.txt' file, which should be provided with this work.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

using System;
using System.Security.Cryptography.X509Certificates;
using System.ServiceModel;
using System.ServiceModel.Channels;
using Pyro.ADHA.mcaR51.ProviderBatchAsyncSearchForProviderIndividual;
using Pyro.ADHA.VendorLibrary.Common;

namespace Pyro.ADHA.VendorLibrary.HI
{
    /// <summary>
    /// An implementation of a client for the Medicare Healthcare Identifiers service. This class may be used to 
    /// connect to Medicare's service to perform provider HPII validation (for provider individuals not published on the provider directory).
    /// </summary>
    public class ProviderBatchAsyncSearchForProviderIndividualClient
    {
        internal SearchForProviderIndividualBatchAsyncPortType providerBatchAsyncSearchForProviderIndividualClient;

        /// <summary>
        /// SOAP messages for the last client call.
        /// </summary>
        public HIEndpointProcessor.SoapMessages SoapMessages { get; set; }

        /// <summary>
        /// The ProductType to be used in all searches.
        /// </summary>
        ProductType product;

        /// <summary>
        /// The User to be used in all searches.
        /// </summary>
        QualifiedId user;

        /// <summary>
        /// The hpio of the organisation.
        /// </summary>
        QualifiedId hpio;

        /// <summary>
        /// Gets the timestamp for the soap request.
        /// </summary>
        public TimestampType LastSoapRequestTimestamp { get; private set; }

        /// <summary>
        /// HI service name.
        /// </summary>
        public const string HIServiceOperation = "ProviderBatchAsyncSearchForProviderIndividual";

        /// <summary>
        /// HI service version.
        /// </summary>
        public const string HIServiceVersion = "5.1.0";

        #region Constructors

        /// <summary>
        /// Initializes an instance of the provider search client.
        /// </summary>
        /// <param name="endpointUri">Web service endpoint for Medicare's provider search service.</param>
        /// <param name="product">PCIN (generated by Medicare) and platform name values.</param>
        /// <param name="user">Identifier for the application that is calling the service.</param>
        /// <param name="hpio">Identifier for the organisation</param>
        /// <param name="signingCert">Certificate to sign the soap message with.</param>
        /// <param name="tlsCert">Certificate for establishing TLS connection to the service.</param>
        public ProviderBatchAsyncSearchForProviderIndividualClient(Uri endpointUri, ProductType product, QualifiedId user, QualifiedId hpio, X509Certificate2 signingCert, X509Certificate2 tlsCert)
        {
            Validation.ValidateArgumentRequired("endpointUri", endpointUri);

            InitializeClient(endpointUri.ToString(), null, signingCert, tlsCert, product, user, hpio);
        }

        /// <summary>
        /// Initializes an instance of the provider search client.
        /// </summary>
        /// <param name="endpointConfigurationName">Endpoint configuration name for the provider search endpoint.</param>
        /// <param name="product">PCIN (generated by Medicare) and platform name values.</param>
        /// <param name="user">Identifier for the application that is calling the service.</param>
        /// <param name="hpio">Identifier for the organisation</param>
        /// <param name="signingCert">Certificate to sign the soap message with.</param>
        /// <param name="tlsCert">Certificate for establishing TLS connection to the service.</param>
        public ProviderBatchAsyncSearchForProviderIndividualClient(string endpointConfigurationName, ProductType product, QualifiedId user, QualifiedId hpio, X509Certificate2 signingCert, X509Certificate2 tlsCert)
        {
            Validation.ValidateArgumentRequired("endpointConfigurationName", endpointConfigurationName);

            InitializeClient(null, endpointConfigurationName, signingCert, tlsCert, product, user, hpio);
        }

        #endregion

        #region Private and internal methods

        /// <summary>
        /// Perform the service call.
        /// </summary>
        /// <param name="request">The search criteria in a BatchSearchForProviderIndividualCriteriaType object.</param>
        /// <returns>The search results in a submitSearchForProviderIndividualResponse object.</returns>
        public submitSearchForProviderIndividualResponse BatchSubmitProviderIndividuals(BatchSearchForProviderIndividualCriteriaType[] request)
        {
            var envelope = new submitSearchForProviderIndividualRequest()
            {
                submitSearchForProviderIndividual = request,
                product = product,
                user = user,
                hpio = hpio,
                signature = new SignatureContainerType()
            };

            envelope.timestamp = new TimestampType()
            {
                created = DateTime.Now,
                expires = DateTime.Now.AddDays(30),
                expiresSpecified = true
            };

            // Set LastSoapRequestTimestamp
            LastSoapRequestTimestamp = envelope.timestamp;

            submitSearchForProviderIndividualResponse1 response1 = null;

            try
            {
                response1 = providerBatchAsyncSearchForProviderIndividualClient.submitSearchForProviderIndividual(envelope);
            }
            catch (Exception ex)
            {
                // Catch generic FaultException and call helper to throw a more specific fault
                // (FaultException<ServiceMessagesType>
                FaultHelper.ProcessAndThrowFault<ServiceMessagesType>(ex);
            }

            if (response1 != null && response1.submitSearchForProviderIndividualResponse != null)
                return response1.submitSearchForProviderIndividualResponse;
            else
                throw new ApplicationException(Properties.Resources.UnexpectedServiceResponse);
        }


        /// <summary>
        /// Perform the service call.
        /// </summary>
        /// <param name="request">The search criteria in a retrieveSearchForProviderIndividualRequest object.</param>
        /// <returns>The search results in a retrieveSearchForProviderIndividualResponse object.</returns>
        public retrieveSearchForProviderIndividualResponse BatchRetrieveProviderIndividuals(retrieveSearchForProviderIndividual request)
        {
            var envelope = new retrieveSearchForProviderIndividualRequest()
            {
                retrieveSearchForProviderIndividual = request,
                product = product,
                user = user,
                hpio = hpio,
                signature = new SignatureContainerType()
            };

            envelope.timestamp = new TimestampType()
            {
                created = DateTime.Now,
                expires = DateTime.Now.AddDays(30),
                expiresSpecified = true
            };

            // Set LastSoapRequestTimestamp
            LastSoapRequestTimestamp = envelope.timestamp;

            retrieveSearchForProviderIndividualResponse1 response1 = null;

            try
            {
                response1 = providerBatchAsyncSearchForProviderIndividualClient.retrieveSearchForProviderIndividual(envelope);
            }
            catch (Exception ex)
            {
                // Catch generic FaultException and call helper to throw a more specific fault
                // (FaultException<ServiceMessagesType>
                FaultHelper.ProcessAndThrowFault<ServiceMessagesType>(ex);
            }

            if (response1 != null && response1.retrieveSearchForProviderIndividualResponse != null)
                return response1.retrieveSearchForProviderIndividualResponse;
            else
                throw new ApplicationException(Properties.Resources.UnexpectedServiceResponse);
        }


        /// <summary>
        /// Initialization for the Medicare provider search client.
        /// </summary>
        /// <param name="endpointUrl">Web service endpoint for the Medicare provider search.</param>
        /// <param name="endpointConfigurationName">Endpoint configuration name for the Medicare's provider search endpoint.</param>
        /// <param name="signingCert">Certificate to sign the soap message with.</param>
        /// <param name="tlsCert">Certificate for establishing TLS connection to the service.</param>
        /// <param name="product">PCIN (generated by Medicare) and platform name values.</param>
        /// <param name="user">Identifier for the application that is calling the service.</param>
        /// <param name="hpio">Identifier for the CSP</param>
        private void InitializeClient(string endpointUrl, string endpointConfigurationName, X509Certificate2 signingCert, X509Certificate2 tlsCert, ProductType product, QualifiedId user, QualifiedId hpio)
        {
            Validation.ValidateArgumentRequired("product", product);
            Validation.ValidateArgumentRequired("user", user);
            Validation.ValidateArgumentRequired("signingCert", signingCert);
            Validation.ValidateArgumentRequired("tlsCert", tlsCert);

            this.product = product;
            this.user = user;
            this.hpio = hpio;

            SoapMessages = new HIEndpointProcessor.SoapMessages();

            CustomBinding tlsBinding = GetBinding();

            SearchForProviderIndividualBatchAsyncPortTypeClient client = null;

            if (!string.IsNullOrEmpty(endpointUrl))
            {
                var address = new EndpointAddress(endpointUrl);

                client = new SearchForProviderIndividualBatchAsyncPortTypeClient(tlsBinding, address);
            }
            else if (!string.IsNullOrEmpty(endpointConfigurationName))
            {
                client = new SearchForProviderIndividualBatchAsyncPortTypeClient(endpointConfigurationName);
            }

            if (client != null)
            {
                HIEndpointProcessor.ProcessEndpoint(client.Endpoint, signingCert, SoapMessages);

                if (tlsCert != null) client.ClientCredentials.ClientCertificate.Certificate = tlsCert;
                providerBatchAsyncSearchForProviderIndividualClient = client;
            }
        }

        /// <summary>
        /// Gets the binding configuration for the client.
        /// </summary>
        /// <returns>Configured customBinding instance.</returns>
        internal CustomBinding GetBinding()
        {
            // Set up binding
            var tlsBinding = new CustomBinding();

            var tlsEncoding = new TextMessageEncodingBindingElement();
            tlsEncoding.ReaderQuotas.MaxDepth = 2147483647;
            tlsEncoding.ReaderQuotas.MaxStringContentLength = 2147483647;
            tlsEncoding.ReaderQuotas.MaxArrayLength = 2147483647;
            tlsEncoding.ReaderQuotas.MaxBytesPerRead = 2147483647;
            tlsEncoding.ReaderQuotas.MaxNameTableCharCount = 2147483647;

            var httpsTransport = new HttpsTransportBindingElement();
            httpsTransport.RequireClientCertificate = true;
            httpsTransport.MaxReceivedMessageSize = 2147483647;
            httpsTransport.MaxBufferSize = 2147483647;

            tlsBinding.Elements.Add(tlsEncoding);
            tlsBinding.Elements.Add(httpsTransport);

            return tlsBinding;
        }

        #endregion

        #region IDisposable Members

        /// <summary>
        /// Closes and disposes the client.
        /// </summary>
        public void Dispose()
        {
            ClientBase<SearchForProviderIndividualBatchAsyncPortType> lClient;

            if (providerBatchAsyncSearchForProviderIndividualClient is ClientBase<SearchForProviderIndividualBatchAsyncPortType>)
            {
                lClient = (ClientBase<SearchForProviderIndividualBatchAsyncPortType>)providerBatchAsyncSearchForProviderIndividualClient;
                if (lClient.State != CommunicationState.Closed)
                    lClient.Close();
            }
        }

        #endregion
    }
}
