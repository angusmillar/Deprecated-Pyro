<#@ template debug="true" language="C#" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ include file="$(SolutionDir)Blaze.CodeGenerationSupport\CodeGenFileManager\TemplateFileManagerV2.1.ttinclude" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="$(SolutionDir)packages\Newtonsoft.Json.8.0.2\lib\net45\Newtonsoft.Json.dll"#>
<#@ Assembly Name="$(SolutionDir)packages\Hl7.Fhir.STU3.0.90.5-alpha3\lib\net45\Hl7.Fhir.STU3.Core.dll"#>
<#@ Assembly Name="$(SolutionDir)Blaze.CodeGenerationSupport\bin\Release\Blaze.CodeGenerationSupport.dll"#>
<#@ import namespace="System" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Blaze.CodeGenerationSupport.FhirApiIntrospection" #>
<#@ import namespace="Blaze.CodeGenerationSupport.RepositoryCodeGeneration" #>
<#@ import namespace="Blaze.CodeGenerationSupport.SearchParameterInfoCodeGeneration" #>


<#
  var manager = TemplateFileManager.Create(this);
  // Any output below here will go to the BlazeDbModelCodeGenerator.cs
  SearchParamEnumCodeGeneration SearchParamEnumCodeGeneration = new SearchParamEnumCodeGeneration();      
  SearchParamEnumCodeGeneration.Generate();
  Dictionary<string, SearchParamEnumInfoItem> SearchParamEnumInfoItemDic = SearchParamEnumCodeGeneration.DistinctSearchParamEnumInfoItemDictornary;    
  manager.StartNewFile(string.Format("{0}.cs","FhirSearchEnumPartial"), "Blaze.Common", "Enum");
#>
using System.Collections.Generic;

//This file has been code generated by Blaze.CodeGenerationSupport.SearchParameterInfoCodeGeneration.SearchParameterEnumGeneration.tt

namespace Blaze.Common.Enum
{
  public static partial class FhirSearchEnum
  {
    public enum SearchParameterNameType
    {
<#
    foreach (var SearchParamEnumInfoItem in SearchParamEnumInfoItemDic)
    {#>
      <#=SearchParamEnumInfoItem.Value.EnumName#>,
<#
    }
#>  
    }

    public static Dictionary<string, SearchParameterNameType> GetSearchParameterNameType()
    {
      return new Dictionary<string, SearchParameterNameType>()
      {
<#
    foreach (var SearchParamEnumInfoItem in SearchParamEnumInfoItemDic)
    {#>
        {"<#=SearchParamEnumInfoItem.Value.Name#>", SearchParameterNameType.<#=SearchParamEnumInfoItem.Value.EnumName#>},       
<#
    }
#>  
      };
    }

  }
}

<#  
manager.Process();
#>
