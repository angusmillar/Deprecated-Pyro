namespace Pyro.DataLayer.MigrationsPostgre
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity.Infrastructure.Annotations;
    using System.Data.Entity.Migrations;
    
    public partial class First : DbMigration
    {
        public override void Up()
        {
            CreateTable(
                "public.AccountRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public._FhirRelease",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        FhirVersion = c.String(),
                        Date = c.DateTime(nullable: false),
                        Description = c.String(),
                        CreatedDate = c.DateTimeOffset(nullable: false, precision: 7),
                        CreatedUser = c.String(),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 7),
                        LastUpdatedUser = c.String(),
                    })
                .PrimaryKey(t => t.Id);
            
            CreateTable(
                "public.ActivityDefinitionRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.ActivityDefinitionIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ActivityDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public._SearchParam",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Resource = c.String(nullable: false, maxLength: 256),
                        Name = c.String(nullable: false, maxLength: 128),
                        Url = c.String(maxLength: 450),
                        Description = c.String(),
                        Type = c.Int(nullable: false),
                        XPath = c.String(),
                        Expression = c.String(nullable: false),
                        IsIndexed = c.Boolean(nullable: false),
                        Status = c.Int(nullable: false),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 7),
                        SearchParameterResourceId = c.String(maxLength: 128),
                        SearchParameterResourceVersion = c.String(maxLength: 128),
                    })
                .PrimaryKey(t => t.Id)
                .Index(t => new { t.Resource, t.Name }, unique: true, name: "uq_ResourceAndName")
                .Index(t => t.IsIndexed, name: "ix_IsIndexed")
                .Index(t => t.Status, name: "ix_Status");
            
            CreateTable(
                "public._SCompositePivot",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        SequentialOrder = c.Int(nullable: false),
                        Url = c.String(maxLength: 450),
                        Expression = c.String(nullable: false),
                        ParentServiceSearchParameterId = c.Int(nullable: false),
                        ChildServiceSearchParameterId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ChildServiceSearchParameterId)
                .ForeignKey("public._SearchParam", t => t.ParentServiceSearchParameterId, cascadeDelete: true)
                .Index(t => t.ParentServiceSearchParameterId, name: "ix_ParentParamId")
                .Index(t => t.ChildServiceSearchParameterId, name: "ix_ChildParamId");
            
            CreateTable(
                "public._SParamResource",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceType = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId");
            
            CreateTable(
                "public.ActivityDefinitionIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ActivityDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ActivityDefinitionIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ActivityDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public._BaseUrl",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Url = c.String(nullable: false, maxLength: 450),
                        IsServersPrimaryUrlRoot = c.Boolean(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .Index(t => t.Url, unique: true, name: "ix_Url");
            
            CreateTable(
                "public.ActivityDefinitionIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ActivityDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ActivityDefinitionIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ActivityDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ActivityDefinitionIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ActivityDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.AdverseEventRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.AdverseEventIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.AdverseEventRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.AdverseEventIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.AdverseEventRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.AdverseEventIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.AdverseEventRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.AdverseEventIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.AdverseEventRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.AdverseEventIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.AdverseEventRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.AdverseEventIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.AdverseEventRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.AllergyIntoleranceRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.AllergyIntoleranceIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.AllergyIntoleranceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.AllergyIntoleranceIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.AllergyIntoleranceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.AllergyIntoleranceIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.AllergyIntoleranceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.AllergyIntoleranceIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.AllergyIntoleranceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.AllergyIntoleranceIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.AllergyIntoleranceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.AllergyIntoleranceIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.AllergyIntoleranceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.AppointmentRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.AppointmentIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.AppointmentRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.AppointmentIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.AppointmentRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.AppointmentIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.AppointmentRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.AppointmentIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.AppointmentRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.AppointmentIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.AppointmentRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.AppointmentIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.AppointmentRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.AppointmentResponseRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.AppointmentResponseIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.AppointmentResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.AppointmentResponseIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.AppointmentResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.AppointmentResponseIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.AppointmentResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.AppointmentResponseIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.AppointmentResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.AppointmentResponseIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.AppointmentResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.AppointmentResponseIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.AppointmentResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.AuditEventRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.AuditEventIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.AuditEventRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.AuditEventIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.AuditEventRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.AuditEventIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.AuditEventRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.AuditEventIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.AuditEventRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.AuditEventIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.AuditEventRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.AuditEventIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.AuditEventRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.BasicRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.BasicIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.BasicRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.BasicIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.BasicRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.BasicIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.BasicRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.BasicIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.BasicRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.BasicIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.BasicRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.BasicIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.BasicRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.BinaryRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.BinaryIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.BinaryRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.BinaryIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.BinaryRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.BinaryIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.BinaryRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.BinaryIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.BinaryRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.BinaryIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.BinaryRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.BinaryIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.BinaryRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.BiologicallyDerivedProductRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.BiologicallyDerivedProductIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.BiologicallyDerivedProductRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.BiologicallyDerivedProductIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.BiologicallyDerivedProductRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.BiologicallyDerivedProductIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.BiologicallyDerivedProductRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.BiologicallyDerivedProductIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.BiologicallyDerivedProductRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.BiologicallyDerivedProductIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.BiologicallyDerivedProductRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.BiologicallyDerivedProductIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.BiologicallyDerivedProductRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.BodyStructureRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.BodyStructureIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.BodyStructureRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.BodyStructureIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.BodyStructureRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.BodyStructureIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.BodyStructureRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.BodyStructureIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.BodyStructureRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.BodyStructureIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.BodyStructureRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.BodyStructureIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.BodyStructureRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.BundleRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.BundleIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.BundleRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.BundleIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.BundleRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.BundleIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.BundleRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.BundleIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.BundleRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.BundleIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.BundleRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.BundleIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.BundleRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CapabilityStatementRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.CapabilityStatementIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CapabilityStatementRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CapabilityStatementIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CapabilityStatementRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CapabilityStatementIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CapabilityStatementRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CapabilityStatementIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CapabilityStatementRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CapabilityStatementIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CapabilityStatementRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CapabilityStatementIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CapabilityStatementRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CarePlanRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.CarePlanIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CarePlanRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CarePlanIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CarePlanRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CarePlanIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CarePlanRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CarePlanIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CarePlanRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CarePlanIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CarePlanRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CarePlanIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CarePlanRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CareTeamRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.CareTeamIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CareTeamRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CareTeamIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CareTeamRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CareTeamIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CareTeamRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CareTeamIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CareTeamRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CareTeamIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CareTeamRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CareTeamIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CareTeamRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ChargeItemDefinitionRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.ChargeItemDefinitionIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ChargeItemDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ChargeItemDefinitionIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ChargeItemDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ChargeItemDefinitionIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ChargeItemDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ChargeItemDefinitionIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ChargeItemDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ChargeItemDefinitionIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ChargeItemDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ChargeItemDefinitionIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ChargeItemDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ChargeItemRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.ChargeItemIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ChargeItemRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ChargeItemIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ChargeItemRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ChargeItemIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ChargeItemRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ChargeItemIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ChargeItemRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ChargeItemIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ChargeItemRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ChargeItemIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ChargeItemRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ClaimRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.ClaimIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ClaimRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ClaimIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ClaimRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ClaimIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ClaimRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ClaimIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ClaimRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ClaimIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ClaimRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ClaimIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ClaimRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ClaimResponseRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.ClaimResponseIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ClaimResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ClaimResponseIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ClaimResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ClaimResponseIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ClaimResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ClaimResponseIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ClaimResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ClaimResponseIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ClaimResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ClaimResponseIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ClaimResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ClinicalImpressionRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.ClinicalImpressionIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ClinicalImpressionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ClinicalImpressionIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ClinicalImpressionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ClinicalImpressionIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ClinicalImpressionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ClinicalImpressionIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ClinicalImpressionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ClinicalImpressionIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ClinicalImpressionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ClinicalImpressionIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ClinicalImpressionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CodeSystemRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.CodeSystemIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CodeSystemRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CodeSystemIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CodeSystemRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CodeSystemIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CodeSystemRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CodeSystemIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CodeSystemRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CodeSystemIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CodeSystemRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CodeSystemIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CodeSystemRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CommunicationRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.CommunicationIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CommunicationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CommunicationIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CommunicationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CommunicationIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CommunicationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CommunicationIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CommunicationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CommunicationIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CommunicationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CommunicationIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CommunicationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CommunicationRequestRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.CommunicationRequestIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CommunicationRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CommunicationRequestIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CommunicationRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CommunicationRequestIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CommunicationRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CommunicationRequestIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CommunicationRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CommunicationRequestIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CommunicationRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CommunicationRequestIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CommunicationRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CompartmentDefinitionRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.CompartmentDefinitionIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CompartmentDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CompartmentDefinitionIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CompartmentDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CompartmentDefinitionIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CompartmentDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CompartmentDefinitionIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CompartmentDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CompartmentDefinitionIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CompartmentDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CompartmentDefinitionIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CompartmentDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CompositionRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.CompositionIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CompositionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CompositionIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CompositionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CompositionIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CompositionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CompositionIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CompositionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CompositionIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CompositionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CompositionIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CompositionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ConceptMapRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.ConceptMapIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ConceptMapRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ConceptMapIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ConceptMapRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ConceptMapIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ConceptMapRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ConceptMapIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ConceptMapRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ConceptMapIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ConceptMapRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ConceptMapIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ConceptMapRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ConditionRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.ConditionIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ConditionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ConditionIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ConditionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ConditionIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ConditionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ConditionIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ConditionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ConditionIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ConditionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ConditionIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ConditionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ConsentRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.ConsentIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ConsentRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ConsentIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ConsentRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ConsentIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ConsentRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ConsentIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ConsentRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ConsentIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ConsentRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ConsentIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ConsentRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ContractRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.ContractIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ContractRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ContractIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ContractRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ContractIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ContractRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ContractIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ContractRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ContractIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ContractRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ContractIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ContractRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CoverageEligibilityRequestRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.CoverageEligibilityRequestIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CoverageEligibilityRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CoverageEligibilityRequestIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CoverageEligibilityRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CoverageEligibilityRequestIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CoverageEligibilityRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CoverageEligibilityRequestIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CoverageEligibilityRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CoverageEligibilityRequestIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CoverageEligibilityRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CoverageEligibilityRequestIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CoverageEligibilityRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CoverageEligibilityResponseRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.CoverageEligibilityResponseIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CoverageEligibilityResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CoverageEligibilityResponseIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CoverageEligibilityResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CoverageEligibilityResponseIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CoverageEligibilityResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CoverageEligibilityResponseIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CoverageEligibilityResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CoverageEligibilityResponseIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CoverageEligibilityResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CoverageEligibilityResponseIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CoverageEligibilityResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CoverageRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.CoverageIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CoverageRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CoverageIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CoverageRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CoverageIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CoverageRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CoverageIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CoverageRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CoverageIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CoverageRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CoverageIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CoverageRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DetectedIssueRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.DetectedIssueIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DetectedIssueRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DetectedIssueIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DetectedIssueRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DetectedIssueIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DetectedIssueRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DetectedIssueIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DetectedIssueRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DetectedIssueIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DetectedIssueRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DetectedIssueIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DetectedIssueRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DeviceDefinitionRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.DeviceDefinitionIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DeviceDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DeviceDefinitionIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DeviceDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DeviceDefinitionIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DeviceDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DeviceDefinitionIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DeviceDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DeviceDefinitionIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DeviceDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DeviceDefinitionIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DeviceDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DeviceRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.DeviceIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DeviceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DeviceIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DeviceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DeviceIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DeviceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DeviceIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DeviceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DeviceIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DeviceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DeviceIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DeviceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DeviceMetricRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.DeviceMetricIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DeviceMetricRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DeviceMetricIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DeviceMetricRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DeviceMetricIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DeviceMetricRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DeviceMetricIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DeviceMetricRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DeviceMetricIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DeviceMetricRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DeviceMetricIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DeviceMetricRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DeviceRequestRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.DeviceRequestIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DeviceRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DeviceRequestIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DeviceRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DeviceRequestIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DeviceRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DeviceRequestIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DeviceRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DeviceRequestIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DeviceRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DeviceRequestIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DeviceRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DeviceUseStatementRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.DeviceUseStatementIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DeviceUseStatementRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DeviceUseStatementIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DeviceUseStatementRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DeviceUseStatementIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DeviceUseStatementRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DeviceUseStatementIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DeviceUseStatementRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DeviceUseStatementIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DeviceUseStatementRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DeviceUseStatementIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DeviceUseStatementRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DiagnosticReportRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.DiagnosticReportIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DiagnosticReportRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DiagnosticReportIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DiagnosticReportRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DiagnosticReportIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DiagnosticReportRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DiagnosticReportIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DiagnosticReportRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DiagnosticReportIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DiagnosticReportRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DiagnosticReportIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DiagnosticReportRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DocumentManifestRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.DocumentManifestIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DocumentManifestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DocumentManifestIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DocumentManifestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DocumentManifestIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DocumentManifestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DocumentManifestIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DocumentManifestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DocumentManifestIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DocumentManifestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DocumentManifestIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DocumentManifestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DocumentReferenceRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.DocumentReferenceIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DocumentReferenceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DocumentReferenceIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DocumentReferenceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DocumentReferenceIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DocumentReferenceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DocumentReferenceIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DocumentReferenceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DocumentReferenceIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DocumentReferenceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DocumentReferenceIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DocumentReferenceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EncounterRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.EncounterIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EncounterRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EncounterIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EncounterRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EncounterIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EncounterRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EncounterIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EncounterRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EncounterIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EncounterRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EncounterIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EncounterRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EndpointRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.EndpointIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EndpointRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EndpointIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EndpointRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EndpointIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EndpointRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EndpointIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EndpointRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EndpointIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EndpointRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EndpointIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EndpointRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EnrollmentRequestRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.EnrollmentRequestIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EnrollmentRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EnrollmentRequestIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EnrollmentRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EnrollmentRequestIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EnrollmentRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EnrollmentRequestIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EnrollmentRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EnrollmentRequestIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EnrollmentRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EnrollmentRequestIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EnrollmentRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EnrollmentResponseRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.EnrollmentResponseIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EnrollmentResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EnrollmentResponseIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EnrollmentResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EnrollmentResponseIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EnrollmentResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EnrollmentResponseIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EnrollmentResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EnrollmentResponseIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EnrollmentResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EnrollmentResponseIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EnrollmentResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EntryDefinitionRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.EntryDefinitionIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EntryDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EntryDefinitionIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EntryDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EntryDefinitionIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EntryDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EntryDefinitionIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EntryDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EntryDefinitionIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EntryDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EntryDefinitionIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EntryDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EpisodeOfCareRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.EpisodeOfCareIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EpisodeOfCareRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EpisodeOfCareIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EpisodeOfCareRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EpisodeOfCareIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EpisodeOfCareRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EpisodeOfCareIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EpisodeOfCareRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EpisodeOfCareIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EpisodeOfCareRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EpisodeOfCareIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EpisodeOfCareRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EventDefinitionRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.EventDefinitionIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EventDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EventDefinitionIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EventDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EventDefinitionIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EventDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EventDefinitionIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EventDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EventDefinitionIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EventDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EventDefinitionIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EventDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ExampleScenarioRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.ExampleScenarioIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ExampleScenarioRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ExampleScenarioIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ExampleScenarioRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ExampleScenarioIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ExampleScenarioRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ExampleScenarioIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ExampleScenarioRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ExampleScenarioIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ExampleScenarioRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ExampleScenarioIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ExampleScenarioRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ExplanationOfBenefitRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.ExplanationOfBenefitIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ExplanationOfBenefitRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ExplanationOfBenefitIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ExplanationOfBenefitRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ExplanationOfBenefitIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ExplanationOfBenefitRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ExplanationOfBenefitIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ExplanationOfBenefitRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ExplanationOfBenefitIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ExplanationOfBenefitRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ExplanationOfBenefitIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ExplanationOfBenefitRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.FamilyMemberHistoryRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.FamilyMemberHistoryIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.FamilyMemberHistoryRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.FamilyMemberHistoryIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.FamilyMemberHistoryRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.FamilyMemberHistoryIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.FamilyMemberHistoryRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.FamilyMemberHistoryIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.FamilyMemberHistoryRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.FamilyMemberHistoryIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.FamilyMemberHistoryRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.FamilyMemberHistoryIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.FamilyMemberHistoryRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.FlagRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.FlagIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.FlagRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.FlagIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.FlagRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.FlagIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.FlagRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.FlagIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.FlagRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.FlagIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.FlagRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.FlagIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.FlagRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.GoalRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.GoalIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.GoalRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.GoalIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.GoalRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.GoalIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.GoalRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.GoalIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.GoalRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.GoalIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.GoalRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.GoalIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.GoalRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.GraphDefinitionRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.GraphDefinitionIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.GraphDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.GraphDefinitionIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.GraphDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.GraphDefinitionIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.GraphDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.GraphDefinitionIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.GraphDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.GraphDefinitionIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.GraphDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.GraphDefinitionIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.GraphDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.GroupRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.GroupIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.GroupRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.GroupIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.GroupRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.GroupIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.GroupRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.GroupIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.GroupRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.GroupIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.GroupRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.GroupIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.GroupRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.GuidanceResponseRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.GuidanceResponseIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.GuidanceResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.GuidanceResponseIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.GuidanceResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.GuidanceResponseIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.GuidanceResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.GuidanceResponseIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.GuidanceResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.GuidanceResponseIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.GuidanceResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.GuidanceResponseIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.GuidanceResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.HealthcareServiceRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.HealthcareServiceIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.HealthcareServiceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.HealthcareServiceIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.HealthcareServiceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.HealthcareServiceIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.HealthcareServiceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.HealthcareServiceIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.HealthcareServiceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.HealthcareServiceIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.HealthcareServiceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.HealthcareServiceIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.HealthcareServiceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ImagingStudyRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.ImagingStudyIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ImagingStudyRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ImagingStudyIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ImagingStudyRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ImagingStudyIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ImagingStudyRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ImagingStudyIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ImagingStudyRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ImagingStudyIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ImagingStudyRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ImagingStudyIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ImagingStudyRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ImmunizationEvaluationRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.ImmunizationEvaluationIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ImmunizationEvaluationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ImmunizationEvaluationIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ImmunizationEvaluationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ImmunizationEvaluationIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ImmunizationEvaluationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ImmunizationEvaluationIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ImmunizationEvaluationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ImmunizationEvaluationIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ImmunizationEvaluationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ImmunizationEvaluationIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ImmunizationEvaluationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ImmunizationRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.ImmunizationIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ImmunizationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ImmunizationIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ImmunizationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ImmunizationIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ImmunizationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ImmunizationIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ImmunizationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ImmunizationIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ImmunizationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ImmunizationIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ImmunizationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ImmunizationRecommendationRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.ImmunizationRecommendationIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ImmunizationRecommendationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ImmunizationRecommendationIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ImmunizationRecommendationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ImmunizationRecommendationIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ImmunizationRecommendationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ImmunizationRecommendationIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ImmunizationRecommendationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ImmunizationRecommendationIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ImmunizationRecommendationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ImmunizationRecommendationIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ImmunizationRecommendationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ImplementationGuideRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.ImplementationGuideIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ImplementationGuideRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ImplementationGuideIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ImplementationGuideRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ImplementationGuideIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ImplementationGuideRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ImplementationGuideIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ImplementationGuideRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ImplementationGuideIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ImplementationGuideRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ImplementationGuideIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ImplementationGuideRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.InsurancePlanRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.InsurancePlanIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.InsurancePlanRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.InsurancePlanIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.InsurancePlanRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.InsurancePlanIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.InsurancePlanRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.InsurancePlanIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.InsurancePlanRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.InsurancePlanIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.InsurancePlanRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.InsurancePlanIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.InsurancePlanRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.InvoiceRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.InvoiceIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.InvoiceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.InvoiceIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.InvoiceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.InvoiceIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.InvoiceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.InvoiceIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.InvoiceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.InvoiceIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.InvoiceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.InvoiceIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.InvoiceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ItemInstanceRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.ItemInstanceIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ItemInstanceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ItemInstanceIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ItemInstanceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ItemInstanceIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ItemInstanceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ItemInstanceIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ItemInstanceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ItemInstanceIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ItemInstanceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ItemInstanceIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ItemInstanceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.LibraryRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.LibraryIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.LibraryRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.LibraryIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.LibraryRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.LibraryIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.LibraryRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.LibraryIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.LibraryRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.LibraryIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.LibraryRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.LibraryIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.LibraryRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.LinkageRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.LinkageIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.LinkageRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.LinkageIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.LinkageRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.LinkageIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.LinkageRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.LinkageIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.LinkageRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.LinkageIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.LinkageRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.LinkageIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.LinkageRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ListRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.ListIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ListRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ListIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ListRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ListIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ListRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ListIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ListRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ListIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ListRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ListIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ListRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.LocationRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.LocationIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.LocationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.LocationIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.LocationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.LocationIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.LocationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.LocationIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.LocationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.LocationIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.LocationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.LocationIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.LocationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MeasureRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.MeasureIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MeasureRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MeasureIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MeasureRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MeasureIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MeasureRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MeasureIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MeasureRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MeasureIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MeasureRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MeasureIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MeasureRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MeasureReportRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.MeasureReportIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MeasureReportRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MeasureReportIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MeasureReportRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MeasureReportIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MeasureReportRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MeasureReportIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MeasureReportRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MeasureReportIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MeasureReportRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MeasureReportIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MeasureReportRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MediaRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.MediaIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MediaRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MediaIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MediaRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MediaIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MediaRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MediaIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MediaRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MediaIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MediaRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MediaIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MediaRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicationAdministrationRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.MedicationAdministrationIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicationAdministrationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicationAdministrationIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicationAdministrationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicationAdministrationIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicationAdministrationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicationAdministrationIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicationAdministrationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicationAdministrationIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicationAdministrationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicationAdministrationIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicationAdministrationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicationDispenseRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.MedicationDispenseIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicationDispenseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicationDispenseIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicationDispenseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicationDispenseIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicationDispenseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicationDispenseIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicationDispenseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicationDispenseIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicationDispenseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicationDispenseIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicationDispenseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicationKnowledgeRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.MedicationKnowledgeIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicationKnowledgeRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicationKnowledgeIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicationKnowledgeRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicationKnowledgeIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicationKnowledgeRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicationKnowledgeIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicationKnowledgeRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicationKnowledgeIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicationKnowledgeRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicationKnowledgeIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicationKnowledgeRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicationRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.MedicationIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicationIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicationIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicationIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicationIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicationIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicationRequestRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.MedicationRequestIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicationRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicationRequestIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicationRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicationRequestIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicationRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicationRequestIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicationRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicationRequestIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicationRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicationRequestIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicationRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicationStatementRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.MedicationStatementIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicationStatementRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicationStatementIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicationStatementRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicationStatementIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicationStatementRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicationStatementIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicationStatementRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicationStatementIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicationStatementRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicationStatementIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicationStatementRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicinalProductAuthorizationRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.MedicinalProductAuthorizationIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicinalProductAuthorizationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicinalProductAuthorizationIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicinalProductAuthorizationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicinalProductAuthorizationIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicinalProductAuthorizationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicinalProductAuthorizationIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicinalProductAuthorizationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicinalProductAuthorizationIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicinalProductAuthorizationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicinalProductAuthorizationIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicinalProductAuthorizationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicinalProductClinicalsRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.MedicinalProductClinicalsIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicinalProductClinicalsRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicinalProductClinicalsIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicinalProductClinicalsRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicinalProductClinicalsIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicinalProductClinicalsRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicinalProductClinicalsIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicinalProductClinicalsRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicinalProductClinicalsIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicinalProductClinicalsRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicinalProductClinicalsIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicinalProductClinicalsRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicinalProductContraindicationRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.MedicinalProductContraindicationIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicinalProductContraindicationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicinalProductContraindicationIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicinalProductContraindicationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicinalProductContraindicationIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicinalProductContraindicationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicinalProductContraindicationIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicinalProductContraindicationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicinalProductContraindicationIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicinalProductContraindicationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicinalProductContraindicationIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicinalProductContraindicationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicinalProductDeviceSpecRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.MedicinalProductDeviceSpecIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicinalProductDeviceSpecRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicinalProductDeviceSpecIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicinalProductDeviceSpecRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicinalProductDeviceSpecIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicinalProductDeviceSpecRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicinalProductDeviceSpecIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicinalProductDeviceSpecRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicinalProductDeviceSpecIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicinalProductDeviceSpecRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicinalProductDeviceSpecIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicinalProductDeviceSpecRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicinalProductIndicationRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.MedicinalProductIndicationIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicinalProductIndicationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicinalProductIndicationIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicinalProductIndicationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicinalProductIndicationIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicinalProductIndicationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicinalProductIndicationIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicinalProductIndicationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicinalProductIndicationIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicinalProductIndicationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicinalProductIndicationIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicinalProductIndicationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicinalProductIngredientRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.MedicinalProductIngredientIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicinalProductIngredientRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicinalProductIngredientIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicinalProductIngredientRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicinalProductIngredientIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicinalProductIngredientRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicinalProductIngredientIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicinalProductIngredientRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicinalProductIngredientIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicinalProductIngredientRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicinalProductIngredientIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicinalProductIngredientRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicinalProductInteractionRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.MedicinalProductInteractionIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicinalProductInteractionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicinalProductInteractionIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicinalProductInteractionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicinalProductInteractionIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicinalProductInteractionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicinalProductInteractionIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicinalProductInteractionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicinalProductInteractionIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicinalProductInteractionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicinalProductInteractionIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicinalProductInteractionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicinalProductRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.MedicinalProductIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicinalProductRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicinalProductIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicinalProductRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicinalProductIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicinalProductRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicinalProductIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicinalProductRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicinalProductIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicinalProductRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicinalProductIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicinalProductRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicinalProductManufacturedRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.MedicinalProductManufacturedIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicinalProductManufacturedRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicinalProductManufacturedIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicinalProductManufacturedRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicinalProductManufacturedIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicinalProductManufacturedRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicinalProductManufacturedIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicinalProductManufacturedRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicinalProductManufacturedIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicinalProductManufacturedRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicinalProductManufacturedIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicinalProductManufacturedRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicinalProductPackagedRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.MedicinalProductPackagedIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicinalProductPackagedRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicinalProductPackagedIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicinalProductPackagedRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicinalProductPackagedIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicinalProductPackagedRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicinalProductPackagedIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicinalProductPackagedRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicinalProductPackagedIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicinalProductPackagedRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicinalProductPackagedIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicinalProductPackagedRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicinalProductPharmaceuticalRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.MedicinalProductPharmaceuticalIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicinalProductPharmaceuticalRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicinalProductPharmaceuticalIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicinalProductPharmaceuticalRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicinalProductPharmaceuticalIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicinalProductPharmaceuticalRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicinalProductPharmaceuticalIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicinalProductPharmaceuticalRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicinalProductPharmaceuticalIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicinalProductPharmaceuticalRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicinalProductPharmaceuticalIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicinalProductPharmaceuticalRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicinalProductUndesirableEffectRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.MedicinalProductUndesirableEffectIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicinalProductUndesirableEffectRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicinalProductUndesirableEffectIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicinalProductUndesirableEffectRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicinalProductUndesirableEffectIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicinalProductUndesirableEffectRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicinalProductUndesirableEffectIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicinalProductUndesirableEffectRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicinalProductUndesirableEffectIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicinalProductUndesirableEffectRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicinalProductUndesirableEffectIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicinalProductUndesirableEffectRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MessageDefinitionRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.MessageDefinitionIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MessageDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MessageDefinitionIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MessageDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MessageDefinitionIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MessageDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MessageDefinitionIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MessageDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MessageDefinitionIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MessageDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MessageDefinitionIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MessageDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MessageHeaderRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.MessageHeaderIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MessageHeaderRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MessageHeaderIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MessageHeaderRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MessageHeaderIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MessageHeaderRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MessageHeaderIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MessageHeaderRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MessageHeaderIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MessageHeaderRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MessageHeaderIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MessageHeaderRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.NamingSystemRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.NamingSystemIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.NamingSystemRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.NamingSystemIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.NamingSystemRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.NamingSystemIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.NamingSystemRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.NamingSystemIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.NamingSystemRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.NamingSystemIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.NamingSystemRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.NamingSystemIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.NamingSystemRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.NutritionOrderRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.NutritionOrderIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.NutritionOrderRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.NutritionOrderIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.NutritionOrderRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.NutritionOrderIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.NutritionOrderRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.NutritionOrderIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.NutritionOrderRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.NutritionOrderIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.NutritionOrderRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.NutritionOrderIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.NutritionOrderRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ObservationDefinitionRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.ObservationDefinitionIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ObservationDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ObservationDefinitionIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ObservationDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ObservationDefinitionIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ObservationDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ObservationDefinitionIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ObservationDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ObservationDefinitionIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ObservationDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ObservationDefinitionIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ObservationDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ObservationRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.ObservationIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ObservationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ObservationIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ObservationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ObservationIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ObservationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ObservationIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ObservationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ObservationIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ObservationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ObservationIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ObservationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.OperationDefinitionRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.OperationDefinitionIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.OperationDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.OperationDefinitionIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.OperationDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.OperationDefinitionIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.OperationDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.OperationDefinitionIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.OperationDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.OperationDefinitionIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.OperationDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.OperationDefinitionIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.OperationDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.OperationOutcomeRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.OperationOutcomeIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.OperationOutcomeRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.OperationOutcomeIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.OperationOutcomeRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.OperationOutcomeIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.OperationOutcomeRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.OperationOutcomeIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.OperationOutcomeRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.OperationOutcomeIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.OperationOutcomeRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.OperationOutcomeIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.OperationOutcomeRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.OrganizationAffiliationRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.OrganizationAffiliationIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.OrganizationAffiliationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.OrganizationAffiliationIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.OrganizationAffiliationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.OrganizationAffiliationIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.OrganizationAffiliationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.OrganizationAffiliationIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.OrganizationAffiliationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.OrganizationAffiliationIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.OrganizationAffiliationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.OrganizationAffiliationIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.OrganizationAffiliationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.OrganizationRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.OrganizationIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.OrganizationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.OrganizationIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.OrganizationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.OrganizationIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.OrganizationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.OrganizationIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.OrganizationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.OrganizationIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.OrganizationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.OrganizationIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.OrganizationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ParametersRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.ParametersIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ParametersRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ParametersIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ParametersRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ParametersIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ParametersRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ParametersIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ParametersRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ParametersIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ParametersRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ParametersIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ParametersRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PatientRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.PatientIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PatientRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PatientIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PatientRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PatientIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PatientRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PatientIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PatientRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PatientIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PatientRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PatientIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PatientRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PaymentNoticeRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.PaymentNoticeIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PaymentNoticeRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PaymentNoticeIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PaymentNoticeRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PaymentNoticeIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PaymentNoticeRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PaymentNoticeIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PaymentNoticeRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PaymentNoticeIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PaymentNoticeRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PaymentNoticeIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PaymentNoticeRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PaymentReconciliationRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.PaymentReconciliationIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PaymentReconciliationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PaymentReconciliationIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PaymentReconciliationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PaymentReconciliationIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PaymentReconciliationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PaymentReconciliationIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PaymentReconciliationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PaymentReconciliationIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PaymentReconciliationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PaymentReconciliationIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PaymentReconciliationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PersonRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.PersonIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PersonRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PersonIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PersonRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PersonIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PersonRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PersonIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PersonRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PersonIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PersonRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PersonIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PersonRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PlanDefinitionRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.PlanDefinitionIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PlanDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PlanDefinitionIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PlanDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PlanDefinitionIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PlanDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PlanDefinitionIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PlanDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PlanDefinitionIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PlanDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PlanDefinitionIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PlanDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PractitionerRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.PractitionerIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PractitionerRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PractitionerIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PractitionerRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PractitionerIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PractitionerRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PractitionerIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PractitionerRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PractitionerIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PractitionerRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PractitionerIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PractitionerRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PractitionerRoleRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.PractitionerRoleIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PractitionerRoleRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PractitionerRoleIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PractitionerRoleRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PractitionerRoleIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PractitionerRoleRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PractitionerRoleIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PractitionerRoleRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PractitionerRoleIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PractitionerRoleRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PractitionerRoleIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PractitionerRoleRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ProcedureRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.ProcedureIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ProcedureRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ProcedureIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ProcedureRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ProcedureIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ProcedureRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ProcedureIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ProcedureRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ProcedureIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ProcedureRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ProcedureIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ProcedureRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ProcessRequestRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.ProcessRequestIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ProcessRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ProcessRequestIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ProcessRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ProcessRequestIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ProcessRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ProcessRequestIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ProcessRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ProcessRequestIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ProcessRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ProcessRequestIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ProcessRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ProcessResponseRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.ProcessResponseIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ProcessResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ProcessResponseIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ProcessResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ProcessResponseIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ProcessResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ProcessResponseIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ProcessResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ProcessResponseIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ProcessResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ProcessResponseIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ProcessResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ProvenanceRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.ProvenanceIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ProvenanceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ProvenanceIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ProvenanceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ProvenanceIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ProvenanceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ProvenanceIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ProvenanceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ProvenanceIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ProvenanceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ProvenanceIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ProvenanceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.QuestionnaireRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.QuestionnaireIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.QuestionnaireRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.QuestionnaireIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.QuestionnaireRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.QuestionnaireIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.QuestionnaireRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.QuestionnaireIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.QuestionnaireRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.QuestionnaireIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.QuestionnaireRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.QuestionnaireIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.QuestionnaireRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.QuestionnaireResponseRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.QuestionnaireResponseIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.QuestionnaireResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.QuestionnaireResponseIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.QuestionnaireResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.QuestionnaireResponseIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.QuestionnaireResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.QuestionnaireResponseIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.QuestionnaireResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.QuestionnaireResponseIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.QuestionnaireResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.QuestionnaireResponseIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.QuestionnaireResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.RelatedPersonRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.RelatedPersonIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.RelatedPersonRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.RelatedPersonIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.RelatedPersonRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.RelatedPersonIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.RelatedPersonRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.RelatedPersonIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.RelatedPersonRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.RelatedPersonIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.RelatedPersonRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.RelatedPersonIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.RelatedPersonRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.RequestGroupRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.RequestGroupIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.RequestGroupRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.RequestGroupIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.RequestGroupRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.RequestGroupIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.RequestGroupRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.RequestGroupIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.RequestGroupRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.RequestGroupIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.RequestGroupRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.RequestGroupIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.RequestGroupRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ResearchStudyRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.ResearchStudyIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ResearchStudyRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ResearchStudyIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ResearchStudyRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ResearchStudyIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ResearchStudyRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ResearchStudyIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ResearchStudyRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ResearchStudyIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ResearchStudyRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ResearchStudyIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ResearchStudyRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ResearchSubjectRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.ResearchSubjectIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ResearchSubjectRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ResearchSubjectIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ResearchSubjectRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ResearchSubjectIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ResearchSubjectRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ResearchSubjectIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ResearchSubjectRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ResearchSubjectIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ResearchSubjectRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ResearchSubjectIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ResearchSubjectRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.RiskAssessmentRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.RiskAssessmentIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.RiskAssessmentRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.RiskAssessmentIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.RiskAssessmentRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.RiskAssessmentIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.RiskAssessmentRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.RiskAssessmentIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.RiskAssessmentRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.RiskAssessmentIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.RiskAssessmentRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.RiskAssessmentIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.RiskAssessmentRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ScheduleRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.ScheduleIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ScheduleRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ScheduleIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ScheduleRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ScheduleIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ScheduleRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ScheduleIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ScheduleRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ScheduleIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ScheduleRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ScheduleIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ScheduleRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SearchParameterRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.SearchParameterIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SearchParameterRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SearchParameterIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SearchParameterRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SearchParameterIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SearchParameterRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SearchParameterIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SearchParameterRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SearchParameterIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SearchParameterRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SearchParameterIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SearchParameterRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SequenceRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.SequenceIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SequenceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SequenceIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SequenceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SequenceIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SequenceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SequenceIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SequenceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SequenceIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SequenceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SequenceIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SequenceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ServiceRequestRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.ServiceRequestIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ServiceRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ServiceRequestIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ServiceRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ServiceRequestIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ServiceRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ServiceRequestIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ServiceRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ServiceRequestIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ServiceRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ServiceRequestIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ServiceRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SlotRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.SlotIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SlotRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SlotIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SlotRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SlotIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SlotRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SlotIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SlotRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SlotIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SlotRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SlotIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SlotRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SpecimenDefinitionRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.SpecimenDefinitionIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SpecimenDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SpecimenDefinitionIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SpecimenDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SpecimenDefinitionIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SpecimenDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SpecimenDefinitionIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SpecimenDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SpecimenDefinitionIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SpecimenDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SpecimenDefinitionIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SpecimenDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SpecimenRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.SpecimenIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SpecimenRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SpecimenIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SpecimenRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SpecimenIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SpecimenRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SpecimenIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SpecimenRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SpecimenIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SpecimenRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SpecimenIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SpecimenRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.StructureDefinitionRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.StructureDefinitionIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.StructureDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.StructureDefinitionIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.StructureDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.StructureDefinitionIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.StructureDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.StructureDefinitionIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.StructureDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.StructureDefinitionIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.StructureDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.StructureDefinitionIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.StructureDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.StructureMapRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.StructureMapIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.StructureMapRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.StructureMapIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.StructureMapRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.StructureMapIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.StructureMapRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.StructureMapIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.StructureMapRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.StructureMapIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.StructureMapRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.StructureMapIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.StructureMapRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SubscriptionRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.SubscriptionIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SubscriptionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SubscriptionIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SubscriptionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SubscriptionIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SubscriptionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SubscriptionIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SubscriptionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SubscriptionIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SubscriptionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SubscriptionIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SubscriptionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SubstanceRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.SubstanceIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SubstanceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SubstanceIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SubstanceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SubstanceIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SubstanceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SubstanceIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SubstanceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SubstanceIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SubstanceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SubstanceIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SubstanceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SubstancePolymerRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.SubstancePolymerIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SubstancePolymerRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SubstancePolymerIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SubstancePolymerRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SubstancePolymerIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SubstancePolymerRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SubstancePolymerIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SubstancePolymerRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SubstancePolymerIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SubstancePolymerRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SubstancePolymerIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SubstancePolymerRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SubstanceReferenceInformationRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.SubstanceReferenceInformationIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SubstanceReferenceInformationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SubstanceReferenceInformationIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SubstanceReferenceInformationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SubstanceReferenceInformationIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SubstanceReferenceInformationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SubstanceReferenceInformationIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SubstanceReferenceInformationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SubstanceReferenceInformationIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SubstanceReferenceInformationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SubstanceReferenceInformationIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SubstanceReferenceInformationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SubstanceSpecificationRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.SubstanceSpecificationIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SubstanceSpecificationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SubstanceSpecificationIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SubstanceSpecificationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SubstanceSpecificationIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SubstanceSpecificationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SubstanceSpecificationIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SubstanceSpecificationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SubstanceSpecificationIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SubstanceSpecificationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SubstanceSpecificationIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SubstanceSpecificationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SupplyDeliveryRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.SupplyDeliveryIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SupplyDeliveryRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SupplyDeliveryIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SupplyDeliveryRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SupplyDeliveryIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SupplyDeliveryRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SupplyDeliveryIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SupplyDeliveryRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SupplyDeliveryIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SupplyDeliveryRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SupplyDeliveryIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SupplyDeliveryRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SupplyRequestRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.SupplyRequestIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SupplyRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SupplyRequestIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SupplyRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SupplyRequestIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SupplyRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SupplyRequestIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SupplyRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SupplyRequestIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SupplyRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SupplyRequestIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SupplyRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.TaskRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.TaskIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.TaskRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.TaskIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.TaskRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.TaskIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.TaskRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.TaskIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.TaskRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.TaskIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.TaskRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.TaskIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.TaskRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.TerminologyCapabilitiesRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.TerminologyCapabilitiesIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.TerminologyCapabilitiesRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.TerminologyCapabilitiesIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.TerminologyCapabilitiesRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.TerminologyCapabilitiesIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.TerminologyCapabilitiesRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.TerminologyCapabilitiesIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.TerminologyCapabilitiesRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.TerminologyCapabilitiesIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.TerminologyCapabilitiesRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.TerminologyCapabilitiesIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.TerminologyCapabilitiesRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.TestReportRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.TestReportIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.TestReportRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.TestReportIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.TestReportRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.TestReportIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.TestReportRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.TestReportIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.TestReportRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.TestReportIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.TestReportRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.TestReportIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.TestReportRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.TestScriptRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.TestScriptIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.TestScriptRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.TestScriptIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.TestScriptRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.TestScriptIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.TestScriptRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.TestScriptIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.TestScriptRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.TestScriptIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.TestScriptRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.TestScriptIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.TestScriptRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.UserSessionRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.UserSessionIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.UserSessionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.UserSessionIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.UserSessionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.UserSessionIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.UserSessionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.UserSessionIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.UserSessionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.UserSessionIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.UserSessionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.UserSessionIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.UserSessionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ValueSetRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.ValueSetIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ValueSetRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ValueSetIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ValueSetRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ValueSetIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ValueSetRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ValueSetIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ValueSetRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ValueSetIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ValueSetRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ValueSetIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ValueSetRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.VerificationResultRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.VerificationResultIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.VerificationResultRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.VerificationResultIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.VerificationResultRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.VerificationResultIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.VerificationResultRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.VerificationResultIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.VerificationResultRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.VerificationResultIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.VerificationResultRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.VerificationResultIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.VerificationResultRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.VisionPrescriptionRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.VisionPrescriptionIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.VisionPrescriptionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.VisionPrescriptionIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.VisionPrescriptionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.VisionPrescriptionIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.VisionPrescriptionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.VisionPrescriptionIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.VisionPrescriptionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.VisionPrescriptionIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.VisionPrescriptionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.VisionPrescriptionIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.VisionPrescriptionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.AccountIxDT",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.AccountRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.AccountIxQty",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.AccountRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.AccountIxRef",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.AccountRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.AccountIxStr",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.AccountRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.AccountIxTok",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.AccountRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.AccountIxUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.AccountRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public._Compartment",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Url = c.String(nullable: false, maxLength: 450),
                        CompartmentDefinitionResourceId = c.String(nullable: false, maxLength: 128),
                        CompartmentDefinitionResourceVersion = c.String(nullable: false, maxLength: 128),
                        Name = c.String(nullable: false, maxLength: 128),
                        Code = c.String(nullable: false, maxLength: 50),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                    })
                .PrimaryKey(t => t.Id)
                .Index(t => t.Code, unique: true, name: "ix_CompartmentCode");
            
            CreateTable(
                "public._CompartmentRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(nullable: false, maxLength: 50),
                        Param = c.String(),
                        _ServiceCompartmentId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._Compartment", t => t._ServiceCompartmentId, cascadeDelete: true)
                .Index(t => t._ServiceCompartmentId, name: "ix_CompartmentId");
            
            CreateTable(
                "public._ServConfig",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Parameter = c.String(nullable: false, maxLength: 450),
                        Value = c.String(nullable: false, maxLength: 450),
                        CreatedDate = c.DateTimeOffset(nullable: false, precision: 3),
                        CreatedUser = c.String(nullable: false),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        LastUpdatedUser = c.String(nullable: false),
                    })
                .PrimaryKey(t => t.Id);
            
        }
        
        public override void Down()
        {
            DropForeignKey("public._CompartmentRes", "_ServiceCompartmentId", "public._Compartment");
            DropForeignKey("public.AccountIxUri", "ResourceId", "public.AccountRes");
            DropForeignKey("public.AccountIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.AccountIxTok", "ResourceId", "public.AccountRes");
            DropForeignKey("public.AccountIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.AccountIxStr", "ResourceId", "public.AccountRes");
            DropForeignKey("public.AccountIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.AccountIxRef", "ResourceId", "public.AccountRes");
            DropForeignKey("public.AccountIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.AccountIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.AccountIxQty", "ResourceId", "public.AccountRes");
            DropForeignKey("public.AccountIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.AccountIxDT", "ResourceId", "public.AccountRes");
            DropForeignKey("public.AccountIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.VisionPrescriptionIxUri", "ResourceId", "public.VisionPrescriptionRes");
            DropForeignKey("public.VisionPrescriptionIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.VisionPrescriptionIxTok", "ResourceId", "public.VisionPrescriptionRes");
            DropForeignKey("public.VisionPrescriptionIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.VisionPrescriptionIxStr", "ResourceId", "public.VisionPrescriptionRes");
            DropForeignKey("public.VisionPrescriptionIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.VisionPrescriptionIxRef", "ResourceId", "public.VisionPrescriptionRes");
            DropForeignKey("public.VisionPrescriptionIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.VisionPrescriptionIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.VisionPrescriptionIxQty", "ResourceId", "public.VisionPrescriptionRes");
            DropForeignKey("public.VisionPrescriptionIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.VisionPrescriptionIxDT", "ResourceId", "public.VisionPrescriptionRes");
            DropForeignKey("public.VisionPrescriptionIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.VisionPrescriptionRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.VerificationResultIxUri", "ResourceId", "public.VerificationResultRes");
            DropForeignKey("public.VerificationResultIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.VerificationResultIxTok", "ResourceId", "public.VerificationResultRes");
            DropForeignKey("public.VerificationResultIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.VerificationResultIxStr", "ResourceId", "public.VerificationResultRes");
            DropForeignKey("public.VerificationResultIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.VerificationResultIxRef", "ResourceId", "public.VerificationResultRes");
            DropForeignKey("public.VerificationResultIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.VerificationResultIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.VerificationResultIxQty", "ResourceId", "public.VerificationResultRes");
            DropForeignKey("public.VerificationResultIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.VerificationResultIxDT", "ResourceId", "public.VerificationResultRes");
            DropForeignKey("public.VerificationResultIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.VerificationResultRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.ValueSetIxUri", "ResourceId", "public.ValueSetRes");
            DropForeignKey("public.ValueSetIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ValueSetIxTok", "ResourceId", "public.ValueSetRes");
            DropForeignKey("public.ValueSetIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ValueSetIxStr", "ResourceId", "public.ValueSetRes");
            DropForeignKey("public.ValueSetIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ValueSetIxRef", "ResourceId", "public.ValueSetRes");
            DropForeignKey("public.ValueSetIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ValueSetIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.ValueSetIxQty", "ResourceId", "public.ValueSetRes");
            DropForeignKey("public.ValueSetIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ValueSetIxDT", "ResourceId", "public.ValueSetRes");
            DropForeignKey("public.ValueSetIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ValueSetRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.UserSessionIxUri", "ResourceId", "public.UserSessionRes");
            DropForeignKey("public.UserSessionIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.UserSessionIxTok", "ResourceId", "public.UserSessionRes");
            DropForeignKey("public.UserSessionIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.UserSessionIxStr", "ResourceId", "public.UserSessionRes");
            DropForeignKey("public.UserSessionIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.UserSessionIxRef", "ResourceId", "public.UserSessionRes");
            DropForeignKey("public.UserSessionIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.UserSessionIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.UserSessionIxQty", "ResourceId", "public.UserSessionRes");
            DropForeignKey("public.UserSessionIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.UserSessionIxDT", "ResourceId", "public.UserSessionRes");
            DropForeignKey("public.UserSessionIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.UserSessionRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.TestScriptIxUri", "ResourceId", "public.TestScriptRes");
            DropForeignKey("public.TestScriptIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.TestScriptIxTok", "ResourceId", "public.TestScriptRes");
            DropForeignKey("public.TestScriptIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.TestScriptIxStr", "ResourceId", "public.TestScriptRes");
            DropForeignKey("public.TestScriptIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.TestScriptIxRef", "ResourceId", "public.TestScriptRes");
            DropForeignKey("public.TestScriptIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.TestScriptIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.TestScriptIxQty", "ResourceId", "public.TestScriptRes");
            DropForeignKey("public.TestScriptIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.TestScriptIxDT", "ResourceId", "public.TestScriptRes");
            DropForeignKey("public.TestScriptIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.TestScriptRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.TestReportIxUri", "ResourceId", "public.TestReportRes");
            DropForeignKey("public.TestReportIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.TestReportIxTok", "ResourceId", "public.TestReportRes");
            DropForeignKey("public.TestReportIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.TestReportIxStr", "ResourceId", "public.TestReportRes");
            DropForeignKey("public.TestReportIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.TestReportIxRef", "ResourceId", "public.TestReportRes");
            DropForeignKey("public.TestReportIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.TestReportIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.TestReportIxQty", "ResourceId", "public.TestReportRes");
            DropForeignKey("public.TestReportIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.TestReportIxDT", "ResourceId", "public.TestReportRes");
            DropForeignKey("public.TestReportIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.TestReportRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.TerminologyCapabilitiesIxUri", "ResourceId", "public.TerminologyCapabilitiesRes");
            DropForeignKey("public.TerminologyCapabilitiesIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.TerminologyCapabilitiesIxTok", "ResourceId", "public.TerminologyCapabilitiesRes");
            DropForeignKey("public.TerminologyCapabilitiesIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.TerminologyCapabilitiesIxStr", "ResourceId", "public.TerminologyCapabilitiesRes");
            DropForeignKey("public.TerminologyCapabilitiesIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.TerminologyCapabilitiesIxRef", "ResourceId", "public.TerminologyCapabilitiesRes");
            DropForeignKey("public.TerminologyCapabilitiesIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.TerminologyCapabilitiesIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.TerminologyCapabilitiesIxQty", "ResourceId", "public.TerminologyCapabilitiesRes");
            DropForeignKey("public.TerminologyCapabilitiesIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.TerminologyCapabilitiesIxDT", "ResourceId", "public.TerminologyCapabilitiesRes");
            DropForeignKey("public.TerminologyCapabilitiesIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.TerminologyCapabilitiesRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.TaskIxUri", "ResourceId", "public.TaskRes");
            DropForeignKey("public.TaskIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.TaskIxTok", "ResourceId", "public.TaskRes");
            DropForeignKey("public.TaskIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.TaskIxStr", "ResourceId", "public.TaskRes");
            DropForeignKey("public.TaskIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.TaskIxRef", "ResourceId", "public.TaskRes");
            DropForeignKey("public.TaskIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.TaskIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.TaskIxQty", "ResourceId", "public.TaskRes");
            DropForeignKey("public.TaskIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.TaskIxDT", "ResourceId", "public.TaskRes");
            DropForeignKey("public.TaskIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.TaskRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.SupplyRequestIxUri", "ResourceId", "public.SupplyRequestRes");
            DropForeignKey("public.SupplyRequestIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SupplyRequestIxTok", "ResourceId", "public.SupplyRequestRes");
            DropForeignKey("public.SupplyRequestIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SupplyRequestIxStr", "ResourceId", "public.SupplyRequestRes");
            DropForeignKey("public.SupplyRequestIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SupplyRequestIxRef", "ResourceId", "public.SupplyRequestRes");
            DropForeignKey("public.SupplyRequestIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SupplyRequestIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.SupplyRequestIxQty", "ResourceId", "public.SupplyRequestRes");
            DropForeignKey("public.SupplyRequestIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SupplyRequestIxDT", "ResourceId", "public.SupplyRequestRes");
            DropForeignKey("public.SupplyRequestIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SupplyRequestRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.SupplyDeliveryIxUri", "ResourceId", "public.SupplyDeliveryRes");
            DropForeignKey("public.SupplyDeliveryIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SupplyDeliveryIxTok", "ResourceId", "public.SupplyDeliveryRes");
            DropForeignKey("public.SupplyDeliveryIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SupplyDeliveryIxStr", "ResourceId", "public.SupplyDeliveryRes");
            DropForeignKey("public.SupplyDeliveryIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SupplyDeliveryIxRef", "ResourceId", "public.SupplyDeliveryRes");
            DropForeignKey("public.SupplyDeliveryIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SupplyDeliveryIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.SupplyDeliveryIxQty", "ResourceId", "public.SupplyDeliveryRes");
            DropForeignKey("public.SupplyDeliveryIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SupplyDeliveryIxDT", "ResourceId", "public.SupplyDeliveryRes");
            DropForeignKey("public.SupplyDeliveryIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SupplyDeliveryRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.SubstanceSpecificationIxUri", "ResourceId", "public.SubstanceSpecificationRes");
            DropForeignKey("public.SubstanceSpecificationIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SubstanceSpecificationIxTok", "ResourceId", "public.SubstanceSpecificationRes");
            DropForeignKey("public.SubstanceSpecificationIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SubstanceSpecificationIxStr", "ResourceId", "public.SubstanceSpecificationRes");
            DropForeignKey("public.SubstanceSpecificationIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SubstanceSpecificationIxRef", "ResourceId", "public.SubstanceSpecificationRes");
            DropForeignKey("public.SubstanceSpecificationIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SubstanceSpecificationIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.SubstanceSpecificationIxQty", "ResourceId", "public.SubstanceSpecificationRes");
            DropForeignKey("public.SubstanceSpecificationIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SubstanceSpecificationIxDT", "ResourceId", "public.SubstanceSpecificationRes");
            DropForeignKey("public.SubstanceSpecificationIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SubstanceSpecificationRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.SubstanceReferenceInformationIxUri", "ResourceId", "public.SubstanceReferenceInformationRes");
            DropForeignKey("public.SubstanceReferenceInformationIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SubstanceReferenceInformationIxTok", "ResourceId", "public.SubstanceReferenceInformationRes");
            DropForeignKey("public.SubstanceReferenceInformationIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SubstanceReferenceInformationIxStr", "ResourceId", "public.SubstanceReferenceInformationRes");
            DropForeignKey("public.SubstanceReferenceInformationIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SubstanceReferenceInformationIxRef", "ResourceId", "public.SubstanceReferenceInformationRes");
            DropForeignKey("public.SubstanceReferenceInformationIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SubstanceReferenceInformationIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.SubstanceReferenceInformationIxQty", "ResourceId", "public.SubstanceReferenceInformationRes");
            DropForeignKey("public.SubstanceReferenceInformationIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SubstanceReferenceInformationIxDT", "ResourceId", "public.SubstanceReferenceInformationRes");
            DropForeignKey("public.SubstanceReferenceInformationIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SubstanceReferenceInformationRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.SubstancePolymerIxUri", "ResourceId", "public.SubstancePolymerRes");
            DropForeignKey("public.SubstancePolymerIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SubstancePolymerIxTok", "ResourceId", "public.SubstancePolymerRes");
            DropForeignKey("public.SubstancePolymerIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SubstancePolymerIxStr", "ResourceId", "public.SubstancePolymerRes");
            DropForeignKey("public.SubstancePolymerIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SubstancePolymerIxRef", "ResourceId", "public.SubstancePolymerRes");
            DropForeignKey("public.SubstancePolymerIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SubstancePolymerIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.SubstancePolymerIxQty", "ResourceId", "public.SubstancePolymerRes");
            DropForeignKey("public.SubstancePolymerIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SubstancePolymerIxDT", "ResourceId", "public.SubstancePolymerRes");
            DropForeignKey("public.SubstancePolymerIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SubstancePolymerRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.SubstanceIxUri", "ResourceId", "public.SubstanceRes");
            DropForeignKey("public.SubstanceIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SubstanceIxTok", "ResourceId", "public.SubstanceRes");
            DropForeignKey("public.SubstanceIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SubstanceIxStr", "ResourceId", "public.SubstanceRes");
            DropForeignKey("public.SubstanceIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SubstanceIxRef", "ResourceId", "public.SubstanceRes");
            DropForeignKey("public.SubstanceIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SubstanceIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.SubstanceIxQty", "ResourceId", "public.SubstanceRes");
            DropForeignKey("public.SubstanceIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SubstanceIxDT", "ResourceId", "public.SubstanceRes");
            DropForeignKey("public.SubstanceIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SubstanceRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.SubscriptionIxUri", "ResourceId", "public.SubscriptionRes");
            DropForeignKey("public.SubscriptionIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SubscriptionIxTok", "ResourceId", "public.SubscriptionRes");
            DropForeignKey("public.SubscriptionIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SubscriptionIxStr", "ResourceId", "public.SubscriptionRes");
            DropForeignKey("public.SubscriptionIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SubscriptionIxRef", "ResourceId", "public.SubscriptionRes");
            DropForeignKey("public.SubscriptionIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SubscriptionIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.SubscriptionIxQty", "ResourceId", "public.SubscriptionRes");
            DropForeignKey("public.SubscriptionIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SubscriptionIxDT", "ResourceId", "public.SubscriptionRes");
            DropForeignKey("public.SubscriptionIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SubscriptionRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.StructureMapIxUri", "ResourceId", "public.StructureMapRes");
            DropForeignKey("public.StructureMapIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.StructureMapIxTok", "ResourceId", "public.StructureMapRes");
            DropForeignKey("public.StructureMapIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.StructureMapIxStr", "ResourceId", "public.StructureMapRes");
            DropForeignKey("public.StructureMapIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.StructureMapIxRef", "ResourceId", "public.StructureMapRes");
            DropForeignKey("public.StructureMapIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.StructureMapIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.StructureMapIxQty", "ResourceId", "public.StructureMapRes");
            DropForeignKey("public.StructureMapIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.StructureMapIxDT", "ResourceId", "public.StructureMapRes");
            DropForeignKey("public.StructureMapIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.StructureMapRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.StructureDefinitionIxUri", "ResourceId", "public.StructureDefinitionRes");
            DropForeignKey("public.StructureDefinitionIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.StructureDefinitionIxTok", "ResourceId", "public.StructureDefinitionRes");
            DropForeignKey("public.StructureDefinitionIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.StructureDefinitionIxStr", "ResourceId", "public.StructureDefinitionRes");
            DropForeignKey("public.StructureDefinitionIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.StructureDefinitionIxRef", "ResourceId", "public.StructureDefinitionRes");
            DropForeignKey("public.StructureDefinitionIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.StructureDefinitionIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.StructureDefinitionIxQty", "ResourceId", "public.StructureDefinitionRes");
            DropForeignKey("public.StructureDefinitionIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.StructureDefinitionIxDT", "ResourceId", "public.StructureDefinitionRes");
            DropForeignKey("public.StructureDefinitionIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.StructureDefinitionRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.SpecimenIxUri", "ResourceId", "public.SpecimenRes");
            DropForeignKey("public.SpecimenIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SpecimenIxTok", "ResourceId", "public.SpecimenRes");
            DropForeignKey("public.SpecimenIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SpecimenIxStr", "ResourceId", "public.SpecimenRes");
            DropForeignKey("public.SpecimenIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SpecimenIxRef", "ResourceId", "public.SpecimenRes");
            DropForeignKey("public.SpecimenIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SpecimenIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.SpecimenIxQty", "ResourceId", "public.SpecimenRes");
            DropForeignKey("public.SpecimenIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SpecimenIxDT", "ResourceId", "public.SpecimenRes");
            DropForeignKey("public.SpecimenIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SpecimenRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.SpecimenDefinitionIxUri", "ResourceId", "public.SpecimenDefinitionRes");
            DropForeignKey("public.SpecimenDefinitionIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SpecimenDefinitionIxTok", "ResourceId", "public.SpecimenDefinitionRes");
            DropForeignKey("public.SpecimenDefinitionIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SpecimenDefinitionIxStr", "ResourceId", "public.SpecimenDefinitionRes");
            DropForeignKey("public.SpecimenDefinitionIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SpecimenDefinitionIxRef", "ResourceId", "public.SpecimenDefinitionRes");
            DropForeignKey("public.SpecimenDefinitionIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SpecimenDefinitionIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.SpecimenDefinitionIxQty", "ResourceId", "public.SpecimenDefinitionRes");
            DropForeignKey("public.SpecimenDefinitionIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SpecimenDefinitionIxDT", "ResourceId", "public.SpecimenDefinitionRes");
            DropForeignKey("public.SpecimenDefinitionIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SpecimenDefinitionRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.SlotIxUri", "ResourceId", "public.SlotRes");
            DropForeignKey("public.SlotIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SlotIxTok", "ResourceId", "public.SlotRes");
            DropForeignKey("public.SlotIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SlotIxStr", "ResourceId", "public.SlotRes");
            DropForeignKey("public.SlotIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SlotIxRef", "ResourceId", "public.SlotRes");
            DropForeignKey("public.SlotIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SlotIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.SlotIxQty", "ResourceId", "public.SlotRes");
            DropForeignKey("public.SlotIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SlotIxDT", "ResourceId", "public.SlotRes");
            DropForeignKey("public.SlotIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SlotRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.ServiceRequestIxUri", "ResourceId", "public.ServiceRequestRes");
            DropForeignKey("public.ServiceRequestIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ServiceRequestIxTok", "ResourceId", "public.ServiceRequestRes");
            DropForeignKey("public.ServiceRequestIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ServiceRequestIxStr", "ResourceId", "public.ServiceRequestRes");
            DropForeignKey("public.ServiceRequestIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ServiceRequestIxRef", "ResourceId", "public.ServiceRequestRes");
            DropForeignKey("public.ServiceRequestIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ServiceRequestIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.ServiceRequestIxQty", "ResourceId", "public.ServiceRequestRes");
            DropForeignKey("public.ServiceRequestIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ServiceRequestIxDT", "ResourceId", "public.ServiceRequestRes");
            DropForeignKey("public.ServiceRequestIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ServiceRequestRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.SequenceIxUri", "ResourceId", "public.SequenceRes");
            DropForeignKey("public.SequenceIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SequenceIxTok", "ResourceId", "public.SequenceRes");
            DropForeignKey("public.SequenceIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SequenceIxStr", "ResourceId", "public.SequenceRes");
            DropForeignKey("public.SequenceIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SequenceIxRef", "ResourceId", "public.SequenceRes");
            DropForeignKey("public.SequenceIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SequenceIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.SequenceIxQty", "ResourceId", "public.SequenceRes");
            DropForeignKey("public.SequenceIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SequenceIxDT", "ResourceId", "public.SequenceRes");
            DropForeignKey("public.SequenceIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SequenceRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.SearchParameterIxUri", "ResourceId", "public.SearchParameterRes");
            DropForeignKey("public.SearchParameterIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SearchParameterIxTok", "ResourceId", "public.SearchParameterRes");
            DropForeignKey("public.SearchParameterIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SearchParameterIxStr", "ResourceId", "public.SearchParameterRes");
            DropForeignKey("public.SearchParameterIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SearchParameterIxRef", "ResourceId", "public.SearchParameterRes");
            DropForeignKey("public.SearchParameterIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SearchParameterIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.SearchParameterIxQty", "ResourceId", "public.SearchParameterRes");
            DropForeignKey("public.SearchParameterIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SearchParameterIxDT", "ResourceId", "public.SearchParameterRes");
            DropForeignKey("public.SearchParameterIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SearchParameterRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.ScheduleIxUri", "ResourceId", "public.ScheduleRes");
            DropForeignKey("public.ScheduleIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ScheduleIxTok", "ResourceId", "public.ScheduleRes");
            DropForeignKey("public.ScheduleIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ScheduleIxStr", "ResourceId", "public.ScheduleRes");
            DropForeignKey("public.ScheduleIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ScheduleIxRef", "ResourceId", "public.ScheduleRes");
            DropForeignKey("public.ScheduleIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ScheduleIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.ScheduleIxQty", "ResourceId", "public.ScheduleRes");
            DropForeignKey("public.ScheduleIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ScheduleIxDT", "ResourceId", "public.ScheduleRes");
            DropForeignKey("public.ScheduleIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ScheduleRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.RiskAssessmentIxUri", "ResourceId", "public.RiskAssessmentRes");
            DropForeignKey("public.RiskAssessmentIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.RiskAssessmentIxTok", "ResourceId", "public.RiskAssessmentRes");
            DropForeignKey("public.RiskAssessmentIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.RiskAssessmentIxStr", "ResourceId", "public.RiskAssessmentRes");
            DropForeignKey("public.RiskAssessmentIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.RiskAssessmentIxRef", "ResourceId", "public.RiskAssessmentRes");
            DropForeignKey("public.RiskAssessmentIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.RiskAssessmentIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.RiskAssessmentIxQty", "ResourceId", "public.RiskAssessmentRes");
            DropForeignKey("public.RiskAssessmentIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.RiskAssessmentIxDT", "ResourceId", "public.RiskAssessmentRes");
            DropForeignKey("public.RiskAssessmentIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.RiskAssessmentRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.ResearchSubjectIxUri", "ResourceId", "public.ResearchSubjectRes");
            DropForeignKey("public.ResearchSubjectIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ResearchSubjectIxTok", "ResourceId", "public.ResearchSubjectRes");
            DropForeignKey("public.ResearchSubjectIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ResearchSubjectIxStr", "ResourceId", "public.ResearchSubjectRes");
            DropForeignKey("public.ResearchSubjectIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ResearchSubjectIxRef", "ResourceId", "public.ResearchSubjectRes");
            DropForeignKey("public.ResearchSubjectIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ResearchSubjectIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.ResearchSubjectIxQty", "ResourceId", "public.ResearchSubjectRes");
            DropForeignKey("public.ResearchSubjectIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ResearchSubjectIxDT", "ResourceId", "public.ResearchSubjectRes");
            DropForeignKey("public.ResearchSubjectIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ResearchSubjectRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.ResearchStudyIxUri", "ResourceId", "public.ResearchStudyRes");
            DropForeignKey("public.ResearchStudyIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ResearchStudyIxTok", "ResourceId", "public.ResearchStudyRes");
            DropForeignKey("public.ResearchStudyIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ResearchStudyIxStr", "ResourceId", "public.ResearchStudyRes");
            DropForeignKey("public.ResearchStudyIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ResearchStudyIxRef", "ResourceId", "public.ResearchStudyRes");
            DropForeignKey("public.ResearchStudyIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ResearchStudyIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.ResearchStudyIxQty", "ResourceId", "public.ResearchStudyRes");
            DropForeignKey("public.ResearchStudyIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ResearchStudyIxDT", "ResourceId", "public.ResearchStudyRes");
            DropForeignKey("public.ResearchStudyIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ResearchStudyRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.RequestGroupIxUri", "ResourceId", "public.RequestGroupRes");
            DropForeignKey("public.RequestGroupIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.RequestGroupIxTok", "ResourceId", "public.RequestGroupRes");
            DropForeignKey("public.RequestGroupIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.RequestGroupIxStr", "ResourceId", "public.RequestGroupRes");
            DropForeignKey("public.RequestGroupIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.RequestGroupIxRef", "ResourceId", "public.RequestGroupRes");
            DropForeignKey("public.RequestGroupIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.RequestGroupIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.RequestGroupIxQty", "ResourceId", "public.RequestGroupRes");
            DropForeignKey("public.RequestGroupIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.RequestGroupIxDT", "ResourceId", "public.RequestGroupRes");
            DropForeignKey("public.RequestGroupIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.RequestGroupRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.RelatedPersonIxUri", "ResourceId", "public.RelatedPersonRes");
            DropForeignKey("public.RelatedPersonIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.RelatedPersonIxTok", "ResourceId", "public.RelatedPersonRes");
            DropForeignKey("public.RelatedPersonIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.RelatedPersonIxStr", "ResourceId", "public.RelatedPersonRes");
            DropForeignKey("public.RelatedPersonIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.RelatedPersonIxRef", "ResourceId", "public.RelatedPersonRes");
            DropForeignKey("public.RelatedPersonIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.RelatedPersonIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.RelatedPersonIxQty", "ResourceId", "public.RelatedPersonRes");
            DropForeignKey("public.RelatedPersonIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.RelatedPersonIxDT", "ResourceId", "public.RelatedPersonRes");
            DropForeignKey("public.RelatedPersonIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.RelatedPersonRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.QuestionnaireResponseIxUri", "ResourceId", "public.QuestionnaireResponseRes");
            DropForeignKey("public.QuestionnaireResponseIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.QuestionnaireResponseIxTok", "ResourceId", "public.QuestionnaireResponseRes");
            DropForeignKey("public.QuestionnaireResponseIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.QuestionnaireResponseIxStr", "ResourceId", "public.QuestionnaireResponseRes");
            DropForeignKey("public.QuestionnaireResponseIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.QuestionnaireResponseIxRef", "ResourceId", "public.QuestionnaireResponseRes");
            DropForeignKey("public.QuestionnaireResponseIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.QuestionnaireResponseIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.QuestionnaireResponseIxQty", "ResourceId", "public.QuestionnaireResponseRes");
            DropForeignKey("public.QuestionnaireResponseIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.QuestionnaireResponseIxDT", "ResourceId", "public.QuestionnaireResponseRes");
            DropForeignKey("public.QuestionnaireResponseIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.QuestionnaireResponseRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.QuestionnaireIxUri", "ResourceId", "public.QuestionnaireRes");
            DropForeignKey("public.QuestionnaireIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.QuestionnaireIxTok", "ResourceId", "public.QuestionnaireRes");
            DropForeignKey("public.QuestionnaireIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.QuestionnaireIxStr", "ResourceId", "public.QuestionnaireRes");
            DropForeignKey("public.QuestionnaireIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.QuestionnaireIxRef", "ResourceId", "public.QuestionnaireRes");
            DropForeignKey("public.QuestionnaireIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.QuestionnaireIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.QuestionnaireIxQty", "ResourceId", "public.QuestionnaireRes");
            DropForeignKey("public.QuestionnaireIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.QuestionnaireIxDT", "ResourceId", "public.QuestionnaireRes");
            DropForeignKey("public.QuestionnaireIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.QuestionnaireRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.ProvenanceIxUri", "ResourceId", "public.ProvenanceRes");
            DropForeignKey("public.ProvenanceIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ProvenanceIxTok", "ResourceId", "public.ProvenanceRes");
            DropForeignKey("public.ProvenanceIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ProvenanceIxStr", "ResourceId", "public.ProvenanceRes");
            DropForeignKey("public.ProvenanceIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ProvenanceIxRef", "ResourceId", "public.ProvenanceRes");
            DropForeignKey("public.ProvenanceIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ProvenanceIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.ProvenanceIxQty", "ResourceId", "public.ProvenanceRes");
            DropForeignKey("public.ProvenanceIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ProvenanceIxDT", "ResourceId", "public.ProvenanceRes");
            DropForeignKey("public.ProvenanceIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ProvenanceRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.ProcessResponseIxUri", "ResourceId", "public.ProcessResponseRes");
            DropForeignKey("public.ProcessResponseIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ProcessResponseIxTok", "ResourceId", "public.ProcessResponseRes");
            DropForeignKey("public.ProcessResponseIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ProcessResponseIxStr", "ResourceId", "public.ProcessResponseRes");
            DropForeignKey("public.ProcessResponseIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ProcessResponseIxRef", "ResourceId", "public.ProcessResponseRes");
            DropForeignKey("public.ProcessResponseIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ProcessResponseIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.ProcessResponseIxQty", "ResourceId", "public.ProcessResponseRes");
            DropForeignKey("public.ProcessResponseIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ProcessResponseIxDT", "ResourceId", "public.ProcessResponseRes");
            DropForeignKey("public.ProcessResponseIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ProcessResponseRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.ProcessRequestIxUri", "ResourceId", "public.ProcessRequestRes");
            DropForeignKey("public.ProcessRequestIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ProcessRequestIxTok", "ResourceId", "public.ProcessRequestRes");
            DropForeignKey("public.ProcessRequestIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ProcessRequestIxStr", "ResourceId", "public.ProcessRequestRes");
            DropForeignKey("public.ProcessRequestIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ProcessRequestIxRef", "ResourceId", "public.ProcessRequestRes");
            DropForeignKey("public.ProcessRequestIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ProcessRequestIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.ProcessRequestIxQty", "ResourceId", "public.ProcessRequestRes");
            DropForeignKey("public.ProcessRequestIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ProcessRequestIxDT", "ResourceId", "public.ProcessRequestRes");
            DropForeignKey("public.ProcessRequestIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ProcessRequestRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.ProcedureIxUri", "ResourceId", "public.ProcedureRes");
            DropForeignKey("public.ProcedureIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ProcedureIxTok", "ResourceId", "public.ProcedureRes");
            DropForeignKey("public.ProcedureIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ProcedureIxStr", "ResourceId", "public.ProcedureRes");
            DropForeignKey("public.ProcedureIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ProcedureIxRef", "ResourceId", "public.ProcedureRes");
            DropForeignKey("public.ProcedureIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ProcedureIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.ProcedureIxQty", "ResourceId", "public.ProcedureRes");
            DropForeignKey("public.ProcedureIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ProcedureIxDT", "ResourceId", "public.ProcedureRes");
            DropForeignKey("public.ProcedureIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ProcedureRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.PractitionerRoleIxUri", "ResourceId", "public.PractitionerRoleRes");
            DropForeignKey("public.PractitionerRoleIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PractitionerRoleIxTok", "ResourceId", "public.PractitionerRoleRes");
            DropForeignKey("public.PractitionerRoleIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PractitionerRoleIxStr", "ResourceId", "public.PractitionerRoleRes");
            DropForeignKey("public.PractitionerRoleIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PractitionerRoleIxRef", "ResourceId", "public.PractitionerRoleRes");
            DropForeignKey("public.PractitionerRoleIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PractitionerRoleIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.PractitionerRoleIxQty", "ResourceId", "public.PractitionerRoleRes");
            DropForeignKey("public.PractitionerRoleIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PractitionerRoleIxDT", "ResourceId", "public.PractitionerRoleRes");
            DropForeignKey("public.PractitionerRoleIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PractitionerRoleRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.PractitionerIxUri", "ResourceId", "public.PractitionerRes");
            DropForeignKey("public.PractitionerIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PractitionerIxTok", "ResourceId", "public.PractitionerRes");
            DropForeignKey("public.PractitionerIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PractitionerIxStr", "ResourceId", "public.PractitionerRes");
            DropForeignKey("public.PractitionerIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PractitionerIxRef", "ResourceId", "public.PractitionerRes");
            DropForeignKey("public.PractitionerIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PractitionerIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.PractitionerIxQty", "ResourceId", "public.PractitionerRes");
            DropForeignKey("public.PractitionerIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PractitionerIxDT", "ResourceId", "public.PractitionerRes");
            DropForeignKey("public.PractitionerIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PractitionerRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.PlanDefinitionIxUri", "ResourceId", "public.PlanDefinitionRes");
            DropForeignKey("public.PlanDefinitionIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PlanDefinitionIxTok", "ResourceId", "public.PlanDefinitionRes");
            DropForeignKey("public.PlanDefinitionIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PlanDefinitionIxStr", "ResourceId", "public.PlanDefinitionRes");
            DropForeignKey("public.PlanDefinitionIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PlanDefinitionIxRef", "ResourceId", "public.PlanDefinitionRes");
            DropForeignKey("public.PlanDefinitionIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PlanDefinitionIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.PlanDefinitionIxQty", "ResourceId", "public.PlanDefinitionRes");
            DropForeignKey("public.PlanDefinitionIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PlanDefinitionIxDT", "ResourceId", "public.PlanDefinitionRes");
            DropForeignKey("public.PlanDefinitionIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PlanDefinitionRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.PersonIxUri", "ResourceId", "public.PersonRes");
            DropForeignKey("public.PersonIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PersonIxTok", "ResourceId", "public.PersonRes");
            DropForeignKey("public.PersonIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PersonIxStr", "ResourceId", "public.PersonRes");
            DropForeignKey("public.PersonIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PersonIxRef", "ResourceId", "public.PersonRes");
            DropForeignKey("public.PersonIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PersonIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.PersonIxQty", "ResourceId", "public.PersonRes");
            DropForeignKey("public.PersonIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PersonIxDT", "ResourceId", "public.PersonRes");
            DropForeignKey("public.PersonIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PersonRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.PaymentReconciliationIxUri", "ResourceId", "public.PaymentReconciliationRes");
            DropForeignKey("public.PaymentReconciliationIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PaymentReconciliationIxTok", "ResourceId", "public.PaymentReconciliationRes");
            DropForeignKey("public.PaymentReconciliationIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PaymentReconciliationIxStr", "ResourceId", "public.PaymentReconciliationRes");
            DropForeignKey("public.PaymentReconciliationIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PaymentReconciliationIxRef", "ResourceId", "public.PaymentReconciliationRes");
            DropForeignKey("public.PaymentReconciliationIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PaymentReconciliationIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.PaymentReconciliationIxQty", "ResourceId", "public.PaymentReconciliationRes");
            DropForeignKey("public.PaymentReconciliationIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PaymentReconciliationIxDT", "ResourceId", "public.PaymentReconciliationRes");
            DropForeignKey("public.PaymentReconciliationIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PaymentReconciliationRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.PaymentNoticeIxUri", "ResourceId", "public.PaymentNoticeRes");
            DropForeignKey("public.PaymentNoticeIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PaymentNoticeIxTok", "ResourceId", "public.PaymentNoticeRes");
            DropForeignKey("public.PaymentNoticeIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PaymentNoticeIxStr", "ResourceId", "public.PaymentNoticeRes");
            DropForeignKey("public.PaymentNoticeIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PaymentNoticeIxRef", "ResourceId", "public.PaymentNoticeRes");
            DropForeignKey("public.PaymentNoticeIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PaymentNoticeIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.PaymentNoticeIxQty", "ResourceId", "public.PaymentNoticeRes");
            DropForeignKey("public.PaymentNoticeIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PaymentNoticeIxDT", "ResourceId", "public.PaymentNoticeRes");
            DropForeignKey("public.PaymentNoticeIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PaymentNoticeRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.PatientIxUri", "ResourceId", "public.PatientRes");
            DropForeignKey("public.PatientIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PatientIxTok", "ResourceId", "public.PatientRes");
            DropForeignKey("public.PatientIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PatientIxStr", "ResourceId", "public.PatientRes");
            DropForeignKey("public.PatientIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PatientIxRef", "ResourceId", "public.PatientRes");
            DropForeignKey("public.PatientIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PatientIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.PatientIxQty", "ResourceId", "public.PatientRes");
            DropForeignKey("public.PatientIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PatientIxDT", "ResourceId", "public.PatientRes");
            DropForeignKey("public.PatientIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PatientRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.ParametersIxUri", "ResourceId", "public.ParametersRes");
            DropForeignKey("public.ParametersIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ParametersIxTok", "ResourceId", "public.ParametersRes");
            DropForeignKey("public.ParametersIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ParametersIxStr", "ResourceId", "public.ParametersRes");
            DropForeignKey("public.ParametersIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ParametersIxRef", "ResourceId", "public.ParametersRes");
            DropForeignKey("public.ParametersIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ParametersIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.ParametersIxQty", "ResourceId", "public.ParametersRes");
            DropForeignKey("public.ParametersIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ParametersIxDT", "ResourceId", "public.ParametersRes");
            DropForeignKey("public.ParametersIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ParametersRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.OrganizationIxUri", "ResourceId", "public.OrganizationRes");
            DropForeignKey("public.OrganizationIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.OrganizationIxTok", "ResourceId", "public.OrganizationRes");
            DropForeignKey("public.OrganizationIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.OrganizationIxStr", "ResourceId", "public.OrganizationRes");
            DropForeignKey("public.OrganizationIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.OrganizationIxRef", "ResourceId", "public.OrganizationRes");
            DropForeignKey("public.OrganizationIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.OrganizationIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.OrganizationIxQty", "ResourceId", "public.OrganizationRes");
            DropForeignKey("public.OrganizationIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.OrganizationIxDT", "ResourceId", "public.OrganizationRes");
            DropForeignKey("public.OrganizationIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.OrganizationRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.OrganizationAffiliationIxUri", "ResourceId", "public.OrganizationAffiliationRes");
            DropForeignKey("public.OrganizationAffiliationIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.OrganizationAffiliationIxTok", "ResourceId", "public.OrganizationAffiliationRes");
            DropForeignKey("public.OrganizationAffiliationIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.OrganizationAffiliationIxStr", "ResourceId", "public.OrganizationAffiliationRes");
            DropForeignKey("public.OrganizationAffiliationIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.OrganizationAffiliationIxRef", "ResourceId", "public.OrganizationAffiliationRes");
            DropForeignKey("public.OrganizationAffiliationIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.OrganizationAffiliationIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.OrganizationAffiliationIxQty", "ResourceId", "public.OrganizationAffiliationRes");
            DropForeignKey("public.OrganizationAffiliationIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.OrganizationAffiliationIxDT", "ResourceId", "public.OrganizationAffiliationRes");
            DropForeignKey("public.OrganizationAffiliationIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.OrganizationAffiliationRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.OperationOutcomeIxUri", "ResourceId", "public.OperationOutcomeRes");
            DropForeignKey("public.OperationOutcomeIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.OperationOutcomeIxTok", "ResourceId", "public.OperationOutcomeRes");
            DropForeignKey("public.OperationOutcomeIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.OperationOutcomeIxStr", "ResourceId", "public.OperationOutcomeRes");
            DropForeignKey("public.OperationOutcomeIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.OperationOutcomeIxRef", "ResourceId", "public.OperationOutcomeRes");
            DropForeignKey("public.OperationOutcomeIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.OperationOutcomeIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.OperationOutcomeIxQty", "ResourceId", "public.OperationOutcomeRes");
            DropForeignKey("public.OperationOutcomeIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.OperationOutcomeIxDT", "ResourceId", "public.OperationOutcomeRes");
            DropForeignKey("public.OperationOutcomeIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.OperationOutcomeRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.OperationDefinitionIxUri", "ResourceId", "public.OperationDefinitionRes");
            DropForeignKey("public.OperationDefinitionIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.OperationDefinitionIxTok", "ResourceId", "public.OperationDefinitionRes");
            DropForeignKey("public.OperationDefinitionIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.OperationDefinitionIxStr", "ResourceId", "public.OperationDefinitionRes");
            DropForeignKey("public.OperationDefinitionIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.OperationDefinitionIxRef", "ResourceId", "public.OperationDefinitionRes");
            DropForeignKey("public.OperationDefinitionIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.OperationDefinitionIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.OperationDefinitionIxQty", "ResourceId", "public.OperationDefinitionRes");
            DropForeignKey("public.OperationDefinitionIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.OperationDefinitionIxDT", "ResourceId", "public.OperationDefinitionRes");
            DropForeignKey("public.OperationDefinitionIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.OperationDefinitionRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.ObservationIxUri", "ResourceId", "public.ObservationRes");
            DropForeignKey("public.ObservationIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ObservationIxTok", "ResourceId", "public.ObservationRes");
            DropForeignKey("public.ObservationIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ObservationIxStr", "ResourceId", "public.ObservationRes");
            DropForeignKey("public.ObservationIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ObservationIxRef", "ResourceId", "public.ObservationRes");
            DropForeignKey("public.ObservationIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ObservationIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.ObservationIxQty", "ResourceId", "public.ObservationRes");
            DropForeignKey("public.ObservationIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ObservationIxDT", "ResourceId", "public.ObservationRes");
            DropForeignKey("public.ObservationIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ObservationRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.ObservationDefinitionIxUri", "ResourceId", "public.ObservationDefinitionRes");
            DropForeignKey("public.ObservationDefinitionIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ObservationDefinitionIxTok", "ResourceId", "public.ObservationDefinitionRes");
            DropForeignKey("public.ObservationDefinitionIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ObservationDefinitionIxStr", "ResourceId", "public.ObservationDefinitionRes");
            DropForeignKey("public.ObservationDefinitionIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ObservationDefinitionIxRef", "ResourceId", "public.ObservationDefinitionRes");
            DropForeignKey("public.ObservationDefinitionIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ObservationDefinitionIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.ObservationDefinitionIxQty", "ResourceId", "public.ObservationDefinitionRes");
            DropForeignKey("public.ObservationDefinitionIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ObservationDefinitionIxDT", "ResourceId", "public.ObservationDefinitionRes");
            DropForeignKey("public.ObservationDefinitionIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ObservationDefinitionRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.NutritionOrderIxUri", "ResourceId", "public.NutritionOrderRes");
            DropForeignKey("public.NutritionOrderIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.NutritionOrderIxTok", "ResourceId", "public.NutritionOrderRes");
            DropForeignKey("public.NutritionOrderIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.NutritionOrderIxStr", "ResourceId", "public.NutritionOrderRes");
            DropForeignKey("public.NutritionOrderIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.NutritionOrderIxRef", "ResourceId", "public.NutritionOrderRes");
            DropForeignKey("public.NutritionOrderIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.NutritionOrderIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.NutritionOrderIxQty", "ResourceId", "public.NutritionOrderRes");
            DropForeignKey("public.NutritionOrderIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.NutritionOrderIxDT", "ResourceId", "public.NutritionOrderRes");
            DropForeignKey("public.NutritionOrderIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.NutritionOrderRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.NamingSystemIxUri", "ResourceId", "public.NamingSystemRes");
            DropForeignKey("public.NamingSystemIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.NamingSystemIxTok", "ResourceId", "public.NamingSystemRes");
            DropForeignKey("public.NamingSystemIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.NamingSystemIxStr", "ResourceId", "public.NamingSystemRes");
            DropForeignKey("public.NamingSystemIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.NamingSystemIxRef", "ResourceId", "public.NamingSystemRes");
            DropForeignKey("public.NamingSystemIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.NamingSystemIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.NamingSystemIxQty", "ResourceId", "public.NamingSystemRes");
            DropForeignKey("public.NamingSystemIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.NamingSystemIxDT", "ResourceId", "public.NamingSystemRes");
            DropForeignKey("public.NamingSystemIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.NamingSystemRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.MessageHeaderIxUri", "ResourceId", "public.MessageHeaderRes");
            DropForeignKey("public.MessageHeaderIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MessageHeaderIxTok", "ResourceId", "public.MessageHeaderRes");
            DropForeignKey("public.MessageHeaderIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MessageHeaderIxStr", "ResourceId", "public.MessageHeaderRes");
            DropForeignKey("public.MessageHeaderIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MessageHeaderIxRef", "ResourceId", "public.MessageHeaderRes");
            DropForeignKey("public.MessageHeaderIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MessageHeaderIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.MessageHeaderIxQty", "ResourceId", "public.MessageHeaderRes");
            DropForeignKey("public.MessageHeaderIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MessageHeaderIxDT", "ResourceId", "public.MessageHeaderRes");
            DropForeignKey("public.MessageHeaderIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MessageHeaderRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.MessageDefinitionIxUri", "ResourceId", "public.MessageDefinitionRes");
            DropForeignKey("public.MessageDefinitionIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MessageDefinitionIxTok", "ResourceId", "public.MessageDefinitionRes");
            DropForeignKey("public.MessageDefinitionIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MessageDefinitionIxStr", "ResourceId", "public.MessageDefinitionRes");
            DropForeignKey("public.MessageDefinitionIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MessageDefinitionIxRef", "ResourceId", "public.MessageDefinitionRes");
            DropForeignKey("public.MessageDefinitionIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MessageDefinitionIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.MessageDefinitionIxQty", "ResourceId", "public.MessageDefinitionRes");
            DropForeignKey("public.MessageDefinitionIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MessageDefinitionIxDT", "ResourceId", "public.MessageDefinitionRes");
            DropForeignKey("public.MessageDefinitionIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MessageDefinitionRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.MedicinalProductUndesirableEffectIxUri", "ResourceId", "public.MedicinalProductUndesirableEffectRes");
            DropForeignKey("public.MedicinalProductUndesirableEffectIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicinalProductUndesirableEffectIxTok", "ResourceId", "public.MedicinalProductUndesirableEffectRes");
            DropForeignKey("public.MedicinalProductUndesirableEffectIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicinalProductUndesirableEffectIxStr", "ResourceId", "public.MedicinalProductUndesirableEffectRes");
            DropForeignKey("public.MedicinalProductUndesirableEffectIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicinalProductUndesirableEffectIxRef", "ResourceId", "public.MedicinalProductUndesirableEffectRes");
            DropForeignKey("public.MedicinalProductUndesirableEffectIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicinalProductUndesirableEffectIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.MedicinalProductUndesirableEffectIxQty", "ResourceId", "public.MedicinalProductUndesirableEffectRes");
            DropForeignKey("public.MedicinalProductUndesirableEffectIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicinalProductUndesirableEffectIxDT", "ResourceId", "public.MedicinalProductUndesirableEffectRes");
            DropForeignKey("public.MedicinalProductUndesirableEffectIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicinalProductUndesirableEffectRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.MedicinalProductPharmaceuticalIxUri", "ResourceId", "public.MedicinalProductPharmaceuticalRes");
            DropForeignKey("public.MedicinalProductPharmaceuticalIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicinalProductPharmaceuticalIxTok", "ResourceId", "public.MedicinalProductPharmaceuticalRes");
            DropForeignKey("public.MedicinalProductPharmaceuticalIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicinalProductPharmaceuticalIxStr", "ResourceId", "public.MedicinalProductPharmaceuticalRes");
            DropForeignKey("public.MedicinalProductPharmaceuticalIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicinalProductPharmaceuticalIxRef", "ResourceId", "public.MedicinalProductPharmaceuticalRes");
            DropForeignKey("public.MedicinalProductPharmaceuticalIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicinalProductPharmaceuticalIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.MedicinalProductPharmaceuticalIxQty", "ResourceId", "public.MedicinalProductPharmaceuticalRes");
            DropForeignKey("public.MedicinalProductPharmaceuticalIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicinalProductPharmaceuticalIxDT", "ResourceId", "public.MedicinalProductPharmaceuticalRes");
            DropForeignKey("public.MedicinalProductPharmaceuticalIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicinalProductPharmaceuticalRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.MedicinalProductPackagedIxUri", "ResourceId", "public.MedicinalProductPackagedRes");
            DropForeignKey("public.MedicinalProductPackagedIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicinalProductPackagedIxTok", "ResourceId", "public.MedicinalProductPackagedRes");
            DropForeignKey("public.MedicinalProductPackagedIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicinalProductPackagedIxStr", "ResourceId", "public.MedicinalProductPackagedRes");
            DropForeignKey("public.MedicinalProductPackagedIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicinalProductPackagedIxRef", "ResourceId", "public.MedicinalProductPackagedRes");
            DropForeignKey("public.MedicinalProductPackagedIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicinalProductPackagedIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.MedicinalProductPackagedIxQty", "ResourceId", "public.MedicinalProductPackagedRes");
            DropForeignKey("public.MedicinalProductPackagedIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicinalProductPackagedIxDT", "ResourceId", "public.MedicinalProductPackagedRes");
            DropForeignKey("public.MedicinalProductPackagedIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicinalProductPackagedRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.MedicinalProductManufacturedIxUri", "ResourceId", "public.MedicinalProductManufacturedRes");
            DropForeignKey("public.MedicinalProductManufacturedIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicinalProductManufacturedIxTok", "ResourceId", "public.MedicinalProductManufacturedRes");
            DropForeignKey("public.MedicinalProductManufacturedIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicinalProductManufacturedIxStr", "ResourceId", "public.MedicinalProductManufacturedRes");
            DropForeignKey("public.MedicinalProductManufacturedIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicinalProductManufacturedIxRef", "ResourceId", "public.MedicinalProductManufacturedRes");
            DropForeignKey("public.MedicinalProductManufacturedIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicinalProductManufacturedIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.MedicinalProductManufacturedIxQty", "ResourceId", "public.MedicinalProductManufacturedRes");
            DropForeignKey("public.MedicinalProductManufacturedIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicinalProductManufacturedIxDT", "ResourceId", "public.MedicinalProductManufacturedRes");
            DropForeignKey("public.MedicinalProductManufacturedIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicinalProductManufacturedRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.MedicinalProductIxUri", "ResourceId", "public.MedicinalProductRes");
            DropForeignKey("public.MedicinalProductIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicinalProductIxTok", "ResourceId", "public.MedicinalProductRes");
            DropForeignKey("public.MedicinalProductIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicinalProductIxStr", "ResourceId", "public.MedicinalProductRes");
            DropForeignKey("public.MedicinalProductIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicinalProductIxRef", "ResourceId", "public.MedicinalProductRes");
            DropForeignKey("public.MedicinalProductIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicinalProductIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.MedicinalProductIxQty", "ResourceId", "public.MedicinalProductRes");
            DropForeignKey("public.MedicinalProductIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicinalProductIxDT", "ResourceId", "public.MedicinalProductRes");
            DropForeignKey("public.MedicinalProductIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicinalProductRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.MedicinalProductInteractionIxUri", "ResourceId", "public.MedicinalProductInteractionRes");
            DropForeignKey("public.MedicinalProductInteractionIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicinalProductInteractionIxTok", "ResourceId", "public.MedicinalProductInteractionRes");
            DropForeignKey("public.MedicinalProductInteractionIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicinalProductInteractionIxStr", "ResourceId", "public.MedicinalProductInteractionRes");
            DropForeignKey("public.MedicinalProductInteractionIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicinalProductInteractionIxRef", "ResourceId", "public.MedicinalProductInteractionRes");
            DropForeignKey("public.MedicinalProductInteractionIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicinalProductInteractionIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.MedicinalProductInteractionIxQty", "ResourceId", "public.MedicinalProductInteractionRes");
            DropForeignKey("public.MedicinalProductInteractionIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicinalProductInteractionIxDT", "ResourceId", "public.MedicinalProductInteractionRes");
            DropForeignKey("public.MedicinalProductInteractionIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicinalProductInteractionRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.MedicinalProductIngredientIxUri", "ResourceId", "public.MedicinalProductIngredientRes");
            DropForeignKey("public.MedicinalProductIngredientIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicinalProductIngredientIxTok", "ResourceId", "public.MedicinalProductIngredientRes");
            DropForeignKey("public.MedicinalProductIngredientIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicinalProductIngredientIxStr", "ResourceId", "public.MedicinalProductIngredientRes");
            DropForeignKey("public.MedicinalProductIngredientIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicinalProductIngredientIxRef", "ResourceId", "public.MedicinalProductIngredientRes");
            DropForeignKey("public.MedicinalProductIngredientIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicinalProductIngredientIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.MedicinalProductIngredientIxQty", "ResourceId", "public.MedicinalProductIngredientRes");
            DropForeignKey("public.MedicinalProductIngredientIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicinalProductIngredientIxDT", "ResourceId", "public.MedicinalProductIngredientRes");
            DropForeignKey("public.MedicinalProductIngredientIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicinalProductIngredientRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.MedicinalProductIndicationIxUri", "ResourceId", "public.MedicinalProductIndicationRes");
            DropForeignKey("public.MedicinalProductIndicationIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicinalProductIndicationIxTok", "ResourceId", "public.MedicinalProductIndicationRes");
            DropForeignKey("public.MedicinalProductIndicationIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicinalProductIndicationIxStr", "ResourceId", "public.MedicinalProductIndicationRes");
            DropForeignKey("public.MedicinalProductIndicationIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicinalProductIndicationIxRef", "ResourceId", "public.MedicinalProductIndicationRes");
            DropForeignKey("public.MedicinalProductIndicationIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicinalProductIndicationIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.MedicinalProductIndicationIxQty", "ResourceId", "public.MedicinalProductIndicationRes");
            DropForeignKey("public.MedicinalProductIndicationIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicinalProductIndicationIxDT", "ResourceId", "public.MedicinalProductIndicationRes");
            DropForeignKey("public.MedicinalProductIndicationIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicinalProductIndicationRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.MedicinalProductDeviceSpecIxUri", "ResourceId", "public.MedicinalProductDeviceSpecRes");
            DropForeignKey("public.MedicinalProductDeviceSpecIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicinalProductDeviceSpecIxTok", "ResourceId", "public.MedicinalProductDeviceSpecRes");
            DropForeignKey("public.MedicinalProductDeviceSpecIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicinalProductDeviceSpecIxStr", "ResourceId", "public.MedicinalProductDeviceSpecRes");
            DropForeignKey("public.MedicinalProductDeviceSpecIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicinalProductDeviceSpecIxRef", "ResourceId", "public.MedicinalProductDeviceSpecRes");
            DropForeignKey("public.MedicinalProductDeviceSpecIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicinalProductDeviceSpecIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.MedicinalProductDeviceSpecIxQty", "ResourceId", "public.MedicinalProductDeviceSpecRes");
            DropForeignKey("public.MedicinalProductDeviceSpecIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicinalProductDeviceSpecIxDT", "ResourceId", "public.MedicinalProductDeviceSpecRes");
            DropForeignKey("public.MedicinalProductDeviceSpecIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicinalProductDeviceSpecRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.MedicinalProductContraindicationIxUri", "ResourceId", "public.MedicinalProductContraindicationRes");
            DropForeignKey("public.MedicinalProductContraindicationIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicinalProductContraindicationIxTok", "ResourceId", "public.MedicinalProductContraindicationRes");
            DropForeignKey("public.MedicinalProductContraindicationIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicinalProductContraindicationIxStr", "ResourceId", "public.MedicinalProductContraindicationRes");
            DropForeignKey("public.MedicinalProductContraindicationIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicinalProductContraindicationIxRef", "ResourceId", "public.MedicinalProductContraindicationRes");
            DropForeignKey("public.MedicinalProductContraindicationIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicinalProductContraindicationIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.MedicinalProductContraindicationIxQty", "ResourceId", "public.MedicinalProductContraindicationRes");
            DropForeignKey("public.MedicinalProductContraindicationIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicinalProductContraindicationIxDT", "ResourceId", "public.MedicinalProductContraindicationRes");
            DropForeignKey("public.MedicinalProductContraindicationIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicinalProductContraindicationRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.MedicinalProductClinicalsIxUri", "ResourceId", "public.MedicinalProductClinicalsRes");
            DropForeignKey("public.MedicinalProductClinicalsIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicinalProductClinicalsIxTok", "ResourceId", "public.MedicinalProductClinicalsRes");
            DropForeignKey("public.MedicinalProductClinicalsIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicinalProductClinicalsIxStr", "ResourceId", "public.MedicinalProductClinicalsRes");
            DropForeignKey("public.MedicinalProductClinicalsIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicinalProductClinicalsIxRef", "ResourceId", "public.MedicinalProductClinicalsRes");
            DropForeignKey("public.MedicinalProductClinicalsIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicinalProductClinicalsIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.MedicinalProductClinicalsIxQty", "ResourceId", "public.MedicinalProductClinicalsRes");
            DropForeignKey("public.MedicinalProductClinicalsIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicinalProductClinicalsIxDT", "ResourceId", "public.MedicinalProductClinicalsRes");
            DropForeignKey("public.MedicinalProductClinicalsIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicinalProductClinicalsRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.MedicinalProductAuthorizationIxUri", "ResourceId", "public.MedicinalProductAuthorizationRes");
            DropForeignKey("public.MedicinalProductAuthorizationIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicinalProductAuthorizationIxTok", "ResourceId", "public.MedicinalProductAuthorizationRes");
            DropForeignKey("public.MedicinalProductAuthorizationIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicinalProductAuthorizationIxStr", "ResourceId", "public.MedicinalProductAuthorizationRes");
            DropForeignKey("public.MedicinalProductAuthorizationIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicinalProductAuthorizationIxRef", "ResourceId", "public.MedicinalProductAuthorizationRes");
            DropForeignKey("public.MedicinalProductAuthorizationIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicinalProductAuthorizationIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.MedicinalProductAuthorizationIxQty", "ResourceId", "public.MedicinalProductAuthorizationRes");
            DropForeignKey("public.MedicinalProductAuthorizationIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicinalProductAuthorizationIxDT", "ResourceId", "public.MedicinalProductAuthorizationRes");
            DropForeignKey("public.MedicinalProductAuthorizationIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicinalProductAuthorizationRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.MedicationStatementIxUri", "ResourceId", "public.MedicationStatementRes");
            DropForeignKey("public.MedicationStatementIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicationStatementIxTok", "ResourceId", "public.MedicationStatementRes");
            DropForeignKey("public.MedicationStatementIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicationStatementIxStr", "ResourceId", "public.MedicationStatementRes");
            DropForeignKey("public.MedicationStatementIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicationStatementIxRef", "ResourceId", "public.MedicationStatementRes");
            DropForeignKey("public.MedicationStatementIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicationStatementIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.MedicationStatementIxQty", "ResourceId", "public.MedicationStatementRes");
            DropForeignKey("public.MedicationStatementIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicationStatementIxDT", "ResourceId", "public.MedicationStatementRes");
            DropForeignKey("public.MedicationStatementIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicationStatementRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.MedicationRequestIxUri", "ResourceId", "public.MedicationRequestRes");
            DropForeignKey("public.MedicationRequestIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicationRequestIxTok", "ResourceId", "public.MedicationRequestRes");
            DropForeignKey("public.MedicationRequestIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicationRequestIxStr", "ResourceId", "public.MedicationRequestRes");
            DropForeignKey("public.MedicationRequestIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicationRequestIxRef", "ResourceId", "public.MedicationRequestRes");
            DropForeignKey("public.MedicationRequestIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicationRequestIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.MedicationRequestIxQty", "ResourceId", "public.MedicationRequestRes");
            DropForeignKey("public.MedicationRequestIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicationRequestIxDT", "ResourceId", "public.MedicationRequestRes");
            DropForeignKey("public.MedicationRequestIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicationRequestRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.MedicationIxUri", "ResourceId", "public.MedicationRes");
            DropForeignKey("public.MedicationIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicationIxTok", "ResourceId", "public.MedicationRes");
            DropForeignKey("public.MedicationIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicationIxStr", "ResourceId", "public.MedicationRes");
            DropForeignKey("public.MedicationIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicationIxRef", "ResourceId", "public.MedicationRes");
            DropForeignKey("public.MedicationIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicationIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.MedicationIxQty", "ResourceId", "public.MedicationRes");
            DropForeignKey("public.MedicationIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicationIxDT", "ResourceId", "public.MedicationRes");
            DropForeignKey("public.MedicationIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicationRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.MedicationKnowledgeIxUri", "ResourceId", "public.MedicationKnowledgeRes");
            DropForeignKey("public.MedicationKnowledgeIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicationKnowledgeIxTok", "ResourceId", "public.MedicationKnowledgeRes");
            DropForeignKey("public.MedicationKnowledgeIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicationKnowledgeIxStr", "ResourceId", "public.MedicationKnowledgeRes");
            DropForeignKey("public.MedicationKnowledgeIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicationKnowledgeIxRef", "ResourceId", "public.MedicationKnowledgeRes");
            DropForeignKey("public.MedicationKnowledgeIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicationKnowledgeIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.MedicationKnowledgeIxQty", "ResourceId", "public.MedicationKnowledgeRes");
            DropForeignKey("public.MedicationKnowledgeIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicationKnowledgeIxDT", "ResourceId", "public.MedicationKnowledgeRes");
            DropForeignKey("public.MedicationKnowledgeIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicationKnowledgeRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.MedicationDispenseIxUri", "ResourceId", "public.MedicationDispenseRes");
            DropForeignKey("public.MedicationDispenseIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicationDispenseIxTok", "ResourceId", "public.MedicationDispenseRes");
            DropForeignKey("public.MedicationDispenseIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicationDispenseIxStr", "ResourceId", "public.MedicationDispenseRes");
            DropForeignKey("public.MedicationDispenseIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicationDispenseIxRef", "ResourceId", "public.MedicationDispenseRes");
            DropForeignKey("public.MedicationDispenseIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicationDispenseIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.MedicationDispenseIxQty", "ResourceId", "public.MedicationDispenseRes");
            DropForeignKey("public.MedicationDispenseIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicationDispenseIxDT", "ResourceId", "public.MedicationDispenseRes");
            DropForeignKey("public.MedicationDispenseIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicationDispenseRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.MedicationAdministrationIxUri", "ResourceId", "public.MedicationAdministrationRes");
            DropForeignKey("public.MedicationAdministrationIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicationAdministrationIxTok", "ResourceId", "public.MedicationAdministrationRes");
            DropForeignKey("public.MedicationAdministrationIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicationAdministrationIxStr", "ResourceId", "public.MedicationAdministrationRes");
            DropForeignKey("public.MedicationAdministrationIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicationAdministrationIxRef", "ResourceId", "public.MedicationAdministrationRes");
            DropForeignKey("public.MedicationAdministrationIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicationAdministrationIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.MedicationAdministrationIxQty", "ResourceId", "public.MedicationAdministrationRes");
            DropForeignKey("public.MedicationAdministrationIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicationAdministrationIxDT", "ResourceId", "public.MedicationAdministrationRes");
            DropForeignKey("public.MedicationAdministrationIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicationAdministrationRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.MediaIxUri", "ResourceId", "public.MediaRes");
            DropForeignKey("public.MediaIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MediaIxTok", "ResourceId", "public.MediaRes");
            DropForeignKey("public.MediaIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MediaIxStr", "ResourceId", "public.MediaRes");
            DropForeignKey("public.MediaIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MediaIxRef", "ResourceId", "public.MediaRes");
            DropForeignKey("public.MediaIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MediaIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.MediaIxQty", "ResourceId", "public.MediaRes");
            DropForeignKey("public.MediaIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MediaIxDT", "ResourceId", "public.MediaRes");
            DropForeignKey("public.MediaIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MediaRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.MeasureReportIxUri", "ResourceId", "public.MeasureReportRes");
            DropForeignKey("public.MeasureReportIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MeasureReportIxTok", "ResourceId", "public.MeasureReportRes");
            DropForeignKey("public.MeasureReportIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MeasureReportIxStr", "ResourceId", "public.MeasureReportRes");
            DropForeignKey("public.MeasureReportIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MeasureReportIxRef", "ResourceId", "public.MeasureReportRes");
            DropForeignKey("public.MeasureReportIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MeasureReportIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.MeasureReportIxQty", "ResourceId", "public.MeasureReportRes");
            DropForeignKey("public.MeasureReportIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MeasureReportIxDT", "ResourceId", "public.MeasureReportRes");
            DropForeignKey("public.MeasureReportIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MeasureReportRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.MeasureIxUri", "ResourceId", "public.MeasureRes");
            DropForeignKey("public.MeasureIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MeasureIxTok", "ResourceId", "public.MeasureRes");
            DropForeignKey("public.MeasureIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MeasureIxStr", "ResourceId", "public.MeasureRes");
            DropForeignKey("public.MeasureIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MeasureIxRef", "ResourceId", "public.MeasureRes");
            DropForeignKey("public.MeasureIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MeasureIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.MeasureIxQty", "ResourceId", "public.MeasureRes");
            DropForeignKey("public.MeasureIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MeasureIxDT", "ResourceId", "public.MeasureRes");
            DropForeignKey("public.MeasureIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MeasureRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.LocationIxUri", "ResourceId", "public.LocationRes");
            DropForeignKey("public.LocationIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.LocationIxTok", "ResourceId", "public.LocationRes");
            DropForeignKey("public.LocationIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.LocationIxStr", "ResourceId", "public.LocationRes");
            DropForeignKey("public.LocationIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.LocationIxRef", "ResourceId", "public.LocationRes");
            DropForeignKey("public.LocationIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.LocationIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.LocationIxQty", "ResourceId", "public.LocationRes");
            DropForeignKey("public.LocationIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.LocationIxDT", "ResourceId", "public.LocationRes");
            DropForeignKey("public.LocationIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.LocationRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.ListIxUri", "ResourceId", "public.ListRes");
            DropForeignKey("public.ListIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ListIxTok", "ResourceId", "public.ListRes");
            DropForeignKey("public.ListIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ListIxStr", "ResourceId", "public.ListRes");
            DropForeignKey("public.ListIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ListIxRef", "ResourceId", "public.ListRes");
            DropForeignKey("public.ListIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ListIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.ListIxQty", "ResourceId", "public.ListRes");
            DropForeignKey("public.ListIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ListIxDT", "ResourceId", "public.ListRes");
            DropForeignKey("public.ListIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ListRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.LinkageIxUri", "ResourceId", "public.LinkageRes");
            DropForeignKey("public.LinkageIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.LinkageIxTok", "ResourceId", "public.LinkageRes");
            DropForeignKey("public.LinkageIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.LinkageIxStr", "ResourceId", "public.LinkageRes");
            DropForeignKey("public.LinkageIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.LinkageIxRef", "ResourceId", "public.LinkageRes");
            DropForeignKey("public.LinkageIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.LinkageIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.LinkageIxQty", "ResourceId", "public.LinkageRes");
            DropForeignKey("public.LinkageIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.LinkageIxDT", "ResourceId", "public.LinkageRes");
            DropForeignKey("public.LinkageIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.LinkageRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.LibraryIxUri", "ResourceId", "public.LibraryRes");
            DropForeignKey("public.LibraryIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.LibraryIxTok", "ResourceId", "public.LibraryRes");
            DropForeignKey("public.LibraryIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.LibraryIxStr", "ResourceId", "public.LibraryRes");
            DropForeignKey("public.LibraryIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.LibraryIxRef", "ResourceId", "public.LibraryRes");
            DropForeignKey("public.LibraryIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.LibraryIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.LibraryIxQty", "ResourceId", "public.LibraryRes");
            DropForeignKey("public.LibraryIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.LibraryIxDT", "ResourceId", "public.LibraryRes");
            DropForeignKey("public.LibraryIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.LibraryRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.ItemInstanceIxUri", "ResourceId", "public.ItemInstanceRes");
            DropForeignKey("public.ItemInstanceIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ItemInstanceIxTok", "ResourceId", "public.ItemInstanceRes");
            DropForeignKey("public.ItemInstanceIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ItemInstanceIxStr", "ResourceId", "public.ItemInstanceRes");
            DropForeignKey("public.ItemInstanceIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ItemInstanceIxRef", "ResourceId", "public.ItemInstanceRes");
            DropForeignKey("public.ItemInstanceIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ItemInstanceIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.ItemInstanceIxQty", "ResourceId", "public.ItemInstanceRes");
            DropForeignKey("public.ItemInstanceIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ItemInstanceIxDT", "ResourceId", "public.ItemInstanceRes");
            DropForeignKey("public.ItemInstanceIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ItemInstanceRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.InvoiceIxUri", "ResourceId", "public.InvoiceRes");
            DropForeignKey("public.InvoiceIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.InvoiceIxTok", "ResourceId", "public.InvoiceRes");
            DropForeignKey("public.InvoiceIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.InvoiceIxStr", "ResourceId", "public.InvoiceRes");
            DropForeignKey("public.InvoiceIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.InvoiceIxRef", "ResourceId", "public.InvoiceRes");
            DropForeignKey("public.InvoiceIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.InvoiceIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.InvoiceIxQty", "ResourceId", "public.InvoiceRes");
            DropForeignKey("public.InvoiceIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.InvoiceIxDT", "ResourceId", "public.InvoiceRes");
            DropForeignKey("public.InvoiceIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.InvoiceRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.InsurancePlanIxUri", "ResourceId", "public.InsurancePlanRes");
            DropForeignKey("public.InsurancePlanIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.InsurancePlanIxTok", "ResourceId", "public.InsurancePlanRes");
            DropForeignKey("public.InsurancePlanIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.InsurancePlanIxStr", "ResourceId", "public.InsurancePlanRes");
            DropForeignKey("public.InsurancePlanIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.InsurancePlanIxRef", "ResourceId", "public.InsurancePlanRes");
            DropForeignKey("public.InsurancePlanIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.InsurancePlanIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.InsurancePlanIxQty", "ResourceId", "public.InsurancePlanRes");
            DropForeignKey("public.InsurancePlanIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.InsurancePlanIxDT", "ResourceId", "public.InsurancePlanRes");
            DropForeignKey("public.InsurancePlanIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.InsurancePlanRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.ImplementationGuideIxUri", "ResourceId", "public.ImplementationGuideRes");
            DropForeignKey("public.ImplementationGuideIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ImplementationGuideIxTok", "ResourceId", "public.ImplementationGuideRes");
            DropForeignKey("public.ImplementationGuideIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ImplementationGuideIxStr", "ResourceId", "public.ImplementationGuideRes");
            DropForeignKey("public.ImplementationGuideIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ImplementationGuideIxRef", "ResourceId", "public.ImplementationGuideRes");
            DropForeignKey("public.ImplementationGuideIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ImplementationGuideIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.ImplementationGuideIxQty", "ResourceId", "public.ImplementationGuideRes");
            DropForeignKey("public.ImplementationGuideIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ImplementationGuideIxDT", "ResourceId", "public.ImplementationGuideRes");
            DropForeignKey("public.ImplementationGuideIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ImplementationGuideRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.ImmunizationRecommendationIxUri", "ResourceId", "public.ImmunizationRecommendationRes");
            DropForeignKey("public.ImmunizationRecommendationIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ImmunizationRecommendationIxTok", "ResourceId", "public.ImmunizationRecommendationRes");
            DropForeignKey("public.ImmunizationRecommendationIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ImmunizationRecommendationIxStr", "ResourceId", "public.ImmunizationRecommendationRes");
            DropForeignKey("public.ImmunizationRecommendationIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ImmunizationRecommendationIxRef", "ResourceId", "public.ImmunizationRecommendationRes");
            DropForeignKey("public.ImmunizationRecommendationIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ImmunizationRecommendationIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.ImmunizationRecommendationIxQty", "ResourceId", "public.ImmunizationRecommendationRes");
            DropForeignKey("public.ImmunizationRecommendationIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ImmunizationRecommendationIxDT", "ResourceId", "public.ImmunizationRecommendationRes");
            DropForeignKey("public.ImmunizationRecommendationIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ImmunizationRecommendationRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.ImmunizationIxUri", "ResourceId", "public.ImmunizationRes");
            DropForeignKey("public.ImmunizationIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ImmunizationIxTok", "ResourceId", "public.ImmunizationRes");
            DropForeignKey("public.ImmunizationIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ImmunizationIxStr", "ResourceId", "public.ImmunizationRes");
            DropForeignKey("public.ImmunizationIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ImmunizationIxRef", "ResourceId", "public.ImmunizationRes");
            DropForeignKey("public.ImmunizationIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ImmunizationIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.ImmunizationIxQty", "ResourceId", "public.ImmunizationRes");
            DropForeignKey("public.ImmunizationIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ImmunizationIxDT", "ResourceId", "public.ImmunizationRes");
            DropForeignKey("public.ImmunizationIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ImmunizationRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.ImmunizationEvaluationIxUri", "ResourceId", "public.ImmunizationEvaluationRes");
            DropForeignKey("public.ImmunizationEvaluationIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ImmunizationEvaluationIxTok", "ResourceId", "public.ImmunizationEvaluationRes");
            DropForeignKey("public.ImmunizationEvaluationIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ImmunizationEvaluationIxStr", "ResourceId", "public.ImmunizationEvaluationRes");
            DropForeignKey("public.ImmunizationEvaluationIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ImmunizationEvaluationIxRef", "ResourceId", "public.ImmunizationEvaluationRes");
            DropForeignKey("public.ImmunizationEvaluationIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ImmunizationEvaluationIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.ImmunizationEvaluationIxQty", "ResourceId", "public.ImmunizationEvaluationRes");
            DropForeignKey("public.ImmunizationEvaluationIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ImmunizationEvaluationIxDT", "ResourceId", "public.ImmunizationEvaluationRes");
            DropForeignKey("public.ImmunizationEvaluationIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ImmunizationEvaluationRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.ImagingStudyIxUri", "ResourceId", "public.ImagingStudyRes");
            DropForeignKey("public.ImagingStudyIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ImagingStudyIxTok", "ResourceId", "public.ImagingStudyRes");
            DropForeignKey("public.ImagingStudyIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ImagingStudyIxStr", "ResourceId", "public.ImagingStudyRes");
            DropForeignKey("public.ImagingStudyIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ImagingStudyIxRef", "ResourceId", "public.ImagingStudyRes");
            DropForeignKey("public.ImagingStudyIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ImagingStudyIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.ImagingStudyIxQty", "ResourceId", "public.ImagingStudyRes");
            DropForeignKey("public.ImagingStudyIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ImagingStudyIxDT", "ResourceId", "public.ImagingStudyRes");
            DropForeignKey("public.ImagingStudyIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ImagingStudyRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.HealthcareServiceIxUri", "ResourceId", "public.HealthcareServiceRes");
            DropForeignKey("public.HealthcareServiceIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.HealthcareServiceIxTok", "ResourceId", "public.HealthcareServiceRes");
            DropForeignKey("public.HealthcareServiceIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.HealthcareServiceIxStr", "ResourceId", "public.HealthcareServiceRes");
            DropForeignKey("public.HealthcareServiceIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.HealthcareServiceIxRef", "ResourceId", "public.HealthcareServiceRes");
            DropForeignKey("public.HealthcareServiceIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.HealthcareServiceIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.HealthcareServiceIxQty", "ResourceId", "public.HealthcareServiceRes");
            DropForeignKey("public.HealthcareServiceIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.HealthcareServiceIxDT", "ResourceId", "public.HealthcareServiceRes");
            DropForeignKey("public.HealthcareServiceIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.HealthcareServiceRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.GuidanceResponseIxUri", "ResourceId", "public.GuidanceResponseRes");
            DropForeignKey("public.GuidanceResponseIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.GuidanceResponseIxTok", "ResourceId", "public.GuidanceResponseRes");
            DropForeignKey("public.GuidanceResponseIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.GuidanceResponseIxStr", "ResourceId", "public.GuidanceResponseRes");
            DropForeignKey("public.GuidanceResponseIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.GuidanceResponseIxRef", "ResourceId", "public.GuidanceResponseRes");
            DropForeignKey("public.GuidanceResponseIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.GuidanceResponseIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.GuidanceResponseIxQty", "ResourceId", "public.GuidanceResponseRes");
            DropForeignKey("public.GuidanceResponseIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.GuidanceResponseIxDT", "ResourceId", "public.GuidanceResponseRes");
            DropForeignKey("public.GuidanceResponseIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.GuidanceResponseRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.GroupIxUri", "ResourceId", "public.GroupRes");
            DropForeignKey("public.GroupIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.GroupIxTok", "ResourceId", "public.GroupRes");
            DropForeignKey("public.GroupIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.GroupIxStr", "ResourceId", "public.GroupRes");
            DropForeignKey("public.GroupIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.GroupIxRef", "ResourceId", "public.GroupRes");
            DropForeignKey("public.GroupIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.GroupIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.GroupIxQty", "ResourceId", "public.GroupRes");
            DropForeignKey("public.GroupIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.GroupIxDT", "ResourceId", "public.GroupRes");
            DropForeignKey("public.GroupIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.GroupRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.GraphDefinitionIxUri", "ResourceId", "public.GraphDefinitionRes");
            DropForeignKey("public.GraphDefinitionIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.GraphDefinitionIxTok", "ResourceId", "public.GraphDefinitionRes");
            DropForeignKey("public.GraphDefinitionIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.GraphDefinitionIxStr", "ResourceId", "public.GraphDefinitionRes");
            DropForeignKey("public.GraphDefinitionIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.GraphDefinitionIxRef", "ResourceId", "public.GraphDefinitionRes");
            DropForeignKey("public.GraphDefinitionIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.GraphDefinitionIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.GraphDefinitionIxQty", "ResourceId", "public.GraphDefinitionRes");
            DropForeignKey("public.GraphDefinitionIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.GraphDefinitionIxDT", "ResourceId", "public.GraphDefinitionRes");
            DropForeignKey("public.GraphDefinitionIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.GraphDefinitionRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.GoalIxUri", "ResourceId", "public.GoalRes");
            DropForeignKey("public.GoalIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.GoalIxTok", "ResourceId", "public.GoalRes");
            DropForeignKey("public.GoalIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.GoalIxStr", "ResourceId", "public.GoalRes");
            DropForeignKey("public.GoalIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.GoalIxRef", "ResourceId", "public.GoalRes");
            DropForeignKey("public.GoalIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.GoalIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.GoalIxQty", "ResourceId", "public.GoalRes");
            DropForeignKey("public.GoalIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.GoalIxDT", "ResourceId", "public.GoalRes");
            DropForeignKey("public.GoalIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.GoalRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.FlagIxUri", "ResourceId", "public.FlagRes");
            DropForeignKey("public.FlagIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.FlagIxTok", "ResourceId", "public.FlagRes");
            DropForeignKey("public.FlagIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.FlagIxStr", "ResourceId", "public.FlagRes");
            DropForeignKey("public.FlagIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.FlagIxRef", "ResourceId", "public.FlagRes");
            DropForeignKey("public.FlagIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.FlagIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.FlagIxQty", "ResourceId", "public.FlagRes");
            DropForeignKey("public.FlagIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.FlagIxDT", "ResourceId", "public.FlagRes");
            DropForeignKey("public.FlagIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.FlagRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.FamilyMemberHistoryIxUri", "ResourceId", "public.FamilyMemberHistoryRes");
            DropForeignKey("public.FamilyMemberHistoryIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.FamilyMemberHistoryIxTok", "ResourceId", "public.FamilyMemberHistoryRes");
            DropForeignKey("public.FamilyMemberHistoryIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.FamilyMemberHistoryIxStr", "ResourceId", "public.FamilyMemberHistoryRes");
            DropForeignKey("public.FamilyMemberHistoryIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.FamilyMemberHistoryIxRef", "ResourceId", "public.FamilyMemberHistoryRes");
            DropForeignKey("public.FamilyMemberHistoryIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.FamilyMemberHistoryIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.FamilyMemberHistoryIxQty", "ResourceId", "public.FamilyMemberHistoryRes");
            DropForeignKey("public.FamilyMemberHistoryIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.FamilyMemberHistoryIxDT", "ResourceId", "public.FamilyMemberHistoryRes");
            DropForeignKey("public.FamilyMemberHistoryIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.FamilyMemberHistoryRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.ExplanationOfBenefitIxUri", "ResourceId", "public.ExplanationOfBenefitRes");
            DropForeignKey("public.ExplanationOfBenefitIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ExplanationOfBenefitIxTok", "ResourceId", "public.ExplanationOfBenefitRes");
            DropForeignKey("public.ExplanationOfBenefitIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ExplanationOfBenefitIxStr", "ResourceId", "public.ExplanationOfBenefitRes");
            DropForeignKey("public.ExplanationOfBenefitIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ExplanationOfBenefitIxRef", "ResourceId", "public.ExplanationOfBenefitRes");
            DropForeignKey("public.ExplanationOfBenefitIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ExplanationOfBenefitIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.ExplanationOfBenefitIxQty", "ResourceId", "public.ExplanationOfBenefitRes");
            DropForeignKey("public.ExplanationOfBenefitIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ExplanationOfBenefitIxDT", "ResourceId", "public.ExplanationOfBenefitRes");
            DropForeignKey("public.ExplanationOfBenefitIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ExplanationOfBenefitRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.ExampleScenarioIxUri", "ResourceId", "public.ExampleScenarioRes");
            DropForeignKey("public.ExampleScenarioIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ExampleScenarioIxTok", "ResourceId", "public.ExampleScenarioRes");
            DropForeignKey("public.ExampleScenarioIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ExampleScenarioIxStr", "ResourceId", "public.ExampleScenarioRes");
            DropForeignKey("public.ExampleScenarioIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ExampleScenarioIxRef", "ResourceId", "public.ExampleScenarioRes");
            DropForeignKey("public.ExampleScenarioIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ExampleScenarioIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.ExampleScenarioIxQty", "ResourceId", "public.ExampleScenarioRes");
            DropForeignKey("public.ExampleScenarioIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ExampleScenarioIxDT", "ResourceId", "public.ExampleScenarioRes");
            DropForeignKey("public.ExampleScenarioIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ExampleScenarioRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.EventDefinitionIxUri", "ResourceId", "public.EventDefinitionRes");
            DropForeignKey("public.EventDefinitionIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EventDefinitionIxTok", "ResourceId", "public.EventDefinitionRes");
            DropForeignKey("public.EventDefinitionIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EventDefinitionIxStr", "ResourceId", "public.EventDefinitionRes");
            DropForeignKey("public.EventDefinitionIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EventDefinitionIxRef", "ResourceId", "public.EventDefinitionRes");
            DropForeignKey("public.EventDefinitionIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EventDefinitionIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.EventDefinitionIxQty", "ResourceId", "public.EventDefinitionRes");
            DropForeignKey("public.EventDefinitionIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EventDefinitionIxDT", "ResourceId", "public.EventDefinitionRes");
            DropForeignKey("public.EventDefinitionIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EventDefinitionRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.EpisodeOfCareIxUri", "ResourceId", "public.EpisodeOfCareRes");
            DropForeignKey("public.EpisodeOfCareIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EpisodeOfCareIxTok", "ResourceId", "public.EpisodeOfCareRes");
            DropForeignKey("public.EpisodeOfCareIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EpisodeOfCareIxStr", "ResourceId", "public.EpisodeOfCareRes");
            DropForeignKey("public.EpisodeOfCareIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EpisodeOfCareIxRef", "ResourceId", "public.EpisodeOfCareRes");
            DropForeignKey("public.EpisodeOfCareIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EpisodeOfCareIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.EpisodeOfCareIxQty", "ResourceId", "public.EpisodeOfCareRes");
            DropForeignKey("public.EpisodeOfCareIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EpisodeOfCareIxDT", "ResourceId", "public.EpisodeOfCareRes");
            DropForeignKey("public.EpisodeOfCareIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EpisodeOfCareRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.EntryDefinitionIxUri", "ResourceId", "public.EntryDefinitionRes");
            DropForeignKey("public.EntryDefinitionIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EntryDefinitionIxTok", "ResourceId", "public.EntryDefinitionRes");
            DropForeignKey("public.EntryDefinitionIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EntryDefinitionIxStr", "ResourceId", "public.EntryDefinitionRes");
            DropForeignKey("public.EntryDefinitionIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EntryDefinitionIxRef", "ResourceId", "public.EntryDefinitionRes");
            DropForeignKey("public.EntryDefinitionIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EntryDefinitionIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.EntryDefinitionIxQty", "ResourceId", "public.EntryDefinitionRes");
            DropForeignKey("public.EntryDefinitionIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EntryDefinitionIxDT", "ResourceId", "public.EntryDefinitionRes");
            DropForeignKey("public.EntryDefinitionIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EntryDefinitionRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.EnrollmentResponseIxUri", "ResourceId", "public.EnrollmentResponseRes");
            DropForeignKey("public.EnrollmentResponseIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EnrollmentResponseIxTok", "ResourceId", "public.EnrollmentResponseRes");
            DropForeignKey("public.EnrollmentResponseIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EnrollmentResponseIxStr", "ResourceId", "public.EnrollmentResponseRes");
            DropForeignKey("public.EnrollmentResponseIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EnrollmentResponseIxRef", "ResourceId", "public.EnrollmentResponseRes");
            DropForeignKey("public.EnrollmentResponseIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EnrollmentResponseIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.EnrollmentResponseIxQty", "ResourceId", "public.EnrollmentResponseRes");
            DropForeignKey("public.EnrollmentResponseIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EnrollmentResponseIxDT", "ResourceId", "public.EnrollmentResponseRes");
            DropForeignKey("public.EnrollmentResponseIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EnrollmentResponseRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.EnrollmentRequestIxUri", "ResourceId", "public.EnrollmentRequestRes");
            DropForeignKey("public.EnrollmentRequestIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EnrollmentRequestIxTok", "ResourceId", "public.EnrollmentRequestRes");
            DropForeignKey("public.EnrollmentRequestIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EnrollmentRequestIxStr", "ResourceId", "public.EnrollmentRequestRes");
            DropForeignKey("public.EnrollmentRequestIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EnrollmentRequestIxRef", "ResourceId", "public.EnrollmentRequestRes");
            DropForeignKey("public.EnrollmentRequestIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EnrollmentRequestIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.EnrollmentRequestIxQty", "ResourceId", "public.EnrollmentRequestRes");
            DropForeignKey("public.EnrollmentRequestIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EnrollmentRequestIxDT", "ResourceId", "public.EnrollmentRequestRes");
            DropForeignKey("public.EnrollmentRequestIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EnrollmentRequestRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.EndpointIxUri", "ResourceId", "public.EndpointRes");
            DropForeignKey("public.EndpointIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EndpointIxTok", "ResourceId", "public.EndpointRes");
            DropForeignKey("public.EndpointIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EndpointIxStr", "ResourceId", "public.EndpointRes");
            DropForeignKey("public.EndpointIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EndpointIxRef", "ResourceId", "public.EndpointRes");
            DropForeignKey("public.EndpointIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EndpointIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.EndpointIxQty", "ResourceId", "public.EndpointRes");
            DropForeignKey("public.EndpointIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EndpointIxDT", "ResourceId", "public.EndpointRes");
            DropForeignKey("public.EndpointIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EndpointRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.EncounterIxUri", "ResourceId", "public.EncounterRes");
            DropForeignKey("public.EncounterIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EncounterIxTok", "ResourceId", "public.EncounterRes");
            DropForeignKey("public.EncounterIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EncounterIxStr", "ResourceId", "public.EncounterRes");
            DropForeignKey("public.EncounterIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EncounterIxRef", "ResourceId", "public.EncounterRes");
            DropForeignKey("public.EncounterIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EncounterIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.EncounterIxQty", "ResourceId", "public.EncounterRes");
            DropForeignKey("public.EncounterIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EncounterIxDT", "ResourceId", "public.EncounterRes");
            DropForeignKey("public.EncounterIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EncounterRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.DocumentReferenceIxUri", "ResourceId", "public.DocumentReferenceRes");
            DropForeignKey("public.DocumentReferenceIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DocumentReferenceIxTok", "ResourceId", "public.DocumentReferenceRes");
            DropForeignKey("public.DocumentReferenceIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DocumentReferenceIxStr", "ResourceId", "public.DocumentReferenceRes");
            DropForeignKey("public.DocumentReferenceIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DocumentReferenceIxRef", "ResourceId", "public.DocumentReferenceRes");
            DropForeignKey("public.DocumentReferenceIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DocumentReferenceIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.DocumentReferenceIxQty", "ResourceId", "public.DocumentReferenceRes");
            DropForeignKey("public.DocumentReferenceIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DocumentReferenceIxDT", "ResourceId", "public.DocumentReferenceRes");
            DropForeignKey("public.DocumentReferenceIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DocumentReferenceRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.DocumentManifestIxUri", "ResourceId", "public.DocumentManifestRes");
            DropForeignKey("public.DocumentManifestIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DocumentManifestIxTok", "ResourceId", "public.DocumentManifestRes");
            DropForeignKey("public.DocumentManifestIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DocumentManifestIxStr", "ResourceId", "public.DocumentManifestRes");
            DropForeignKey("public.DocumentManifestIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DocumentManifestIxRef", "ResourceId", "public.DocumentManifestRes");
            DropForeignKey("public.DocumentManifestIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DocumentManifestIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.DocumentManifestIxQty", "ResourceId", "public.DocumentManifestRes");
            DropForeignKey("public.DocumentManifestIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DocumentManifestIxDT", "ResourceId", "public.DocumentManifestRes");
            DropForeignKey("public.DocumentManifestIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DocumentManifestRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.DiagnosticReportIxUri", "ResourceId", "public.DiagnosticReportRes");
            DropForeignKey("public.DiagnosticReportIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DiagnosticReportIxTok", "ResourceId", "public.DiagnosticReportRes");
            DropForeignKey("public.DiagnosticReportIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DiagnosticReportIxStr", "ResourceId", "public.DiagnosticReportRes");
            DropForeignKey("public.DiagnosticReportIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DiagnosticReportIxRef", "ResourceId", "public.DiagnosticReportRes");
            DropForeignKey("public.DiagnosticReportIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DiagnosticReportIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.DiagnosticReportIxQty", "ResourceId", "public.DiagnosticReportRes");
            DropForeignKey("public.DiagnosticReportIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DiagnosticReportIxDT", "ResourceId", "public.DiagnosticReportRes");
            DropForeignKey("public.DiagnosticReportIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DiagnosticReportRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.DeviceUseStatementIxUri", "ResourceId", "public.DeviceUseStatementRes");
            DropForeignKey("public.DeviceUseStatementIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DeviceUseStatementIxTok", "ResourceId", "public.DeviceUseStatementRes");
            DropForeignKey("public.DeviceUseStatementIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DeviceUseStatementIxStr", "ResourceId", "public.DeviceUseStatementRes");
            DropForeignKey("public.DeviceUseStatementIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DeviceUseStatementIxRef", "ResourceId", "public.DeviceUseStatementRes");
            DropForeignKey("public.DeviceUseStatementIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DeviceUseStatementIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.DeviceUseStatementIxQty", "ResourceId", "public.DeviceUseStatementRes");
            DropForeignKey("public.DeviceUseStatementIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DeviceUseStatementIxDT", "ResourceId", "public.DeviceUseStatementRes");
            DropForeignKey("public.DeviceUseStatementIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DeviceUseStatementRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.DeviceRequestIxUri", "ResourceId", "public.DeviceRequestRes");
            DropForeignKey("public.DeviceRequestIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DeviceRequestIxTok", "ResourceId", "public.DeviceRequestRes");
            DropForeignKey("public.DeviceRequestIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DeviceRequestIxStr", "ResourceId", "public.DeviceRequestRes");
            DropForeignKey("public.DeviceRequestIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DeviceRequestIxRef", "ResourceId", "public.DeviceRequestRes");
            DropForeignKey("public.DeviceRequestIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DeviceRequestIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.DeviceRequestIxQty", "ResourceId", "public.DeviceRequestRes");
            DropForeignKey("public.DeviceRequestIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DeviceRequestIxDT", "ResourceId", "public.DeviceRequestRes");
            DropForeignKey("public.DeviceRequestIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DeviceRequestRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.DeviceMetricIxUri", "ResourceId", "public.DeviceMetricRes");
            DropForeignKey("public.DeviceMetricIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DeviceMetricIxTok", "ResourceId", "public.DeviceMetricRes");
            DropForeignKey("public.DeviceMetricIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DeviceMetricIxStr", "ResourceId", "public.DeviceMetricRes");
            DropForeignKey("public.DeviceMetricIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DeviceMetricIxRef", "ResourceId", "public.DeviceMetricRes");
            DropForeignKey("public.DeviceMetricIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DeviceMetricIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.DeviceMetricIxQty", "ResourceId", "public.DeviceMetricRes");
            DropForeignKey("public.DeviceMetricIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DeviceMetricIxDT", "ResourceId", "public.DeviceMetricRes");
            DropForeignKey("public.DeviceMetricIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DeviceMetricRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.DeviceIxUri", "ResourceId", "public.DeviceRes");
            DropForeignKey("public.DeviceIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DeviceIxTok", "ResourceId", "public.DeviceRes");
            DropForeignKey("public.DeviceIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DeviceIxStr", "ResourceId", "public.DeviceRes");
            DropForeignKey("public.DeviceIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DeviceIxRef", "ResourceId", "public.DeviceRes");
            DropForeignKey("public.DeviceIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DeviceIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.DeviceIxQty", "ResourceId", "public.DeviceRes");
            DropForeignKey("public.DeviceIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DeviceIxDT", "ResourceId", "public.DeviceRes");
            DropForeignKey("public.DeviceIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DeviceRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.DeviceDefinitionIxUri", "ResourceId", "public.DeviceDefinitionRes");
            DropForeignKey("public.DeviceDefinitionIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DeviceDefinitionIxTok", "ResourceId", "public.DeviceDefinitionRes");
            DropForeignKey("public.DeviceDefinitionIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DeviceDefinitionIxStr", "ResourceId", "public.DeviceDefinitionRes");
            DropForeignKey("public.DeviceDefinitionIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DeviceDefinitionIxRef", "ResourceId", "public.DeviceDefinitionRes");
            DropForeignKey("public.DeviceDefinitionIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DeviceDefinitionIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.DeviceDefinitionIxQty", "ResourceId", "public.DeviceDefinitionRes");
            DropForeignKey("public.DeviceDefinitionIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DeviceDefinitionIxDT", "ResourceId", "public.DeviceDefinitionRes");
            DropForeignKey("public.DeviceDefinitionIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DeviceDefinitionRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.DetectedIssueIxUri", "ResourceId", "public.DetectedIssueRes");
            DropForeignKey("public.DetectedIssueIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DetectedIssueIxTok", "ResourceId", "public.DetectedIssueRes");
            DropForeignKey("public.DetectedIssueIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DetectedIssueIxStr", "ResourceId", "public.DetectedIssueRes");
            DropForeignKey("public.DetectedIssueIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DetectedIssueIxRef", "ResourceId", "public.DetectedIssueRes");
            DropForeignKey("public.DetectedIssueIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DetectedIssueIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.DetectedIssueIxQty", "ResourceId", "public.DetectedIssueRes");
            DropForeignKey("public.DetectedIssueIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DetectedIssueIxDT", "ResourceId", "public.DetectedIssueRes");
            DropForeignKey("public.DetectedIssueIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DetectedIssueRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.CoverageIxUri", "ResourceId", "public.CoverageRes");
            DropForeignKey("public.CoverageIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CoverageIxTok", "ResourceId", "public.CoverageRes");
            DropForeignKey("public.CoverageIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CoverageIxStr", "ResourceId", "public.CoverageRes");
            DropForeignKey("public.CoverageIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CoverageIxRef", "ResourceId", "public.CoverageRes");
            DropForeignKey("public.CoverageIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CoverageIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.CoverageIxQty", "ResourceId", "public.CoverageRes");
            DropForeignKey("public.CoverageIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CoverageIxDT", "ResourceId", "public.CoverageRes");
            DropForeignKey("public.CoverageIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CoverageRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.CoverageEligibilityResponseIxUri", "ResourceId", "public.CoverageEligibilityResponseRes");
            DropForeignKey("public.CoverageEligibilityResponseIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CoverageEligibilityResponseIxTok", "ResourceId", "public.CoverageEligibilityResponseRes");
            DropForeignKey("public.CoverageEligibilityResponseIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CoverageEligibilityResponseIxStr", "ResourceId", "public.CoverageEligibilityResponseRes");
            DropForeignKey("public.CoverageEligibilityResponseIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CoverageEligibilityResponseIxRef", "ResourceId", "public.CoverageEligibilityResponseRes");
            DropForeignKey("public.CoverageEligibilityResponseIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CoverageEligibilityResponseIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.CoverageEligibilityResponseIxQty", "ResourceId", "public.CoverageEligibilityResponseRes");
            DropForeignKey("public.CoverageEligibilityResponseIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CoverageEligibilityResponseIxDT", "ResourceId", "public.CoverageEligibilityResponseRes");
            DropForeignKey("public.CoverageEligibilityResponseIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CoverageEligibilityResponseRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.CoverageEligibilityRequestIxUri", "ResourceId", "public.CoverageEligibilityRequestRes");
            DropForeignKey("public.CoverageEligibilityRequestIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CoverageEligibilityRequestIxTok", "ResourceId", "public.CoverageEligibilityRequestRes");
            DropForeignKey("public.CoverageEligibilityRequestIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CoverageEligibilityRequestIxStr", "ResourceId", "public.CoverageEligibilityRequestRes");
            DropForeignKey("public.CoverageEligibilityRequestIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CoverageEligibilityRequestIxRef", "ResourceId", "public.CoverageEligibilityRequestRes");
            DropForeignKey("public.CoverageEligibilityRequestIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CoverageEligibilityRequestIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.CoverageEligibilityRequestIxQty", "ResourceId", "public.CoverageEligibilityRequestRes");
            DropForeignKey("public.CoverageEligibilityRequestIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CoverageEligibilityRequestIxDT", "ResourceId", "public.CoverageEligibilityRequestRes");
            DropForeignKey("public.CoverageEligibilityRequestIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CoverageEligibilityRequestRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.ContractIxUri", "ResourceId", "public.ContractRes");
            DropForeignKey("public.ContractIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ContractIxTok", "ResourceId", "public.ContractRes");
            DropForeignKey("public.ContractIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ContractIxStr", "ResourceId", "public.ContractRes");
            DropForeignKey("public.ContractIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ContractIxRef", "ResourceId", "public.ContractRes");
            DropForeignKey("public.ContractIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ContractIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.ContractIxQty", "ResourceId", "public.ContractRes");
            DropForeignKey("public.ContractIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ContractIxDT", "ResourceId", "public.ContractRes");
            DropForeignKey("public.ContractIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ContractRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.ConsentIxUri", "ResourceId", "public.ConsentRes");
            DropForeignKey("public.ConsentIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ConsentIxTok", "ResourceId", "public.ConsentRes");
            DropForeignKey("public.ConsentIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ConsentIxStr", "ResourceId", "public.ConsentRes");
            DropForeignKey("public.ConsentIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ConsentIxRef", "ResourceId", "public.ConsentRes");
            DropForeignKey("public.ConsentIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ConsentIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.ConsentIxQty", "ResourceId", "public.ConsentRes");
            DropForeignKey("public.ConsentIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ConsentIxDT", "ResourceId", "public.ConsentRes");
            DropForeignKey("public.ConsentIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ConsentRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.ConditionIxUri", "ResourceId", "public.ConditionRes");
            DropForeignKey("public.ConditionIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ConditionIxTok", "ResourceId", "public.ConditionRes");
            DropForeignKey("public.ConditionIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ConditionIxStr", "ResourceId", "public.ConditionRes");
            DropForeignKey("public.ConditionIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ConditionIxRef", "ResourceId", "public.ConditionRes");
            DropForeignKey("public.ConditionIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ConditionIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.ConditionIxQty", "ResourceId", "public.ConditionRes");
            DropForeignKey("public.ConditionIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ConditionIxDT", "ResourceId", "public.ConditionRes");
            DropForeignKey("public.ConditionIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ConditionRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.ConceptMapIxUri", "ResourceId", "public.ConceptMapRes");
            DropForeignKey("public.ConceptMapIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ConceptMapIxTok", "ResourceId", "public.ConceptMapRes");
            DropForeignKey("public.ConceptMapIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ConceptMapIxStr", "ResourceId", "public.ConceptMapRes");
            DropForeignKey("public.ConceptMapIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ConceptMapIxRef", "ResourceId", "public.ConceptMapRes");
            DropForeignKey("public.ConceptMapIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ConceptMapIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.ConceptMapIxQty", "ResourceId", "public.ConceptMapRes");
            DropForeignKey("public.ConceptMapIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ConceptMapIxDT", "ResourceId", "public.ConceptMapRes");
            DropForeignKey("public.ConceptMapIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ConceptMapRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.CompositionIxUri", "ResourceId", "public.CompositionRes");
            DropForeignKey("public.CompositionIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CompositionIxTok", "ResourceId", "public.CompositionRes");
            DropForeignKey("public.CompositionIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CompositionIxStr", "ResourceId", "public.CompositionRes");
            DropForeignKey("public.CompositionIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CompositionIxRef", "ResourceId", "public.CompositionRes");
            DropForeignKey("public.CompositionIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CompositionIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.CompositionIxQty", "ResourceId", "public.CompositionRes");
            DropForeignKey("public.CompositionIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CompositionIxDT", "ResourceId", "public.CompositionRes");
            DropForeignKey("public.CompositionIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CompositionRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.CompartmentDefinitionIxUri", "ResourceId", "public.CompartmentDefinitionRes");
            DropForeignKey("public.CompartmentDefinitionIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CompartmentDefinitionIxTok", "ResourceId", "public.CompartmentDefinitionRes");
            DropForeignKey("public.CompartmentDefinitionIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CompartmentDefinitionIxStr", "ResourceId", "public.CompartmentDefinitionRes");
            DropForeignKey("public.CompartmentDefinitionIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CompartmentDefinitionIxRef", "ResourceId", "public.CompartmentDefinitionRes");
            DropForeignKey("public.CompartmentDefinitionIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CompartmentDefinitionIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.CompartmentDefinitionIxQty", "ResourceId", "public.CompartmentDefinitionRes");
            DropForeignKey("public.CompartmentDefinitionIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CompartmentDefinitionIxDT", "ResourceId", "public.CompartmentDefinitionRes");
            DropForeignKey("public.CompartmentDefinitionIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CompartmentDefinitionRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.CommunicationRequestIxUri", "ResourceId", "public.CommunicationRequestRes");
            DropForeignKey("public.CommunicationRequestIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CommunicationRequestIxTok", "ResourceId", "public.CommunicationRequestRes");
            DropForeignKey("public.CommunicationRequestIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CommunicationRequestIxStr", "ResourceId", "public.CommunicationRequestRes");
            DropForeignKey("public.CommunicationRequestIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CommunicationRequestIxRef", "ResourceId", "public.CommunicationRequestRes");
            DropForeignKey("public.CommunicationRequestIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CommunicationRequestIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.CommunicationRequestIxQty", "ResourceId", "public.CommunicationRequestRes");
            DropForeignKey("public.CommunicationRequestIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CommunicationRequestIxDT", "ResourceId", "public.CommunicationRequestRes");
            DropForeignKey("public.CommunicationRequestIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CommunicationRequestRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.CommunicationIxUri", "ResourceId", "public.CommunicationRes");
            DropForeignKey("public.CommunicationIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CommunicationIxTok", "ResourceId", "public.CommunicationRes");
            DropForeignKey("public.CommunicationIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CommunicationIxStr", "ResourceId", "public.CommunicationRes");
            DropForeignKey("public.CommunicationIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CommunicationIxRef", "ResourceId", "public.CommunicationRes");
            DropForeignKey("public.CommunicationIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CommunicationIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.CommunicationIxQty", "ResourceId", "public.CommunicationRes");
            DropForeignKey("public.CommunicationIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CommunicationIxDT", "ResourceId", "public.CommunicationRes");
            DropForeignKey("public.CommunicationIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CommunicationRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.CodeSystemIxUri", "ResourceId", "public.CodeSystemRes");
            DropForeignKey("public.CodeSystemIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CodeSystemIxTok", "ResourceId", "public.CodeSystemRes");
            DropForeignKey("public.CodeSystemIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CodeSystemIxStr", "ResourceId", "public.CodeSystemRes");
            DropForeignKey("public.CodeSystemIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CodeSystemIxRef", "ResourceId", "public.CodeSystemRes");
            DropForeignKey("public.CodeSystemIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CodeSystemIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.CodeSystemIxQty", "ResourceId", "public.CodeSystemRes");
            DropForeignKey("public.CodeSystemIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CodeSystemIxDT", "ResourceId", "public.CodeSystemRes");
            DropForeignKey("public.CodeSystemIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CodeSystemRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.ClinicalImpressionIxUri", "ResourceId", "public.ClinicalImpressionRes");
            DropForeignKey("public.ClinicalImpressionIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ClinicalImpressionIxTok", "ResourceId", "public.ClinicalImpressionRes");
            DropForeignKey("public.ClinicalImpressionIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ClinicalImpressionIxStr", "ResourceId", "public.ClinicalImpressionRes");
            DropForeignKey("public.ClinicalImpressionIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ClinicalImpressionIxRef", "ResourceId", "public.ClinicalImpressionRes");
            DropForeignKey("public.ClinicalImpressionIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ClinicalImpressionIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.ClinicalImpressionIxQty", "ResourceId", "public.ClinicalImpressionRes");
            DropForeignKey("public.ClinicalImpressionIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ClinicalImpressionIxDT", "ResourceId", "public.ClinicalImpressionRes");
            DropForeignKey("public.ClinicalImpressionIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ClinicalImpressionRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.ClaimResponseIxUri", "ResourceId", "public.ClaimResponseRes");
            DropForeignKey("public.ClaimResponseIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ClaimResponseIxTok", "ResourceId", "public.ClaimResponseRes");
            DropForeignKey("public.ClaimResponseIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ClaimResponseIxStr", "ResourceId", "public.ClaimResponseRes");
            DropForeignKey("public.ClaimResponseIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ClaimResponseIxRef", "ResourceId", "public.ClaimResponseRes");
            DropForeignKey("public.ClaimResponseIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ClaimResponseIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.ClaimResponseIxQty", "ResourceId", "public.ClaimResponseRes");
            DropForeignKey("public.ClaimResponseIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ClaimResponseIxDT", "ResourceId", "public.ClaimResponseRes");
            DropForeignKey("public.ClaimResponseIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ClaimResponseRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.ClaimIxUri", "ResourceId", "public.ClaimRes");
            DropForeignKey("public.ClaimIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ClaimIxTok", "ResourceId", "public.ClaimRes");
            DropForeignKey("public.ClaimIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ClaimIxStr", "ResourceId", "public.ClaimRes");
            DropForeignKey("public.ClaimIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ClaimIxRef", "ResourceId", "public.ClaimRes");
            DropForeignKey("public.ClaimIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ClaimIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.ClaimIxQty", "ResourceId", "public.ClaimRes");
            DropForeignKey("public.ClaimIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ClaimIxDT", "ResourceId", "public.ClaimRes");
            DropForeignKey("public.ClaimIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ClaimRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.ChargeItemIxUri", "ResourceId", "public.ChargeItemRes");
            DropForeignKey("public.ChargeItemIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ChargeItemIxTok", "ResourceId", "public.ChargeItemRes");
            DropForeignKey("public.ChargeItemIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ChargeItemIxStr", "ResourceId", "public.ChargeItemRes");
            DropForeignKey("public.ChargeItemIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ChargeItemIxRef", "ResourceId", "public.ChargeItemRes");
            DropForeignKey("public.ChargeItemIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ChargeItemIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.ChargeItemIxQty", "ResourceId", "public.ChargeItemRes");
            DropForeignKey("public.ChargeItemIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ChargeItemIxDT", "ResourceId", "public.ChargeItemRes");
            DropForeignKey("public.ChargeItemIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ChargeItemRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.ChargeItemDefinitionIxUri", "ResourceId", "public.ChargeItemDefinitionRes");
            DropForeignKey("public.ChargeItemDefinitionIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ChargeItemDefinitionIxTok", "ResourceId", "public.ChargeItemDefinitionRes");
            DropForeignKey("public.ChargeItemDefinitionIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ChargeItemDefinitionIxStr", "ResourceId", "public.ChargeItemDefinitionRes");
            DropForeignKey("public.ChargeItemDefinitionIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ChargeItemDefinitionIxRef", "ResourceId", "public.ChargeItemDefinitionRes");
            DropForeignKey("public.ChargeItemDefinitionIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ChargeItemDefinitionIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.ChargeItemDefinitionIxQty", "ResourceId", "public.ChargeItemDefinitionRes");
            DropForeignKey("public.ChargeItemDefinitionIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ChargeItemDefinitionIxDT", "ResourceId", "public.ChargeItemDefinitionRes");
            DropForeignKey("public.ChargeItemDefinitionIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ChargeItemDefinitionRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.CareTeamIxUri", "ResourceId", "public.CareTeamRes");
            DropForeignKey("public.CareTeamIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CareTeamIxTok", "ResourceId", "public.CareTeamRes");
            DropForeignKey("public.CareTeamIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CareTeamIxStr", "ResourceId", "public.CareTeamRes");
            DropForeignKey("public.CareTeamIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CareTeamIxRef", "ResourceId", "public.CareTeamRes");
            DropForeignKey("public.CareTeamIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CareTeamIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.CareTeamIxQty", "ResourceId", "public.CareTeamRes");
            DropForeignKey("public.CareTeamIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CareTeamIxDT", "ResourceId", "public.CareTeamRes");
            DropForeignKey("public.CareTeamIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CareTeamRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.CarePlanIxUri", "ResourceId", "public.CarePlanRes");
            DropForeignKey("public.CarePlanIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CarePlanIxTok", "ResourceId", "public.CarePlanRes");
            DropForeignKey("public.CarePlanIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CarePlanIxStr", "ResourceId", "public.CarePlanRes");
            DropForeignKey("public.CarePlanIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CarePlanIxRef", "ResourceId", "public.CarePlanRes");
            DropForeignKey("public.CarePlanIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CarePlanIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.CarePlanIxQty", "ResourceId", "public.CarePlanRes");
            DropForeignKey("public.CarePlanIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CarePlanIxDT", "ResourceId", "public.CarePlanRes");
            DropForeignKey("public.CarePlanIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CarePlanRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.CapabilityStatementIxUri", "ResourceId", "public.CapabilityStatementRes");
            DropForeignKey("public.CapabilityStatementIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CapabilityStatementIxTok", "ResourceId", "public.CapabilityStatementRes");
            DropForeignKey("public.CapabilityStatementIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CapabilityStatementIxStr", "ResourceId", "public.CapabilityStatementRes");
            DropForeignKey("public.CapabilityStatementIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CapabilityStatementIxRef", "ResourceId", "public.CapabilityStatementRes");
            DropForeignKey("public.CapabilityStatementIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CapabilityStatementIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.CapabilityStatementIxQty", "ResourceId", "public.CapabilityStatementRes");
            DropForeignKey("public.CapabilityStatementIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CapabilityStatementIxDT", "ResourceId", "public.CapabilityStatementRes");
            DropForeignKey("public.CapabilityStatementIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CapabilityStatementRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.BundleIxUri", "ResourceId", "public.BundleRes");
            DropForeignKey("public.BundleIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.BundleIxTok", "ResourceId", "public.BundleRes");
            DropForeignKey("public.BundleIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.BundleIxStr", "ResourceId", "public.BundleRes");
            DropForeignKey("public.BundleIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.BundleIxRef", "ResourceId", "public.BundleRes");
            DropForeignKey("public.BundleIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.BundleIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.BundleIxQty", "ResourceId", "public.BundleRes");
            DropForeignKey("public.BundleIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.BundleIxDT", "ResourceId", "public.BundleRes");
            DropForeignKey("public.BundleIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.BundleRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.BodyStructureIxUri", "ResourceId", "public.BodyStructureRes");
            DropForeignKey("public.BodyStructureIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.BodyStructureIxTok", "ResourceId", "public.BodyStructureRes");
            DropForeignKey("public.BodyStructureIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.BodyStructureIxStr", "ResourceId", "public.BodyStructureRes");
            DropForeignKey("public.BodyStructureIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.BodyStructureIxRef", "ResourceId", "public.BodyStructureRes");
            DropForeignKey("public.BodyStructureIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.BodyStructureIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.BodyStructureIxQty", "ResourceId", "public.BodyStructureRes");
            DropForeignKey("public.BodyStructureIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.BodyStructureIxDT", "ResourceId", "public.BodyStructureRes");
            DropForeignKey("public.BodyStructureIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.BodyStructureRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.BiologicallyDerivedProductIxUri", "ResourceId", "public.BiologicallyDerivedProductRes");
            DropForeignKey("public.BiologicallyDerivedProductIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.BiologicallyDerivedProductIxTok", "ResourceId", "public.BiologicallyDerivedProductRes");
            DropForeignKey("public.BiologicallyDerivedProductIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.BiologicallyDerivedProductIxStr", "ResourceId", "public.BiologicallyDerivedProductRes");
            DropForeignKey("public.BiologicallyDerivedProductIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.BiologicallyDerivedProductIxRef", "ResourceId", "public.BiologicallyDerivedProductRes");
            DropForeignKey("public.BiologicallyDerivedProductIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.BiologicallyDerivedProductIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.BiologicallyDerivedProductIxQty", "ResourceId", "public.BiologicallyDerivedProductRes");
            DropForeignKey("public.BiologicallyDerivedProductIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.BiologicallyDerivedProductIxDT", "ResourceId", "public.BiologicallyDerivedProductRes");
            DropForeignKey("public.BiologicallyDerivedProductIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.BiologicallyDerivedProductRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.BinaryIxUri", "ResourceId", "public.BinaryRes");
            DropForeignKey("public.BinaryIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.BinaryIxTok", "ResourceId", "public.BinaryRes");
            DropForeignKey("public.BinaryIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.BinaryIxStr", "ResourceId", "public.BinaryRes");
            DropForeignKey("public.BinaryIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.BinaryIxRef", "ResourceId", "public.BinaryRes");
            DropForeignKey("public.BinaryIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.BinaryIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.BinaryIxQty", "ResourceId", "public.BinaryRes");
            DropForeignKey("public.BinaryIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.BinaryIxDT", "ResourceId", "public.BinaryRes");
            DropForeignKey("public.BinaryIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.BinaryRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.BasicIxUri", "ResourceId", "public.BasicRes");
            DropForeignKey("public.BasicIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.BasicIxTok", "ResourceId", "public.BasicRes");
            DropForeignKey("public.BasicIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.BasicIxStr", "ResourceId", "public.BasicRes");
            DropForeignKey("public.BasicIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.BasicIxRef", "ResourceId", "public.BasicRes");
            DropForeignKey("public.BasicIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.BasicIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.BasicIxQty", "ResourceId", "public.BasicRes");
            DropForeignKey("public.BasicIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.BasicIxDT", "ResourceId", "public.BasicRes");
            DropForeignKey("public.BasicIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.BasicRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.AuditEventIxUri", "ResourceId", "public.AuditEventRes");
            DropForeignKey("public.AuditEventIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.AuditEventIxTok", "ResourceId", "public.AuditEventRes");
            DropForeignKey("public.AuditEventIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.AuditEventIxStr", "ResourceId", "public.AuditEventRes");
            DropForeignKey("public.AuditEventIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.AuditEventIxRef", "ResourceId", "public.AuditEventRes");
            DropForeignKey("public.AuditEventIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.AuditEventIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.AuditEventIxQty", "ResourceId", "public.AuditEventRes");
            DropForeignKey("public.AuditEventIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.AuditEventIxDT", "ResourceId", "public.AuditEventRes");
            DropForeignKey("public.AuditEventIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.AuditEventRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.AppointmentResponseIxUri", "ResourceId", "public.AppointmentResponseRes");
            DropForeignKey("public.AppointmentResponseIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.AppointmentResponseIxTok", "ResourceId", "public.AppointmentResponseRes");
            DropForeignKey("public.AppointmentResponseIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.AppointmentResponseIxStr", "ResourceId", "public.AppointmentResponseRes");
            DropForeignKey("public.AppointmentResponseIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.AppointmentResponseIxRef", "ResourceId", "public.AppointmentResponseRes");
            DropForeignKey("public.AppointmentResponseIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.AppointmentResponseIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.AppointmentResponseIxQty", "ResourceId", "public.AppointmentResponseRes");
            DropForeignKey("public.AppointmentResponseIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.AppointmentResponseIxDT", "ResourceId", "public.AppointmentResponseRes");
            DropForeignKey("public.AppointmentResponseIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.AppointmentResponseRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.AppointmentIxUri", "ResourceId", "public.AppointmentRes");
            DropForeignKey("public.AppointmentIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.AppointmentIxTok", "ResourceId", "public.AppointmentRes");
            DropForeignKey("public.AppointmentIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.AppointmentIxStr", "ResourceId", "public.AppointmentRes");
            DropForeignKey("public.AppointmentIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.AppointmentIxRef", "ResourceId", "public.AppointmentRes");
            DropForeignKey("public.AppointmentIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.AppointmentIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.AppointmentIxQty", "ResourceId", "public.AppointmentRes");
            DropForeignKey("public.AppointmentIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.AppointmentIxDT", "ResourceId", "public.AppointmentRes");
            DropForeignKey("public.AppointmentIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.AppointmentRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.AllergyIntoleranceIxUri", "ResourceId", "public.AllergyIntoleranceRes");
            DropForeignKey("public.AllergyIntoleranceIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.AllergyIntoleranceIxTok", "ResourceId", "public.AllergyIntoleranceRes");
            DropForeignKey("public.AllergyIntoleranceIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.AllergyIntoleranceIxStr", "ResourceId", "public.AllergyIntoleranceRes");
            DropForeignKey("public.AllergyIntoleranceIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.AllergyIntoleranceIxRef", "ResourceId", "public.AllergyIntoleranceRes");
            DropForeignKey("public.AllergyIntoleranceIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.AllergyIntoleranceIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.AllergyIntoleranceIxQty", "ResourceId", "public.AllergyIntoleranceRes");
            DropForeignKey("public.AllergyIntoleranceIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.AllergyIntoleranceIxDT", "ResourceId", "public.AllergyIntoleranceRes");
            DropForeignKey("public.AllergyIntoleranceIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.AllergyIntoleranceRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.AdverseEventIxUri", "ResourceId", "public.AdverseEventRes");
            DropForeignKey("public.AdverseEventIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.AdverseEventIxTok", "ResourceId", "public.AdverseEventRes");
            DropForeignKey("public.AdverseEventIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.AdverseEventIxStr", "ResourceId", "public.AdverseEventRes");
            DropForeignKey("public.AdverseEventIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.AdverseEventIxRef", "ResourceId", "public.AdverseEventRes");
            DropForeignKey("public.AdverseEventIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.AdverseEventIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.AdverseEventIxQty", "ResourceId", "public.AdverseEventRes");
            DropForeignKey("public.AdverseEventIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.AdverseEventIxDT", "ResourceId", "public.AdverseEventRes");
            DropForeignKey("public.AdverseEventIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.AdverseEventRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.ActivityDefinitionIxUri", "ResourceId", "public.ActivityDefinitionRes");
            DropForeignKey("public.ActivityDefinitionIxUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ActivityDefinitionIxTok", "ResourceId", "public.ActivityDefinitionRes");
            DropForeignKey("public.ActivityDefinitionIxTok", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ActivityDefinitionIxStr", "ResourceId", "public.ActivityDefinitionRes");
            DropForeignKey("public.ActivityDefinitionIxStr", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ActivityDefinitionIxRef", "ResourceId", "public.ActivityDefinitionRes");
            DropForeignKey("public.ActivityDefinitionIxRef", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ActivityDefinitionIxRef", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.ActivityDefinitionIxQty", "ResourceId", "public.ActivityDefinitionRes");
            DropForeignKey("public.ActivityDefinitionIxQty", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ActivityDefinitionIxDT", "ResourceId", "public.ActivityDefinitionRes");
            DropForeignKey("public.ActivityDefinitionIxDT", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public._SParamResource", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public._SCompositePivot", "ParentServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public._SCompositePivot", "ChildServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ActivityDefinitionRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.AccountRes", "FhirReleaseId", "public._FhirRelease");
            DropIndex("public._CompartmentRes", "ix_CompartmentId");
            DropIndex("public._Compartment", "ix_CompartmentCode");
            DropIndex("public.AccountIxUri", new[] { "ResourceId" });
            DropIndex("public.AccountIxUri", "ix_SearchParamId");
            DropIndex("public.AccountIxUri", "ix_Uri");
            DropIndex("public.AccountIxTok", new[] { "ResourceId" });
            DropIndex("public.AccountIxTok", "ix_SearchParamId");
            DropIndex("public.AccountIxTok", "ix_System");
            DropIndex("public.AccountIxTok", "ix_Code");
            DropIndex("public.AccountIxStr", new[] { "ResourceId" });
            DropIndex("public.AccountIxStr", "ix_SearchParamId");
            DropIndex("public.AccountIxStr", "ix_String");
            DropIndex("public.AccountIxRef", new[] { "ResourceId" });
            DropIndex("public.AccountIxRef", "ix_SearchParamId");
            DropIndex("public.AccountIxRef", "ix_RefBaseUrlId");
            DropIndex("public.AccountIxRef", "ix_RefFhirId");
            DropIndex("public.AccountIxQty", new[] { "ResourceId" });
            DropIndex("public.AccountIxQty", "ix_SearchParamId");
            DropIndex("public.AccountIxQty", "ix_System");
            DropIndex("public.AccountIxQty", "ix_Code");
            DropIndex("public.AccountIxDT", new[] { "ResourceId" });
            DropIndex("public.AccountIxDT", "ix_SearchParamId");
            DropIndex("public.AccountIxDT", "ix_HighUtcDateTime");
            DropIndex("public.AccountIxDT", "ix_LowUtcDateTime");
            DropIndex("public.VisionPrescriptionIxUri", new[] { "ResourceId" });
            DropIndex("public.VisionPrescriptionIxUri", "ix_SearchParamId");
            DropIndex("public.VisionPrescriptionIxUri", "ix_Uri");
            DropIndex("public.VisionPrescriptionIxTok", new[] { "ResourceId" });
            DropIndex("public.VisionPrescriptionIxTok", "ix_SearchParamId");
            DropIndex("public.VisionPrescriptionIxTok", "ix_System");
            DropIndex("public.VisionPrescriptionIxTok", "ix_Code");
            DropIndex("public.VisionPrescriptionIxStr", new[] { "ResourceId" });
            DropIndex("public.VisionPrescriptionIxStr", "ix_SearchParamId");
            DropIndex("public.VisionPrescriptionIxStr", "ix_String");
            DropIndex("public.VisionPrescriptionIxRef", new[] { "ResourceId" });
            DropIndex("public.VisionPrescriptionIxRef", "ix_SearchParamId");
            DropIndex("public.VisionPrescriptionIxRef", "ix_RefBaseUrlId");
            DropIndex("public.VisionPrescriptionIxRef", "ix_RefFhirId");
            DropIndex("public.VisionPrescriptionIxQty", new[] { "ResourceId" });
            DropIndex("public.VisionPrescriptionIxQty", "ix_SearchParamId");
            DropIndex("public.VisionPrescriptionIxQty", "ix_System");
            DropIndex("public.VisionPrescriptionIxQty", "ix_Code");
            DropIndex("public.VisionPrescriptionIxDT", new[] { "ResourceId" });
            DropIndex("public.VisionPrescriptionIxDT", "ix_SearchParamId");
            DropIndex("public.VisionPrescriptionIxDT", "ix_HighUtcDateTime");
            DropIndex("public.VisionPrescriptionIxDT", "ix_LowUtcDateTime");
            DropIndex("public.VisionPrescriptionRes", new[] { "FhirReleaseId" });
            DropIndex("public.VisionPrescriptionRes", "ix_LastUpdated");
            DropIndex("public.VisionPrescriptionRes", "ix_IsDeleted");
            DropIndex("public.VisionPrescriptionRes", "uq_FhirIdAndVersionId");
            DropIndex("public.VisionPrescriptionRes", "ix_IsCurrent");
            DropIndex("public.VerificationResultIxUri", new[] { "ResourceId" });
            DropIndex("public.VerificationResultIxUri", "ix_SearchParamId");
            DropIndex("public.VerificationResultIxUri", "ix_Uri");
            DropIndex("public.VerificationResultIxTok", new[] { "ResourceId" });
            DropIndex("public.VerificationResultIxTok", "ix_SearchParamId");
            DropIndex("public.VerificationResultIxTok", "ix_System");
            DropIndex("public.VerificationResultIxTok", "ix_Code");
            DropIndex("public.VerificationResultIxStr", new[] { "ResourceId" });
            DropIndex("public.VerificationResultIxStr", "ix_SearchParamId");
            DropIndex("public.VerificationResultIxStr", "ix_String");
            DropIndex("public.VerificationResultIxRef", new[] { "ResourceId" });
            DropIndex("public.VerificationResultIxRef", "ix_SearchParamId");
            DropIndex("public.VerificationResultIxRef", "ix_RefBaseUrlId");
            DropIndex("public.VerificationResultIxRef", "ix_RefFhirId");
            DropIndex("public.VerificationResultIxQty", new[] { "ResourceId" });
            DropIndex("public.VerificationResultIxQty", "ix_SearchParamId");
            DropIndex("public.VerificationResultIxQty", "ix_System");
            DropIndex("public.VerificationResultIxQty", "ix_Code");
            DropIndex("public.VerificationResultIxDT", new[] { "ResourceId" });
            DropIndex("public.VerificationResultIxDT", "ix_SearchParamId");
            DropIndex("public.VerificationResultIxDT", "ix_HighUtcDateTime");
            DropIndex("public.VerificationResultIxDT", "ix_LowUtcDateTime");
            DropIndex("public.VerificationResultRes", new[] { "FhirReleaseId" });
            DropIndex("public.VerificationResultRes", "ix_LastUpdated");
            DropIndex("public.VerificationResultRes", "ix_IsDeleted");
            DropIndex("public.VerificationResultRes", "uq_FhirIdAndVersionId");
            DropIndex("public.VerificationResultRes", "ix_IsCurrent");
            DropIndex("public.ValueSetIxUri", new[] { "ResourceId" });
            DropIndex("public.ValueSetIxUri", "ix_SearchParamId");
            DropIndex("public.ValueSetIxUri", "ix_Uri");
            DropIndex("public.ValueSetIxTok", new[] { "ResourceId" });
            DropIndex("public.ValueSetIxTok", "ix_SearchParamId");
            DropIndex("public.ValueSetIxTok", "ix_System");
            DropIndex("public.ValueSetIxTok", "ix_Code");
            DropIndex("public.ValueSetIxStr", new[] { "ResourceId" });
            DropIndex("public.ValueSetIxStr", "ix_SearchParamId");
            DropIndex("public.ValueSetIxStr", "ix_String");
            DropIndex("public.ValueSetIxRef", new[] { "ResourceId" });
            DropIndex("public.ValueSetIxRef", "ix_SearchParamId");
            DropIndex("public.ValueSetIxRef", "ix_RefBaseUrlId");
            DropIndex("public.ValueSetIxRef", "ix_RefFhirId");
            DropIndex("public.ValueSetIxQty", new[] { "ResourceId" });
            DropIndex("public.ValueSetIxQty", "ix_SearchParamId");
            DropIndex("public.ValueSetIxQty", "ix_System");
            DropIndex("public.ValueSetIxQty", "ix_Code");
            DropIndex("public.ValueSetIxDT", new[] { "ResourceId" });
            DropIndex("public.ValueSetIxDT", "ix_SearchParamId");
            DropIndex("public.ValueSetIxDT", "ix_HighUtcDateTime");
            DropIndex("public.ValueSetIxDT", "ix_LowUtcDateTime");
            DropIndex("public.ValueSetRes", new[] { "FhirReleaseId" });
            DropIndex("public.ValueSetRes", "ix_LastUpdated");
            DropIndex("public.ValueSetRes", "ix_IsDeleted");
            DropIndex("public.ValueSetRes", "uq_FhirIdAndVersionId");
            DropIndex("public.ValueSetRes", "ix_IsCurrent");
            DropIndex("public.UserSessionIxUri", new[] { "ResourceId" });
            DropIndex("public.UserSessionIxUri", "ix_SearchParamId");
            DropIndex("public.UserSessionIxUri", "ix_Uri");
            DropIndex("public.UserSessionIxTok", new[] { "ResourceId" });
            DropIndex("public.UserSessionIxTok", "ix_SearchParamId");
            DropIndex("public.UserSessionIxTok", "ix_System");
            DropIndex("public.UserSessionIxTok", "ix_Code");
            DropIndex("public.UserSessionIxStr", new[] { "ResourceId" });
            DropIndex("public.UserSessionIxStr", "ix_SearchParamId");
            DropIndex("public.UserSessionIxStr", "ix_String");
            DropIndex("public.UserSessionIxRef", new[] { "ResourceId" });
            DropIndex("public.UserSessionIxRef", "ix_SearchParamId");
            DropIndex("public.UserSessionIxRef", "ix_RefBaseUrlId");
            DropIndex("public.UserSessionIxRef", "ix_RefFhirId");
            DropIndex("public.UserSessionIxQty", new[] { "ResourceId" });
            DropIndex("public.UserSessionIxQty", "ix_SearchParamId");
            DropIndex("public.UserSessionIxQty", "ix_System");
            DropIndex("public.UserSessionIxQty", "ix_Code");
            DropIndex("public.UserSessionIxDT", new[] { "ResourceId" });
            DropIndex("public.UserSessionIxDT", "ix_SearchParamId");
            DropIndex("public.UserSessionIxDT", "ix_HighUtcDateTime");
            DropIndex("public.UserSessionIxDT", "ix_LowUtcDateTime");
            DropIndex("public.UserSessionRes", new[] { "FhirReleaseId" });
            DropIndex("public.UserSessionRes", "ix_LastUpdated");
            DropIndex("public.UserSessionRes", "ix_IsDeleted");
            DropIndex("public.UserSessionRes", "uq_FhirIdAndVersionId");
            DropIndex("public.UserSessionRes", "ix_IsCurrent");
            DropIndex("public.TestScriptIxUri", new[] { "ResourceId" });
            DropIndex("public.TestScriptIxUri", "ix_SearchParamId");
            DropIndex("public.TestScriptIxUri", "ix_Uri");
            DropIndex("public.TestScriptIxTok", new[] { "ResourceId" });
            DropIndex("public.TestScriptIxTok", "ix_SearchParamId");
            DropIndex("public.TestScriptIxTok", "ix_System");
            DropIndex("public.TestScriptIxTok", "ix_Code");
            DropIndex("public.TestScriptIxStr", new[] { "ResourceId" });
            DropIndex("public.TestScriptIxStr", "ix_SearchParamId");
            DropIndex("public.TestScriptIxStr", "ix_String");
            DropIndex("public.TestScriptIxRef", new[] { "ResourceId" });
            DropIndex("public.TestScriptIxRef", "ix_SearchParamId");
            DropIndex("public.TestScriptIxRef", "ix_RefBaseUrlId");
            DropIndex("public.TestScriptIxRef", "ix_RefFhirId");
            DropIndex("public.TestScriptIxQty", new[] { "ResourceId" });
            DropIndex("public.TestScriptIxQty", "ix_SearchParamId");
            DropIndex("public.TestScriptIxQty", "ix_System");
            DropIndex("public.TestScriptIxQty", "ix_Code");
            DropIndex("public.TestScriptIxDT", new[] { "ResourceId" });
            DropIndex("public.TestScriptIxDT", "ix_SearchParamId");
            DropIndex("public.TestScriptIxDT", "ix_HighUtcDateTime");
            DropIndex("public.TestScriptIxDT", "ix_LowUtcDateTime");
            DropIndex("public.TestScriptRes", new[] { "FhirReleaseId" });
            DropIndex("public.TestScriptRes", "ix_LastUpdated");
            DropIndex("public.TestScriptRes", "ix_IsDeleted");
            DropIndex("public.TestScriptRes", "uq_FhirIdAndVersionId");
            DropIndex("public.TestScriptRes", "ix_IsCurrent");
            DropIndex("public.TestReportIxUri", new[] { "ResourceId" });
            DropIndex("public.TestReportIxUri", "ix_SearchParamId");
            DropIndex("public.TestReportIxUri", "ix_Uri");
            DropIndex("public.TestReportIxTok", new[] { "ResourceId" });
            DropIndex("public.TestReportIxTok", "ix_SearchParamId");
            DropIndex("public.TestReportIxTok", "ix_System");
            DropIndex("public.TestReportIxTok", "ix_Code");
            DropIndex("public.TestReportIxStr", new[] { "ResourceId" });
            DropIndex("public.TestReportIxStr", "ix_SearchParamId");
            DropIndex("public.TestReportIxStr", "ix_String");
            DropIndex("public.TestReportIxRef", new[] { "ResourceId" });
            DropIndex("public.TestReportIxRef", "ix_SearchParamId");
            DropIndex("public.TestReportIxRef", "ix_RefBaseUrlId");
            DropIndex("public.TestReportIxRef", "ix_RefFhirId");
            DropIndex("public.TestReportIxQty", new[] { "ResourceId" });
            DropIndex("public.TestReportIxQty", "ix_SearchParamId");
            DropIndex("public.TestReportIxQty", "ix_System");
            DropIndex("public.TestReportIxQty", "ix_Code");
            DropIndex("public.TestReportIxDT", new[] { "ResourceId" });
            DropIndex("public.TestReportIxDT", "ix_SearchParamId");
            DropIndex("public.TestReportIxDT", "ix_HighUtcDateTime");
            DropIndex("public.TestReportIxDT", "ix_LowUtcDateTime");
            DropIndex("public.TestReportRes", new[] { "FhirReleaseId" });
            DropIndex("public.TestReportRes", "ix_LastUpdated");
            DropIndex("public.TestReportRes", "ix_IsDeleted");
            DropIndex("public.TestReportRes", "uq_FhirIdAndVersionId");
            DropIndex("public.TestReportRes", "ix_IsCurrent");
            DropIndex("public.TerminologyCapabilitiesIxUri", new[] { "ResourceId" });
            DropIndex("public.TerminologyCapabilitiesIxUri", "ix_SearchParamId");
            DropIndex("public.TerminologyCapabilitiesIxUri", "ix_Uri");
            DropIndex("public.TerminologyCapabilitiesIxTok", new[] { "ResourceId" });
            DropIndex("public.TerminologyCapabilitiesIxTok", "ix_SearchParamId");
            DropIndex("public.TerminologyCapabilitiesIxTok", "ix_System");
            DropIndex("public.TerminologyCapabilitiesIxTok", "ix_Code");
            DropIndex("public.TerminologyCapabilitiesIxStr", new[] { "ResourceId" });
            DropIndex("public.TerminologyCapabilitiesIxStr", "ix_SearchParamId");
            DropIndex("public.TerminologyCapabilitiesIxStr", "ix_String");
            DropIndex("public.TerminologyCapabilitiesIxRef", new[] { "ResourceId" });
            DropIndex("public.TerminologyCapabilitiesIxRef", "ix_SearchParamId");
            DropIndex("public.TerminologyCapabilitiesIxRef", "ix_RefBaseUrlId");
            DropIndex("public.TerminologyCapabilitiesIxRef", "ix_RefFhirId");
            DropIndex("public.TerminologyCapabilitiesIxQty", new[] { "ResourceId" });
            DropIndex("public.TerminologyCapabilitiesIxQty", "ix_SearchParamId");
            DropIndex("public.TerminologyCapabilitiesIxQty", "ix_System");
            DropIndex("public.TerminologyCapabilitiesIxQty", "ix_Code");
            DropIndex("public.TerminologyCapabilitiesIxDT", new[] { "ResourceId" });
            DropIndex("public.TerminologyCapabilitiesIxDT", "ix_SearchParamId");
            DropIndex("public.TerminologyCapabilitiesIxDT", "ix_HighUtcDateTime");
            DropIndex("public.TerminologyCapabilitiesIxDT", "ix_LowUtcDateTime");
            DropIndex("public.TerminologyCapabilitiesRes", new[] { "FhirReleaseId" });
            DropIndex("public.TerminologyCapabilitiesRes", "ix_LastUpdated");
            DropIndex("public.TerminologyCapabilitiesRes", "ix_IsDeleted");
            DropIndex("public.TerminologyCapabilitiesRes", "uq_FhirIdAndVersionId");
            DropIndex("public.TerminologyCapabilitiesRes", "ix_IsCurrent");
            DropIndex("public.TaskIxUri", new[] { "ResourceId" });
            DropIndex("public.TaskIxUri", "ix_SearchParamId");
            DropIndex("public.TaskIxUri", "ix_Uri");
            DropIndex("public.TaskIxTok", new[] { "ResourceId" });
            DropIndex("public.TaskIxTok", "ix_SearchParamId");
            DropIndex("public.TaskIxTok", "ix_System");
            DropIndex("public.TaskIxTok", "ix_Code");
            DropIndex("public.TaskIxStr", new[] { "ResourceId" });
            DropIndex("public.TaskIxStr", "ix_SearchParamId");
            DropIndex("public.TaskIxStr", "ix_String");
            DropIndex("public.TaskIxRef", new[] { "ResourceId" });
            DropIndex("public.TaskIxRef", "ix_SearchParamId");
            DropIndex("public.TaskIxRef", "ix_RefBaseUrlId");
            DropIndex("public.TaskIxRef", "ix_RefFhirId");
            DropIndex("public.TaskIxQty", new[] { "ResourceId" });
            DropIndex("public.TaskIxQty", "ix_SearchParamId");
            DropIndex("public.TaskIxQty", "ix_System");
            DropIndex("public.TaskIxQty", "ix_Code");
            DropIndex("public.TaskIxDT", new[] { "ResourceId" });
            DropIndex("public.TaskIxDT", "ix_SearchParamId");
            DropIndex("public.TaskIxDT", "ix_HighUtcDateTime");
            DropIndex("public.TaskIxDT", "ix_LowUtcDateTime");
            DropIndex("public.TaskRes", new[] { "FhirReleaseId" });
            DropIndex("public.TaskRes", "ix_LastUpdated");
            DropIndex("public.TaskRes", "ix_IsDeleted");
            DropIndex("public.TaskRes", "uq_FhirIdAndVersionId");
            DropIndex("public.TaskRes", "ix_IsCurrent");
            DropIndex("public.SupplyRequestIxUri", new[] { "ResourceId" });
            DropIndex("public.SupplyRequestIxUri", "ix_SearchParamId");
            DropIndex("public.SupplyRequestIxUri", "ix_Uri");
            DropIndex("public.SupplyRequestIxTok", new[] { "ResourceId" });
            DropIndex("public.SupplyRequestIxTok", "ix_SearchParamId");
            DropIndex("public.SupplyRequestIxTok", "ix_System");
            DropIndex("public.SupplyRequestIxTok", "ix_Code");
            DropIndex("public.SupplyRequestIxStr", new[] { "ResourceId" });
            DropIndex("public.SupplyRequestIxStr", "ix_SearchParamId");
            DropIndex("public.SupplyRequestIxStr", "ix_String");
            DropIndex("public.SupplyRequestIxRef", new[] { "ResourceId" });
            DropIndex("public.SupplyRequestIxRef", "ix_SearchParamId");
            DropIndex("public.SupplyRequestIxRef", "ix_RefBaseUrlId");
            DropIndex("public.SupplyRequestIxRef", "ix_RefFhirId");
            DropIndex("public.SupplyRequestIxQty", new[] { "ResourceId" });
            DropIndex("public.SupplyRequestIxQty", "ix_SearchParamId");
            DropIndex("public.SupplyRequestIxQty", "ix_System");
            DropIndex("public.SupplyRequestIxQty", "ix_Code");
            DropIndex("public.SupplyRequestIxDT", new[] { "ResourceId" });
            DropIndex("public.SupplyRequestIxDT", "ix_SearchParamId");
            DropIndex("public.SupplyRequestIxDT", "ix_HighUtcDateTime");
            DropIndex("public.SupplyRequestIxDT", "ix_LowUtcDateTime");
            DropIndex("public.SupplyRequestRes", new[] { "FhirReleaseId" });
            DropIndex("public.SupplyRequestRes", "ix_LastUpdated");
            DropIndex("public.SupplyRequestRes", "ix_IsDeleted");
            DropIndex("public.SupplyRequestRes", "uq_FhirIdAndVersionId");
            DropIndex("public.SupplyRequestRes", "ix_IsCurrent");
            DropIndex("public.SupplyDeliveryIxUri", new[] { "ResourceId" });
            DropIndex("public.SupplyDeliveryIxUri", "ix_SearchParamId");
            DropIndex("public.SupplyDeliveryIxUri", "ix_Uri");
            DropIndex("public.SupplyDeliveryIxTok", new[] { "ResourceId" });
            DropIndex("public.SupplyDeliveryIxTok", "ix_SearchParamId");
            DropIndex("public.SupplyDeliveryIxTok", "ix_System");
            DropIndex("public.SupplyDeliveryIxTok", "ix_Code");
            DropIndex("public.SupplyDeliveryIxStr", new[] { "ResourceId" });
            DropIndex("public.SupplyDeliveryIxStr", "ix_SearchParamId");
            DropIndex("public.SupplyDeliveryIxStr", "ix_String");
            DropIndex("public.SupplyDeliveryIxRef", new[] { "ResourceId" });
            DropIndex("public.SupplyDeliveryIxRef", "ix_SearchParamId");
            DropIndex("public.SupplyDeliveryIxRef", "ix_RefBaseUrlId");
            DropIndex("public.SupplyDeliveryIxRef", "ix_RefFhirId");
            DropIndex("public.SupplyDeliveryIxQty", new[] { "ResourceId" });
            DropIndex("public.SupplyDeliveryIxQty", "ix_SearchParamId");
            DropIndex("public.SupplyDeliveryIxQty", "ix_System");
            DropIndex("public.SupplyDeliveryIxQty", "ix_Code");
            DropIndex("public.SupplyDeliveryIxDT", new[] { "ResourceId" });
            DropIndex("public.SupplyDeliveryIxDT", "ix_SearchParamId");
            DropIndex("public.SupplyDeliveryIxDT", "ix_HighUtcDateTime");
            DropIndex("public.SupplyDeliveryIxDT", "ix_LowUtcDateTime");
            DropIndex("public.SupplyDeliveryRes", new[] { "FhirReleaseId" });
            DropIndex("public.SupplyDeliveryRes", "ix_LastUpdated");
            DropIndex("public.SupplyDeliveryRes", "ix_IsDeleted");
            DropIndex("public.SupplyDeliveryRes", "uq_FhirIdAndVersionId");
            DropIndex("public.SupplyDeliveryRes", "ix_IsCurrent");
            DropIndex("public.SubstanceSpecificationIxUri", new[] { "ResourceId" });
            DropIndex("public.SubstanceSpecificationIxUri", "ix_SearchParamId");
            DropIndex("public.SubstanceSpecificationIxUri", "ix_Uri");
            DropIndex("public.SubstanceSpecificationIxTok", new[] { "ResourceId" });
            DropIndex("public.SubstanceSpecificationIxTok", "ix_SearchParamId");
            DropIndex("public.SubstanceSpecificationIxTok", "ix_System");
            DropIndex("public.SubstanceSpecificationIxTok", "ix_Code");
            DropIndex("public.SubstanceSpecificationIxStr", new[] { "ResourceId" });
            DropIndex("public.SubstanceSpecificationIxStr", "ix_SearchParamId");
            DropIndex("public.SubstanceSpecificationIxStr", "ix_String");
            DropIndex("public.SubstanceSpecificationIxRef", new[] { "ResourceId" });
            DropIndex("public.SubstanceSpecificationIxRef", "ix_SearchParamId");
            DropIndex("public.SubstanceSpecificationIxRef", "ix_RefBaseUrlId");
            DropIndex("public.SubstanceSpecificationIxRef", "ix_RefFhirId");
            DropIndex("public.SubstanceSpecificationIxQty", new[] { "ResourceId" });
            DropIndex("public.SubstanceSpecificationIxQty", "ix_SearchParamId");
            DropIndex("public.SubstanceSpecificationIxQty", "ix_System");
            DropIndex("public.SubstanceSpecificationIxQty", "ix_Code");
            DropIndex("public.SubstanceSpecificationIxDT", new[] { "ResourceId" });
            DropIndex("public.SubstanceSpecificationIxDT", "ix_SearchParamId");
            DropIndex("public.SubstanceSpecificationIxDT", "ix_HighUtcDateTime");
            DropIndex("public.SubstanceSpecificationIxDT", "ix_LowUtcDateTime");
            DropIndex("public.SubstanceSpecificationRes", new[] { "FhirReleaseId" });
            DropIndex("public.SubstanceSpecificationRes", "ix_LastUpdated");
            DropIndex("public.SubstanceSpecificationRes", "ix_IsDeleted");
            DropIndex("public.SubstanceSpecificationRes", "uq_FhirIdAndVersionId");
            DropIndex("public.SubstanceSpecificationRes", "ix_IsCurrent");
            DropIndex("public.SubstanceReferenceInformationIxUri", new[] { "ResourceId" });
            DropIndex("public.SubstanceReferenceInformationIxUri", "ix_SearchParamId");
            DropIndex("public.SubstanceReferenceInformationIxUri", "ix_Uri");
            DropIndex("public.SubstanceReferenceInformationIxTok", new[] { "ResourceId" });
            DropIndex("public.SubstanceReferenceInformationIxTok", "ix_SearchParamId");
            DropIndex("public.SubstanceReferenceInformationIxTok", "ix_System");
            DropIndex("public.SubstanceReferenceInformationIxTok", "ix_Code");
            DropIndex("public.SubstanceReferenceInformationIxStr", new[] { "ResourceId" });
            DropIndex("public.SubstanceReferenceInformationIxStr", "ix_SearchParamId");
            DropIndex("public.SubstanceReferenceInformationIxStr", "ix_String");
            DropIndex("public.SubstanceReferenceInformationIxRef", new[] { "ResourceId" });
            DropIndex("public.SubstanceReferenceInformationIxRef", "ix_SearchParamId");
            DropIndex("public.SubstanceReferenceInformationIxRef", "ix_RefBaseUrlId");
            DropIndex("public.SubstanceReferenceInformationIxRef", "ix_RefFhirId");
            DropIndex("public.SubstanceReferenceInformationIxQty", new[] { "ResourceId" });
            DropIndex("public.SubstanceReferenceInformationIxQty", "ix_SearchParamId");
            DropIndex("public.SubstanceReferenceInformationIxQty", "ix_System");
            DropIndex("public.SubstanceReferenceInformationIxQty", "ix_Code");
            DropIndex("public.SubstanceReferenceInformationIxDT", new[] { "ResourceId" });
            DropIndex("public.SubstanceReferenceInformationIxDT", "ix_SearchParamId");
            DropIndex("public.SubstanceReferenceInformationIxDT", "ix_HighUtcDateTime");
            DropIndex("public.SubstanceReferenceInformationIxDT", "ix_LowUtcDateTime");
            DropIndex("public.SubstanceReferenceInformationRes", new[] { "FhirReleaseId" });
            DropIndex("public.SubstanceReferenceInformationRes", "ix_LastUpdated");
            DropIndex("public.SubstanceReferenceInformationRes", "ix_IsDeleted");
            DropIndex("public.SubstanceReferenceInformationRes", "uq_FhirIdAndVersionId");
            DropIndex("public.SubstanceReferenceInformationRes", "ix_IsCurrent");
            DropIndex("public.SubstancePolymerIxUri", new[] { "ResourceId" });
            DropIndex("public.SubstancePolymerIxUri", "ix_SearchParamId");
            DropIndex("public.SubstancePolymerIxUri", "ix_Uri");
            DropIndex("public.SubstancePolymerIxTok", new[] { "ResourceId" });
            DropIndex("public.SubstancePolymerIxTok", "ix_SearchParamId");
            DropIndex("public.SubstancePolymerIxTok", "ix_System");
            DropIndex("public.SubstancePolymerIxTok", "ix_Code");
            DropIndex("public.SubstancePolymerIxStr", new[] { "ResourceId" });
            DropIndex("public.SubstancePolymerIxStr", "ix_SearchParamId");
            DropIndex("public.SubstancePolymerIxStr", "ix_String");
            DropIndex("public.SubstancePolymerIxRef", new[] { "ResourceId" });
            DropIndex("public.SubstancePolymerIxRef", "ix_SearchParamId");
            DropIndex("public.SubstancePolymerIxRef", "ix_RefBaseUrlId");
            DropIndex("public.SubstancePolymerIxRef", "ix_RefFhirId");
            DropIndex("public.SubstancePolymerIxQty", new[] { "ResourceId" });
            DropIndex("public.SubstancePolymerIxQty", "ix_SearchParamId");
            DropIndex("public.SubstancePolymerIxQty", "ix_System");
            DropIndex("public.SubstancePolymerIxQty", "ix_Code");
            DropIndex("public.SubstancePolymerIxDT", new[] { "ResourceId" });
            DropIndex("public.SubstancePolymerIxDT", "ix_SearchParamId");
            DropIndex("public.SubstancePolymerIxDT", "ix_HighUtcDateTime");
            DropIndex("public.SubstancePolymerIxDT", "ix_LowUtcDateTime");
            DropIndex("public.SubstancePolymerRes", new[] { "FhirReleaseId" });
            DropIndex("public.SubstancePolymerRes", "ix_LastUpdated");
            DropIndex("public.SubstancePolymerRes", "ix_IsDeleted");
            DropIndex("public.SubstancePolymerRes", "uq_FhirIdAndVersionId");
            DropIndex("public.SubstancePolymerRes", "ix_IsCurrent");
            DropIndex("public.SubstanceIxUri", new[] { "ResourceId" });
            DropIndex("public.SubstanceIxUri", "ix_SearchParamId");
            DropIndex("public.SubstanceIxUri", "ix_Uri");
            DropIndex("public.SubstanceIxTok", new[] { "ResourceId" });
            DropIndex("public.SubstanceIxTok", "ix_SearchParamId");
            DropIndex("public.SubstanceIxTok", "ix_System");
            DropIndex("public.SubstanceIxTok", "ix_Code");
            DropIndex("public.SubstanceIxStr", new[] { "ResourceId" });
            DropIndex("public.SubstanceIxStr", "ix_SearchParamId");
            DropIndex("public.SubstanceIxStr", "ix_String");
            DropIndex("public.SubstanceIxRef", new[] { "ResourceId" });
            DropIndex("public.SubstanceIxRef", "ix_SearchParamId");
            DropIndex("public.SubstanceIxRef", "ix_RefBaseUrlId");
            DropIndex("public.SubstanceIxRef", "ix_RefFhirId");
            DropIndex("public.SubstanceIxQty", new[] { "ResourceId" });
            DropIndex("public.SubstanceIxQty", "ix_SearchParamId");
            DropIndex("public.SubstanceIxQty", "ix_System");
            DropIndex("public.SubstanceIxQty", "ix_Code");
            DropIndex("public.SubstanceIxDT", new[] { "ResourceId" });
            DropIndex("public.SubstanceIxDT", "ix_SearchParamId");
            DropIndex("public.SubstanceIxDT", "ix_HighUtcDateTime");
            DropIndex("public.SubstanceIxDT", "ix_LowUtcDateTime");
            DropIndex("public.SubstanceRes", new[] { "FhirReleaseId" });
            DropIndex("public.SubstanceRes", "ix_LastUpdated");
            DropIndex("public.SubstanceRes", "ix_IsDeleted");
            DropIndex("public.SubstanceRes", "uq_FhirIdAndVersionId");
            DropIndex("public.SubstanceRes", "ix_IsCurrent");
            DropIndex("public.SubscriptionIxUri", new[] { "ResourceId" });
            DropIndex("public.SubscriptionIxUri", "ix_SearchParamId");
            DropIndex("public.SubscriptionIxUri", "ix_Uri");
            DropIndex("public.SubscriptionIxTok", new[] { "ResourceId" });
            DropIndex("public.SubscriptionIxTok", "ix_SearchParamId");
            DropIndex("public.SubscriptionIxTok", "ix_System");
            DropIndex("public.SubscriptionIxTok", "ix_Code");
            DropIndex("public.SubscriptionIxStr", new[] { "ResourceId" });
            DropIndex("public.SubscriptionIxStr", "ix_SearchParamId");
            DropIndex("public.SubscriptionIxStr", "ix_String");
            DropIndex("public.SubscriptionIxRef", new[] { "ResourceId" });
            DropIndex("public.SubscriptionIxRef", "ix_SearchParamId");
            DropIndex("public.SubscriptionIxRef", "ix_RefBaseUrlId");
            DropIndex("public.SubscriptionIxRef", "ix_RefFhirId");
            DropIndex("public.SubscriptionIxQty", new[] { "ResourceId" });
            DropIndex("public.SubscriptionIxQty", "ix_SearchParamId");
            DropIndex("public.SubscriptionIxQty", "ix_System");
            DropIndex("public.SubscriptionIxQty", "ix_Code");
            DropIndex("public.SubscriptionIxDT", new[] { "ResourceId" });
            DropIndex("public.SubscriptionIxDT", "ix_SearchParamId");
            DropIndex("public.SubscriptionIxDT", "ix_HighUtcDateTime");
            DropIndex("public.SubscriptionIxDT", "ix_LowUtcDateTime");
            DropIndex("public.SubscriptionRes", new[] { "FhirReleaseId" });
            DropIndex("public.SubscriptionRes", "ix_LastUpdated");
            DropIndex("public.SubscriptionRes", "ix_IsDeleted");
            DropIndex("public.SubscriptionRes", "uq_FhirIdAndVersionId");
            DropIndex("public.SubscriptionRes", "ix_IsCurrent");
            DropIndex("public.StructureMapIxUri", new[] { "ResourceId" });
            DropIndex("public.StructureMapIxUri", "ix_SearchParamId");
            DropIndex("public.StructureMapIxUri", "ix_Uri");
            DropIndex("public.StructureMapIxTok", new[] { "ResourceId" });
            DropIndex("public.StructureMapIxTok", "ix_SearchParamId");
            DropIndex("public.StructureMapIxTok", "ix_System");
            DropIndex("public.StructureMapIxTok", "ix_Code");
            DropIndex("public.StructureMapIxStr", new[] { "ResourceId" });
            DropIndex("public.StructureMapIxStr", "ix_SearchParamId");
            DropIndex("public.StructureMapIxStr", "ix_String");
            DropIndex("public.StructureMapIxRef", new[] { "ResourceId" });
            DropIndex("public.StructureMapIxRef", "ix_SearchParamId");
            DropIndex("public.StructureMapIxRef", "ix_RefBaseUrlId");
            DropIndex("public.StructureMapIxRef", "ix_RefFhirId");
            DropIndex("public.StructureMapIxQty", new[] { "ResourceId" });
            DropIndex("public.StructureMapIxQty", "ix_SearchParamId");
            DropIndex("public.StructureMapIxQty", "ix_System");
            DropIndex("public.StructureMapIxQty", "ix_Code");
            DropIndex("public.StructureMapIxDT", new[] { "ResourceId" });
            DropIndex("public.StructureMapIxDT", "ix_SearchParamId");
            DropIndex("public.StructureMapIxDT", "ix_HighUtcDateTime");
            DropIndex("public.StructureMapIxDT", "ix_LowUtcDateTime");
            DropIndex("public.StructureMapRes", new[] { "FhirReleaseId" });
            DropIndex("public.StructureMapRes", "ix_LastUpdated");
            DropIndex("public.StructureMapRes", "ix_IsDeleted");
            DropIndex("public.StructureMapRes", "uq_FhirIdAndVersionId");
            DropIndex("public.StructureMapRes", "ix_IsCurrent");
            DropIndex("public.StructureDefinitionIxUri", new[] { "ResourceId" });
            DropIndex("public.StructureDefinitionIxUri", "ix_SearchParamId");
            DropIndex("public.StructureDefinitionIxUri", "ix_Uri");
            DropIndex("public.StructureDefinitionIxTok", new[] { "ResourceId" });
            DropIndex("public.StructureDefinitionIxTok", "ix_SearchParamId");
            DropIndex("public.StructureDefinitionIxTok", "ix_System");
            DropIndex("public.StructureDefinitionIxTok", "ix_Code");
            DropIndex("public.StructureDefinitionIxStr", new[] { "ResourceId" });
            DropIndex("public.StructureDefinitionIxStr", "ix_SearchParamId");
            DropIndex("public.StructureDefinitionIxStr", "ix_String");
            DropIndex("public.StructureDefinitionIxRef", new[] { "ResourceId" });
            DropIndex("public.StructureDefinitionIxRef", "ix_SearchParamId");
            DropIndex("public.StructureDefinitionIxRef", "ix_RefBaseUrlId");
            DropIndex("public.StructureDefinitionIxRef", "ix_RefFhirId");
            DropIndex("public.StructureDefinitionIxQty", new[] { "ResourceId" });
            DropIndex("public.StructureDefinitionIxQty", "ix_SearchParamId");
            DropIndex("public.StructureDefinitionIxQty", "ix_System");
            DropIndex("public.StructureDefinitionIxQty", "ix_Code");
            DropIndex("public.StructureDefinitionIxDT", new[] { "ResourceId" });
            DropIndex("public.StructureDefinitionIxDT", "ix_SearchParamId");
            DropIndex("public.StructureDefinitionIxDT", "ix_HighUtcDateTime");
            DropIndex("public.StructureDefinitionIxDT", "ix_LowUtcDateTime");
            DropIndex("public.StructureDefinitionRes", new[] { "FhirReleaseId" });
            DropIndex("public.StructureDefinitionRes", "ix_LastUpdated");
            DropIndex("public.StructureDefinitionRes", "ix_IsDeleted");
            DropIndex("public.StructureDefinitionRes", "uq_FhirIdAndVersionId");
            DropIndex("public.StructureDefinitionRes", "ix_IsCurrent");
            DropIndex("public.SpecimenIxUri", new[] { "ResourceId" });
            DropIndex("public.SpecimenIxUri", "ix_SearchParamId");
            DropIndex("public.SpecimenIxUri", "ix_Uri");
            DropIndex("public.SpecimenIxTok", new[] { "ResourceId" });
            DropIndex("public.SpecimenIxTok", "ix_SearchParamId");
            DropIndex("public.SpecimenIxTok", "ix_System");
            DropIndex("public.SpecimenIxTok", "ix_Code");
            DropIndex("public.SpecimenIxStr", new[] { "ResourceId" });
            DropIndex("public.SpecimenIxStr", "ix_SearchParamId");
            DropIndex("public.SpecimenIxStr", "ix_String");
            DropIndex("public.SpecimenIxRef", new[] { "ResourceId" });
            DropIndex("public.SpecimenIxRef", "ix_SearchParamId");
            DropIndex("public.SpecimenIxRef", "ix_RefBaseUrlId");
            DropIndex("public.SpecimenIxRef", "ix_RefFhirId");
            DropIndex("public.SpecimenIxQty", new[] { "ResourceId" });
            DropIndex("public.SpecimenIxQty", "ix_SearchParamId");
            DropIndex("public.SpecimenIxQty", "ix_System");
            DropIndex("public.SpecimenIxQty", "ix_Code");
            DropIndex("public.SpecimenIxDT", new[] { "ResourceId" });
            DropIndex("public.SpecimenIxDT", "ix_SearchParamId");
            DropIndex("public.SpecimenIxDT", "ix_HighUtcDateTime");
            DropIndex("public.SpecimenIxDT", "ix_LowUtcDateTime");
            DropIndex("public.SpecimenRes", new[] { "FhirReleaseId" });
            DropIndex("public.SpecimenRes", "ix_LastUpdated");
            DropIndex("public.SpecimenRes", "ix_IsDeleted");
            DropIndex("public.SpecimenRes", "uq_FhirIdAndVersionId");
            DropIndex("public.SpecimenRes", "ix_IsCurrent");
            DropIndex("public.SpecimenDefinitionIxUri", new[] { "ResourceId" });
            DropIndex("public.SpecimenDefinitionIxUri", "ix_SearchParamId");
            DropIndex("public.SpecimenDefinitionIxUri", "ix_Uri");
            DropIndex("public.SpecimenDefinitionIxTok", new[] { "ResourceId" });
            DropIndex("public.SpecimenDefinitionIxTok", "ix_SearchParamId");
            DropIndex("public.SpecimenDefinitionIxTok", "ix_System");
            DropIndex("public.SpecimenDefinitionIxTok", "ix_Code");
            DropIndex("public.SpecimenDefinitionIxStr", new[] { "ResourceId" });
            DropIndex("public.SpecimenDefinitionIxStr", "ix_SearchParamId");
            DropIndex("public.SpecimenDefinitionIxStr", "ix_String");
            DropIndex("public.SpecimenDefinitionIxRef", new[] { "ResourceId" });
            DropIndex("public.SpecimenDefinitionIxRef", "ix_SearchParamId");
            DropIndex("public.SpecimenDefinitionIxRef", "ix_RefBaseUrlId");
            DropIndex("public.SpecimenDefinitionIxRef", "ix_RefFhirId");
            DropIndex("public.SpecimenDefinitionIxQty", new[] { "ResourceId" });
            DropIndex("public.SpecimenDefinitionIxQty", "ix_SearchParamId");
            DropIndex("public.SpecimenDefinitionIxQty", "ix_System");
            DropIndex("public.SpecimenDefinitionIxQty", "ix_Code");
            DropIndex("public.SpecimenDefinitionIxDT", new[] { "ResourceId" });
            DropIndex("public.SpecimenDefinitionIxDT", "ix_SearchParamId");
            DropIndex("public.SpecimenDefinitionIxDT", "ix_HighUtcDateTime");
            DropIndex("public.SpecimenDefinitionIxDT", "ix_LowUtcDateTime");
            DropIndex("public.SpecimenDefinitionRes", new[] { "FhirReleaseId" });
            DropIndex("public.SpecimenDefinitionRes", "ix_LastUpdated");
            DropIndex("public.SpecimenDefinitionRes", "ix_IsDeleted");
            DropIndex("public.SpecimenDefinitionRes", "uq_FhirIdAndVersionId");
            DropIndex("public.SpecimenDefinitionRes", "ix_IsCurrent");
            DropIndex("public.SlotIxUri", new[] { "ResourceId" });
            DropIndex("public.SlotIxUri", "ix_SearchParamId");
            DropIndex("public.SlotIxUri", "ix_Uri");
            DropIndex("public.SlotIxTok", new[] { "ResourceId" });
            DropIndex("public.SlotIxTok", "ix_SearchParamId");
            DropIndex("public.SlotIxTok", "ix_System");
            DropIndex("public.SlotIxTok", "ix_Code");
            DropIndex("public.SlotIxStr", new[] { "ResourceId" });
            DropIndex("public.SlotIxStr", "ix_SearchParamId");
            DropIndex("public.SlotIxStr", "ix_String");
            DropIndex("public.SlotIxRef", new[] { "ResourceId" });
            DropIndex("public.SlotIxRef", "ix_SearchParamId");
            DropIndex("public.SlotIxRef", "ix_RefBaseUrlId");
            DropIndex("public.SlotIxRef", "ix_RefFhirId");
            DropIndex("public.SlotIxQty", new[] { "ResourceId" });
            DropIndex("public.SlotIxQty", "ix_SearchParamId");
            DropIndex("public.SlotIxQty", "ix_System");
            DropIndex("public.SlotIxQty", "ix_Code");
            DropIndex("public.SlotIxDT", new[] { "ResourceId" });
            DropIndex("public.SlotIxDT", "ix_SearchParamId");
            DropIndex("public.SlotIxDT", "ix_HighUtcDateTime");
            DropIndex("public.SlotIxDT", "ix_LowUtcDateTime");
            DropIndex("public.SlotRes", new[] { "FhirReleaseId" });
            DropIndex("public.SlotRes", "ix_LastUpdated");
            DropIndex("public.SlotRes", "ix_IsDeleted");
            DropIndex("public.SlotRes", "uq_FhirIdAndVersionId");
            DropIndex("public.SlotRes", "ix_IsCurrent");
            DropIndex("public.ServiceRequestIxUri", new[] { "ResourceId" });
            DropIndex("public.ServiceRequestIxUri", "ix_SearchParamId");
            DropIndex("public.ServiceRequestIxUri", "ix_Uri");
            DropIndex("public.ServiceRequestIxTok", new[] { "ResourceId" });
            DropIndex("public.ServiceRequestIxTok", "ix_SearchParamId");
            DropIndex("public.ServiceRequestIxTok", "ix_System");
            DropIndex("public.ServiceRequestIxTok", "ix_Code");
            DropIndex("public.ServiceRequestIxStr", new[] { "ResourceId" });
            DropIndex("public.ServiceRequestIxStr", "ix_SearchParamId");
            DropIndex("public.ServiceRequestIxStr", "ix_String");
            DropIndex("public.ServiceRequestIxRef", new[] { "ResourceId" });
            DropIndex("public.ServiceRequestIxRef", "ix_SearchParamId");
            DropIndex("public.ServiceRequestIxRef", "ix_RefBaseUrlId");
            DropIndex("public.ServiceRequestIxRef", "ix_RefFhirId");
            DropIndex("public.ServiceRequestIxQty", new[] { "ResourceId" });
            DropIndex("public.ServiceRequestIxQty", "ix_SearchParamId");
            DropIndex("public.ServiceRequestIxQty", "ix_System");
            DropIndex("public.ServiceRequestIxQty", "ix_Code");
            DropIndex("public.ServiceRequestIxDT", new[] { "ResourceId" });
            DropIndex("public.ServiceRequestIxDT", "ix_SearchParamId");
            DropIndex("public.ServiceRequestIxDT", "ix_HighUtcDateTime");
            DropIndex("public.ServiceRequestIxDT", "ix_LowUtcDateTime");
            DropIndex("public.ServiceRequestRes", new[] { "FhirReleaseId" });
            DropIndex("public.ServiceRequestRes", "ix_LastUpdated");
            DropIndex("public.ServiceRequestRes", "ix_IsDeleted");
            DropIndex("public.ServiceRequestRes", "uq_FhirIdAndVersionId");
            DropIndex("public.ServiceRequestRes", "ix_IsCurrent");
            DropIndex("public.SequenceIxUri", new[] { "ResourceId" });
            DropIndex("public.SequenceIxUri", "ix_SearchParamId");
            DropIndex("public.SequenceIxUri", "ix_Uri");
            DropIndex("public.SequenceIxTok", new[] { "ResourceId" });
            DropIndex("public.SequenceIxTok", "ix_SearchParamId");
            DropIndex("public.SequenceIxTok", "ix_System");
            DropIndex("public.SequenceIxTok", "ix_Code");
            DropIndex("public.SequenceIxStr", new[] { "ResourceId" });
            DropIndex("public.SequenceIxStr", "ix_SearchParamId");
            DropIndex("public.SequenceIxStr", "ix_String");
            DropIndex("public.SequenceIxRef", new[] { "ResourceId" });
            DropIndex("public.SequenceIxRef", "ix_SearchParamId");
            DropIndex("public.SequenceIxRef", "ix_RefBaseUrlId");
            DropIndex("public.SequenceIxRef", "ix_RefFhirId");
            DropIndex("public.SequenceIxQty", new[] { "ResourceId" });
            DropIndex("public.SequenceIxQty", "ix_SearchParamId");
            DropIndex("public.SequenceIxQty", "ix_System");
            DropIndex("public.SequenceIxQty", "ix_Code");
            DropIndex("public.SequenceIxDT", new[] { "ResourceId" });
            DropIndex("public.SequenceIxDT", "ix_SearchParamId");
            DropIndex("public.SequenceIxDT", "ix_HighUtcDateTime");
            DropIndex("public.SequenceIxDT", "ix_LowUtcDateTime");
            DropIndex("public.SequenceRes", new[] { "FhirReleaseId" });
            DropIndex("public.SequenceRes", "ix_LastUpdated");
            DropIndex("public.SequenceRes", "ix_IsDeleted");
            DropIndex("public.SequenceRes", "uq_FhirIdAndVersionId");
            DropIndex("public.SequenceRes", "ix_IsCurrent");
            DropIndex("public.SearchParameterIxUri", new[] { "ResourceId" });
            DropIndex("public.SearchParameterIxUri", "ix_SearchParamId");
            DropIndex("public.SearchParameterIxUri", "ix_Uri");
            DropIndex("public.SearchParameterIxTok", new[] { "ResourceId" });
            DropIndex("public.SearchParameterIxTok", "ix_SearchParamId");
            DropIndex("public.SearchParameterIxTok", "ix_System");
            DropIndex("public.SearchParameterIxTok", "ix_Code");
            DropIndex("public.SearchParameterIxStr", new[] { "ResourceId" });
            DropIndex("public.SearchParameterIxStr", "ix_SearchParamId");
            DropIndex("public.SearchParameterIxStr", "ix_String");
            DropIndex("public.SearchParameterIxRef", new[] { "ResourceId" });
            DropIndex("public.SearchParameterIxRef", "ix_SearchParamId");
            DropIndex("public.SearchParameterIxRef", "ix_RefBaseUrlId");
            DropIndex("public.SearchParameterIxRef", "ix_RefFhirId");
            DropIndex("public.SearchParameterIxQty", new[] { "ResourceId" });
            DropIndex("public.SearchParameterIxQty", "ix_SearchParamId");
            DropIndex("public.SearchParameterIxQty", "ix_System");
            DropIndex("public.SearchParameterIxQty", "ix_Code");
            DropIndex("public.SearchParameterIxDT", new[] { "ResourceId" });
            DropIndex("public.SearchParameterIxDT", "ix_SearchParamId");
            DropIndex("public.SearchParameterIxDT", "ix_HighUtcDateTime");
            DropIndex("public.SearchParameterIxDT", "ix_LowUtcDateTime");
            DropIndex("public.SearchParameterRes", new[] { "FhirReleaseId" });
            DropIndex("public.SearchParameterRes", "ix_LastUpdated");
            DropIndex("public.SearchParameterRes", "ix_IsDeleted");
            DropIndex("public.SearchParameterRes", "uq_FhirIdAndVersionId");
            DropIndex("public.SearchParameterRes", "ix_IsCurrent");
            DropIndex("public.ScheduleIxUri", new[] { "ResourceId" });
            DropIndex("public.ScheduleIxUri", "ix_SearchParamId");
            DropIndex("public.ScheduleIxUri", "ix_Uri");
            DropIndex("public.ScheduleIxTok", new[] { "ResourceId" });
            DropIndex("public.ScheduleIxTok", "ix_SearchParamId");
            DropIndex("public.ScheduleIxTok", "ix_System");
            DropIndex("public.ScheduleIxTok", "ix_Code");
            DropIndex("public.ScheduleIxStr", new[] { "ResourceId" });
            DropIndex("public.ScheduleIxStr", "ix_SearchParamId");
            DropIndex("public.ScheduleIxStr", "ix_String");
            DropIndex("public.ScheduleIxRef", new[] { "ResourceId" });
            DropIndex("public.ScheduleIxRef", "ix_SearchParamId");
            DropIndex("public.ScheduleIxRef", "ix_RefBaseUrlId");
            DropIndex("public.ScheduleIxRef", "ix_RefFhirId");
            DropIndex("public.ScheduleIxQty", new[] { "ResourceId" });
            DropIndex("public.ScheduleIxQty", "ix_SearchParamId");
            DropIndex("public.ScheduleIxQty", "ix_System");
            DropIndex("public.ScheduleIxQty", "ix_Code");
            DropIndex("public.ScheduleIxDT", new[] { "ResourceId" });
            DropIndex("public.ScheduleIxDT", "ix_SearchParamId");
            DropIndex("public.ScheduleIxDT", "ix_HighUtcDateTime");
            DropIndex("public.ScheduleIxDT", "ix_LowUtcDateTime");
            DropIndex("public.ScheduleRes", new[] { "FhirReleaseId" });
            DropIndex("public.ScheduleRes", "ix_LastUpdated");
            DropIndex("public.ScheduleRes", "ix_IsDeleted");
            DropIndex("public.ScheduleRes", "uq_FhirIdAndVersionId");
            DropIndex("public.ScheduleRes", "ix_IsCurrent");
            DropIndex("public.RiskAssessmentIxUri", new[] { "ResourceId" });
            DropIndex("public.RiskAssessmentIxUri", "ix_SearchParamId");
            DropIndex("public.RiskAssessmentIxUri", "ix_Uri");
            DropIndex("public.RiskAssessmentIxTok", new[] { "ResourceId" });
            DropIndex("public.RiskAssessmentIxTok", "ix_SearchParamId");
            DropIndex("public.RiskAssessmentIxTok", "ix_System");
            DropIndex("public.RiskAssessmentIxTok", "ix_Code");
            DropIndex("public.RiskAssessmentIxStr", new[] { "ResourceId" });
            DropIndex("public.RiskAssessmentIxStr", "ix_SearchParamId");
            DropIndex("public.RiskAssessmentIxStr", "ix_String");
            DropIndex("public.RiskAssessmentIxRef", new[] { "ResourceId" });
            DropIndex("public.RiskAssessmentIxRef", "ix_SearchParamId");
            DropIndex("public.RiskAssessmentIxRef", "ix_RefBaseUrlId");
            DropIndex("public.RiskAssessmentIxRef", "ix_RefFhirId");
            DropIndex("public.RiskAssessmentIxQty", new[] { "ResourceId" });
            DropIndex("public.RiskAssessmentIxQty", "ix_SearchParamId");
            DropIndex("public.RiskAssessmentIxQty", "ix_System");
            DropIndex("public.RiskAssessmentIxQty", "ix_Code");
            DropIndex("public.RiskAssessmentIxDT", new[] { "ResourceId" });
            DropIndex("public.RiskAssessmentIxDT", "ix_SearchParamId");
            DropIndex("public.RiskAssessmentIxDT", "ix_HighUtcDateTime");
            DropIndex("public.RiskAssessmentIxDT", "ix_LowUtcDateTime");
            DropIndex("public.RiskAssessmentRes", new[] { "FhirReleaseId" });
            DropIndex("public.RiskAssessmentRes", "ix_LastUpdated");
            DropIndex("public.RiskAssessmentRes", "ix_IsDeleted");
            DropIndex("public.RiskAssessmentRes", "uq_FhirIdAndVersionId");
            DropIndex("public.RiskAssessmentRes", "ix_IsCurrent");
            DropIndex("public.ResearchSubjectIxUri", new[] { "ResourceId" });
            DropIndex("public.ResearchSubjectIxUri", "ix_SearchParamId");
            DropIndex("public.ResearchSubjectIxUri", "ix_Uri");
            DropIndex("public.ResearchSubjectIxTok", new[] { "ResourceId" });
            DropIndex("public.ResearchSubjectIxTok", "ix_SearchParamId");
            DropIndex("public.ResearchSubjectIxTok", "ix_System");
            DropIndex("public.ResearchSubjectIxTok", "ix_Code");
            DropIndex("public.ResearchSubjectIxStr", new[] { "ResourceId" });
            DropIndex("public.ResearchSubjectIxStr", "ix_SearchParamId");
            DropIndex("public.ResearchSubjectIxStr", "ix_String");
            DropIndex("public.ResearchSubjectIxRef", new[] { "ResourceId" });
            DropIndex("public.ResearchSubjectIxRef", "ix_SearchParamId");
            DropIndex("public.ResearchSubjectIxRef", "ix_RefBaseUrlId");
            DropIndex("public.ResearchSubjectIxRef", "ix_RefFhirId");
            DropIndex("public.ResearchSubjectIxQty", new[] { "ResourceId" });
            DropIndex("public.ResearchSubjectIxQty", "ix_SearchParamId");
            DropIndex("public.ResearchSubjectIxQty", "ix_System");
            DropIndex("public.ResearchSubjectIxQty", "ix_Code");
            DropIndex("public.ResearchSubjectIxDT", new[] { "ResourceId" });
            DropIndex("public.ResearchSubjectIxDT", "ix_SearchParamId");
            DropIndex("public.ResearchSubjectIxDT", "ix_HighUtcDateTime");
            DropIndex("public.ResearchSubjectIxDT", "ix_LowUtcDateTime");
            DropIndex("public.ResearchSubjectRes", new[] { "FhirReleaseId" });
            DropIndex("public.ResearchSubjectRes", "ix_LastUpdated");
            DropIndex("public.ResearchSubjectRes", "ix_IsDeleted");
            DropIndex("public.ResearchSubjectRes", "uq_FhirIdAndVersionId");
            DropIndex("public.ResearchSubjectRes", "ix_IsCurrent");
            DropIndex("public.ResearchStudyIxUri", new[] { "ResourceId" });
            DropIndex("public.ResearchStudyIxUri", "ix_SearchParamId");
            DropIndex("public.ResearchStudyIxUri", "ix_Uri");
            DropIndex("public.ResearchStudyIxTok", new[] { "ResourceId" });
            DropIndex("public.ResearchStudyIxTok", "ix_SearchParamId");
            DropIndex("public.ResearchStudyIxTok", "ix_System");
            DropIndex("public.ResearchStudyIxTok", "ix_Code");
            DropIndex("public.ResearchStudyIxStr", new[] { "ResourceId" });
            DropIndex("public.ResearchStudyIxStr", "ix_SearchParamId");
            DropIndex("public.ResearchStudyIxStr", "ix_String");
            DropIndex("public.ResearchStudyIxRef", new[] { "ResourceId" });
            DropIndex("public.ResearchStudyIxRef", "ix_SearchParamId");
            DropIndex("public.ResearchStudyIxRef", "ix_RefBaseUrlId");
            DropIndex("public.ResearchStudyIxRef", "ix_RefFhirId");
            DropIndex("public.ResearchStudyIxQty", new[] { "ResourceId" });
            DropIndex("public.ResearchStudyIxQty", "ix_SearchParamId");
            DropIndex("public.ResearchStudyIxQty", "ix_System");
            DropIndex("public.ResearchStudyIxQty", "ix_Code");
            DropIndex("public.ResearchStudyIxDT", new[] { "ResourceId" });
            DropIndex("public.ResearchStudyIxDT", "ix_SearchParamId");
            DropIndex("public.ResearchStudyIxDT", "ix_HighUtcDateTime");
            DropIndex("public.ResearchStudyIxDT", "ix_LowUtcDateTime");
            DropIndex("public.ResearchStudyRes", new[] { "FhirReleaseId" });
            DropIndex("public.ResearchStudyRes", "ix_LastUpdated");
            DropIndex("public.ResearchStudyRes", "ix_IsDeleted");
            DropIndex("public.ResearchStudyRes", "uq_FhirIdAndVersionId");
            DropIndex("public.ResearchStudyRes", "ix_IsCurrent");
            DropIndex("public.RequestGroupIxUri", new[] { "ResourceId" });
            DropIndex("public.RequestGroupIxUri", "ix_SearchParamId");
            DropIndex("public.RequestGroupIxUri", "ix_Uri");
            DropIndex("public.RequestGroupIxTok", new[] { "ResourceId" });
            DropIndex("public.RequestGroupIxTok", "ix_SearchParamId");
            DropIndex("public.RequestGroupIxTok", "ix_System");
            DropIndex("public.RequestGroupIxTok", "ix_Code");
            DropIndex("public.RequestGroupIxStr", new[] { "ResourceId" });
            DropIndex("public.RequestGroupIxStr", "ix_SearchParamId");
            DropIndex("public.RequestGroupIxStr", "ix_String");
            DropIndex("public.RequestGroupIxRef", new[] { "ResourceId" });
            DropIndex("public.RequestGroupIxRef", "ix_SearchParamId");
            DropIndex("public.RequestGroupIxRef", "ix_RefBaseUrlId");
            DropIndex("public.RequestGroupIxRef", "ix_RefFhirId");
            DropIndex("public.RequestGroupIxQty", new[] { "ResourceId" });
            DropIndex("public.RequestGroupIxQty", "ix_SearchParamId");
            DropIndex("public.RequestGroupIxQty", "ix_System");
            DropIndex("public.RequestGroupIxQty", "ix_Code");
            DropIndex("public.RequestGroupIxDT", new[] { "ResourceId" });
            DropIndex("public.RequestGroupIxDT", "ix_SearchParamId");
            DropIndex("public.RequestGroupIxDT", "ix_HighUtcDateTime");
            DropIndex("public.RequestGroupIxDT", "ix_LowUtcDateTime");
            DropIndex("public.RequestGroupRes", new[] { "FhirReleaseId" });
            DropIndex("public.RequestGroupRes", "ix_LastUpdated");
            DropIndex("public.RequestGroupRes", "ix_IsDeleted");
            DropIndex("public.RequestGroupRes", "uq_FhirIdAndVersionId");
            DropIndex("public.RequestGroupRes", "ix_IsCurrent");
            DropIndex("public.RelatedPersonIxUri", new[] { "ResourceId" });
            DropIndex("public.RelatedPersonIxUri", "ix_SearchParamId");
            DropIndex("public.RelatedPersonIxUri", "ix_Uri");
            DropIndex("public.RelatedPersonIxTok", new[] { "ResourceId" });
            DropIndex("public.RelatedPersonIxTok", "ix_SearchParamId");
            DropIndex("public.RelatedPersonIxTok", "ix_System");
            DropIndex("public.RelatedPersonIxTok", "ix_Code");
            DropIndex("public.RelatedPersonIxStr", new[] { "ResourceId" });
            DropIndex("public.RelatedPersonIxStr", "ix_SearchParamId");
            DropIndex("public.RelatedPersonIxStr", "ix_String");
            DropIndex("public.RelatedPersonIxRef", new[] { "ResourceId" });
            DropIndex("public.RelatedPersonIxRef", "ix_SearchParamId");
            DropIndex("public.RelatedPersonIxRef", "ix_RefBaseUrlId");
            DropIndex("public.RelatedPersonIxRef", "ix_RefFhirId");
            DropIndex("public.RelatedPersonIxQty", new[] { "ResourceId" });
            DropIndex("public.RelatedPersonIxQty", "ix_SearchParamId");
            DropIndex("public.RelatedPersonIxQty", "ix_System");
            DropIndex("public.RelatedPersonIxQty", "ix_Code");
            DropIndex("public.RelatedPersonIxDT", new[] { "ResourceId" });
            DropIndex("public.RelatedPersonIxDT", "ix_SearchParamId");
            DropIndex("public.RelatedPersonIxDT", "ix_HighUtcDateTime");
            DropIndex("public.RelatedPersonIxDT", "ix_LowUtcDateTime");
            DropIndex("public.RelatedPersonRes", new[] { "FhirReleaseId" });
            DropIndex("public.RelatedPersonRes", "ix_LastUpdated");
            DropIndex("public.RelatedPersonRes", "ix_IsDeleted");
            DropIndex("public.RelatedPersonRes", "uq_FhirIdAndVersionId");
            DropIndex("public.RelatedPersonRes", "ix_IsCurrent");
            DropIndex("public.QuestionnaireResponseIxUri", new[] { "ResourceId" });
            DropIndex("public.QuestionnaireResponseIxUri", "ix_SearchParamId");
            DropIndex("public.QuestionnaireResponseIxUri", "ix_Uri");
            DropIndex("public.QuestionnaireResponseIxTok", new[] { "ResourceId" });
            DropIndex("public.QuestionnaireResponseIxTok", "ix_SearchParamId");
            DropIndex("public.QuestionnaireResponseIxTok", "ix_System");
            DropIndex("public.QuestionnaireResponseIxTok", "ix_Code");
            DropIndex("public.QuestionnaireResponseIxStr", new[] { "ResourceId" });
            DropIndex("public.QuestionnaireResponseIxStr", "ix_SearchParamId");
            DropIndex("public.QuestionnaireResponseIxStr", "ix_String");
            DropIndex("public.QuestionnaireResponseIxRef", new[] { "ResourceId" });
            DropIndex("public.QuestionnaireResponseIxRef", "ix_SearchParamId");
            DropIndex("public.QuestionnaireResponseIxRef", "ix_RefBaseUrlId");
            DropIndex("public.QuestionnaireResponseIxRef", "ix_RefFhirId");
            DropIndex("public.QuestionnaireResponseIxQty", new[] { "ResourceId" });
            DropIndex("public.QuestionnaireResponseIxQty", "ix_SearchParamId");
            DropIndex("public.QuestionnaireResponseIxQty", "ix_System");
            DropIndex("public.QuestionnaireResponseIxQty", "ix_Code");
            DropIndex("public.QuestionnaireResponseIxDT", new[] { "ResourceId" });
            DropIndex("public.QuestionnaireResponseIxDT", "ix_SearchParamId");
            DropIndex("public.QuestionnaireResponseIxDT", "ix_HighUtcDateTime");
            DropIndex("public.QuestionnaireResponseIxDT", "ix_LowUtcDateTime");
            DropIndex("public.QuestionnaireResponseRes", new[] { "FhirReleaseId" });
            DropIndex("public.QuestionnaireResponseRes", "ix_LastUpdated");
            DropIndex("public.QuestionnaireResponseRes", "ix_IsDeleted");
            DropIndex("public.QuestionnaireResponseRes", "uq_FhirIdAndVersionId");
            DropIndex("public.QuestionnaireResponseRes", "ix_IsCurrent");
            DropIndex("public.QuestionnaireIxUri", new[] { "ResourceId" });
            DropIndex("public.QuestionnaireIxUri", "ix_SearchParamId");
            DropIndex("public.QuestionnaireIxUri", "ix_Uri");
            DropIndex("public.QuestionnaireIxTok", new[] { "ResourceId" });
            DropIndex("public.QuestionnaireIxTok", "ix_SearchParamId");
            DropIndex("public.QuestionnaireIxTok", "ix_System");
            DropIndex("public.QuestionnaireIxTok", "ix_Code");
            DropIndex("public.QuestionnaireIxStr", new[] { "ResourceId" });
            DropIndex("public.QuestionnaireIxStr", "ix_SearchParamId");
            DropIndex("public.QuestionnaireIxStr", "ix_String");
            DropIndex("public.QuestionnaireIxRef", new[] { "ResourceId" });
            DropIndex("public.QuestionnaireIxRef", "ix_SearchParamId");
            DropIndex("public.QuestionnaireIxRef", "ix_RefBaseUrlId");
            DropIndex("public.QuestionnaireIxRef", "ix_RefFhirId");
            DropIndex("public.QuestionnaireIxQty", new[] { "ResourceId" });
            DropIndex("public.QuestionnaireIxQty", "ix_SearchParamId");
            DropIndex("public.QuestionnaireIxQty", "ix_System");
            DropIndex("public.QuestionnaireIxQty", "ix_Code");
            DropIndex("public.QuestionnaireIxDT", new[] { "ResourceId" });
            DropIndex("public.QuestionnaireIxDT", "ix_SearchParamId");
            DropIndex("public.QuestionnaireIxDT", "ix_HighUtcDateTime");
            DropIndex("public.QuestionnaireIxDT", "ix_LowUtcDateTime");
            DropIndex("public.QuestionnaireRes", new[] { "FhirReleaseId" });
            DropIndex("public.QuestionnaireRes", "ix_LastUpdated");
            DropIndex("public.QuestionnaireRes", "ix_IsDeleted");
            DropIndex("public.QuestionnaireRes", "uq_FhirIdAndVersionId");
            DropIndex("public.QuestionnaireRes", "ix_IsCurrent");
            DropIndex("public.ProvenanceIxUri", new[] { "ResourceId" });
            DropIndex("public.ProvenanceIxUri", "ix_SearchParamId");
            DropIndex("public.ProvenanceIxUri", "ix_Uri");
            DropIndex("public.ProvenanceIxTok", new[] { "ResourceId" });
            DropIndex("public.ProvenanceIxTok", "ix_SearchParamId");
            DropIndex("public.ProvenanceIxTok", "ix_System");
            DropIndex("public.ProvenanceIxTok", "ix_Code");
            DropIndex("public.ProvenanceIxStr", new[] { "ResourceId" });
            DropIndex("public.ProvenanceIxStr", "ix_SearchParamId");
            DropIndex("public.ProvenanceIxStr", "ix_String");
            DropIndex("public.ProvenanceIxRef", new[] { "ResourceId" });
            DropIndex("public.ProvenanceIxRef", "ix_SearchParamId");
            DropIndex("public.ProvenanceIxRef", "ix_RefBaseUrlId");
            DropIndex("public.ProvenanceIxRef", "ix_RefFhirId");
            DropIndex("public.ProvenanceIxQty", new[] { "ResourceId" });
            DropIndex("public.ProvenanceIxQty", "ix_SearchParamId");
            DropIndex("public.ProvenanceIxQty", "ix_System");
            DropIndex("public.ProvenanceIxQty", "ix_Code");
            DropIndex("public.ProvenanceIxDT", new[] { "ResourceId" });
            DropIndex("public.ProvenanceIxDT", "ix_SearchParamId");
            DropIndex("public.ProvenanceIxDT", "ix_HighUtcDateTime");
            DropIndex("public.ProvenanceIxDT", "ix_LowUtcDateTime");
            DropIndex("public.ProvenanceRes", new[] { "FhirReleaseId" });
            DropIndex("public.ProvenanceRes", "ix_LastUpdated");
            DropIndex("public.ProvenanceRes", "ix_IsDeleted");
            DropIndex("public.ProvenanceRes", "uq_FhirIdAndVersionId");
            DropIndex("public.ProvenanceRes", "ix_IsCurrent");
            DropIndex("public.ProcessResponseIxUri", new[] { "ResourceId" });
            DropIndex("public.ProcessResponseIxUri", "ix_SearchParamId");
            DropIndex("public.ProcessResponseIxUri", "ix_Uri");
            DropIndex("public.ProcessResponseIxTok", new[] { "ResourceId" });
            DropIndex("public.ProcessResponseIxTok", "ix_SearchParamId");
            DropIndex("public.ProcessResponseIxTok", "ix_System");
            DropIndex("public.ProcessResponseIxTok", "ix_Code");
            DropIndex("public.ProcessResponseIxStr", new[] { "ResourceId" });
            DropIndex("public.ProcessResponseIxStr", "ix_SearchParamId");
            DropIndex("public.ProcessResponseIxStr", "ix_String");
            DropIndex("public.ProcessResponseIxRef", new[] { "ResourceId" });
            DropIndex("public.ProcessResponseIxRef", "ix_SearchParamId");
            DropIndex("public.ProcessResponseIxRef", "ix_RefBaseUrlId");
            DropIndex("public.ProcessResponseIxRef", "ix_RefFhirId");
            DropIndex("public.ProcessResponseIxQty", new[] { "ResourceId" });
            DropIndex("public.ProcessResponseIxQty", "ix_SearchParamId");
            DropIndex("public.ProcessResponseIxQty", "ix_System");
            DropIndex("public.ProcessResponseIxQty", "ix_Code");
            DropIndex("public.ProcessResponseIxDT", new[] { "ResourceId" });
            DropIndex("public.ProcessResponseIxDT", "ix_SearchParamId");
            DropIndex("public.ProcessResponseIxDT", "ix_HighUtcDateTime");
            DropIndex("public.ProcessResponseIxDT", "ix_LowUtcDateTime");
            DropIndex("public.ProcessResponseRes", new[] { "FhirReleaseId" });
            DropIndex("public.ProcessResponseRes", "ix_LastUpdated");
            DropIndex("public.ProcessResponseRes", "ix_IsDeleted");
            DropIndex("public.ProcessResponseRes", "uq_FhirIdAndVersionId");
            DropIndex("public.ProcessResponseRes", "ix_IsCurrent");
            DropIndex("public.ProcessRequestIxUri", new[] { "ResourceId" });
            DropIndex("public.ProcessRequestIxUri", "ix_SearchParamId");
            DropIndex("public.ProcessRequestIxUri", "ix_Uri");
            DropIndex("public.ProcessRequestIxTok", new[] { "ResourceId" });
            DropIndex("public.ProcessRequestIxTok", "ix_SearchParamId");
            DropIndex("public.ProcessRequestIxTok", "ix_System");
            DropIndex("public.ProcessRequestIxTok", "ix_Code");
            DropIndex("public.ProcessRequestIxStr", new[] { "ResourceId" });
            DropIndex("public.ProcessRequestIxStr", "ix_SearchParamId");
            DropIndex("public.ProcessRequestIxStr", "ix_String");
            DropIndex("public.ProcessRequestIxRef", new[] { "ResourceId" });
            DropIndex("public.ProcessRequestIxRef", "ix_SearchParamId");
            DropIndex("public.ProcessRequestIxRef", "ix_RefBaseUrlId");
            DropIndex("public.ProcessRequestIxRef", "ix_RefFhirId");
            DropIndex("public.ProcessRequestIxQty", new[] { "ResourceId" });
            DropIndex("public.ProcessRequestIxQty", "ix_SearchParamId");
            DropIndex("public.ProcessRequestIxQty", "ix_System");
            DropIndex("public.ProcessRequestIxQty", "ix_Code");
            DropIndex("public.ProcessRequestIxDT", new[] { "ResourceId" });
            DropIndex("public.ProcessRequestIxDT", "ix_SearchParamId");
            DropIndex("public.ProcessRequestIxDT", "ix_HighUtcDateTime");
            DropIndex("public.ProcessRequestIxDT", "ix_LowUtcDateTime");
            DropIndex("public.ProcessRequestRes", new[] { "FhirReleaseId" });
            DropIndex("public.ProcessRequestRes", "ix_LastUpdated");
            DropIndex("public.ProcessRequestRes", "ix_IsDeleted");
            DropIndex("public.ProcessRequestRes", "uq_FhirIdAndVersionId");
            DropIndex("public.ProcessRequestRes", "ix_IsCurrent");
            DropIndex("public.ProcedureIxUri", new[] { "ResourceId" });
            DropIndex("public.ProcedureIxUri", "ix_SearchParamId");
            DropIndex("public.ProcedureIxUri", "ix_Uri");
            DropIndex("public.ProcedureIxTok", new[] { "ResourceId" });
            DropIndex("public.ProcedureIxTok", "ix_SearchParamId");
            DropIndex("public.ProcedureIxTok", "ix_System");
            DropIndex("public.ProcedureIxTok", "ix_Code");
            DropIndex("public.ProcedureIxStr", new[] { "ResourceId" });
            DropIndex("public.ProcedureIxStr", "ix_SearchParamId");
            DropIndex("public.ProcedureIxStr", "ix_String");
            DropIndex("public.ProcedureIxRef", new[] { "ResourceId" });
            DropIndex("public.ProcedureIxRef", "ix_SearchParamId");
            DropIndex("public.ProcedureIxRef", "ix_RefBaseUrlId");
            DropIndex("public.ProcedureIxRef", "ix_RefFhirId");
            DropIndex("public.ProcedureIxQty", new[] { "ResourceId" });
            DropIndex("public.ProcedureIxQty", "ix_SearchParamId");
            DropIndex("public.ProcedureIxQty", "ix_System");
            DropIndex("public.ProcedureIxQty", "ix_Code");
            DropIndex("public.ProcedureIxDT", new[] { "ResourceId" });
            DropIndex("public.ProcedureIxDT", "ix_SearchParamId");
            DropIndex("public.ProcedureIxDT", "ix_HighUtcDateTime");
            DropIndex("public.ProcedureIxDT", "ix_LowUtcDateTime");
            DropIndex("public.ProcedureRes", new[] { "FhirReleaseId" });
            DropIndex("public.ProcedureRes", "ix_LastUpdated");
            DropIndex("public.ProcedureRes", "ix_IsDeleted");
            DropIndex("public.ProcedureRes", "uq_FhirIdAndVersionId");
            DropIndex("public.ProcedureRes", "ix_IsCurrent");
            DropIndex("public.PractitionerRoleIxUri", new[] { "ResourceId" });
            DropIndex("public.PractitionerRoleIxUri", "ix_SearchParamId");
            DropIndex("public.PractitionerRoleIxUri", "ix_Uri");
            DropIndex("public.PractitionerRoleIxTok", new[] { "ResourceId" });
            DropIndex("public.PractitionerRoleIxTok", "ix_SearchParamId");
            DropIndex("public.PractitionerRoleIxTok", "ix_System");
            DropIndex("public.PractitionerRoleIxTok", "ix_Code");
            DropIndex("public.PractitionerRoleIxStr", new[] { "ResourceId" });
            DropIndex("public.PractitionerRoleIxStr", "ix_SearchParamId");
            DropIndex("public.PractitionerRoleIxStr", "ix_String");
            DropIndex("public.PractitionerRoleIxRef", new[] { "ResourceId" });
            DropIndex("public.PractitionerRoleIxRef", "ix_SearchParamId");
            DropIndex("public.PractitionerRoleIxRef", "ix_RefBaseUrlId");
            DropIndex("public.PractitionerRoleIxRef", "ix_RefFhirId");
            DropIndex("public.PractitionerRoleIxQty", new[] { "ResourceId" });
            DropIndex("public.PractitionerRoleIxQty", "ix_SearchParamId");
            DropIndex("public.PractitionerRoleIxQty", "ix_System");
            DropIndex("public.PractitionerRoleIxQty", "ix_Code");
            DropIndex("public.PractitionerRoleIxDT", new[] { "ResourceId" });
            DropIndex("public.PractitionerRoleIxDT", "ix_SearchParamId");
            DropIndex("public.PractitionerRoleIxDT", "ix_HighUtcDateTime");
            DropIndex("public.PractitionerRoleIxDT", "ix_LowUtcDateTime");
            DropIndex("public.PractitionerRoleRes", new[] { "FhirReleaseId" });
            DropIndex("public.PractitionerRoleRes", "ix_LastUpdated");
            DropIndex("public.PractitionerRoleRes", "ix_IsDeleted");
            DropIndex("public.PractitionerRoleRes", "uq_FhirIdAndVersionId");
            DropIndex("public.PractitionerRoleRes", "ix_IsCurrent");
            DropIndex("public.PractitionerIxUri", new[] { "ResourceId" });
            DropIndex("public.PractitionerIxUri", "ix_SearchParamId");
            DropIndex("public.PractitionerIxUri", "ix_Uri");
            DropIndex("public.PractitionerIxTok", new[] { "ResourceId" });
            DropIndex("public.PractitionerIxTok", "ix_SearchParamId");
            DropIndex("public.PractitionerIxTok", "ix_System");
            DropIndex("public.PractitionerIxTok", "ix_Code");
            DropIndex("public.PractitionerIxStr", new[] { "ResourceId" });
            DropIndex("public.PractitionerIxStr", "ix_SearchParamId");
            DropIndex("public.PractitionerIxStr", "ix_String");
            DropIndex("public.PractitionerIxRef", new[] { "ResourceId" });
            DropIndex("public.PractitionerIxRef", "ix_SearchParamId");
            DropIndex("public.PractitionerIxRef", "ix_RefBaseUrlId");
            DropIndex("public.PractitionerIxRef", "ix_RefFhirId");
            DropIndex("public.PractitionerIxQty", new[] { "ResourceId" });
            DropIndex("public.PractitionerIxQty", "ix_SearchParamId");
            DropIndex("public.PractitionerIxQty", "ix_System");
            DropIndex("public.PractitionerIxQty", "ix_Code");
            DropIndex("public.PractitionerIxDT", new[] { "ResourceId" });
            DropIndex("public.PractitionerIxDT", "ix_SearchParamId");
            DropIndex("public.PractitionerIxDT", "ix_HighUtcDateTime");
            DropIndex("public.PractitionerIxDT", "ix_LowUtcDateTime");
            DropIndex("public.PractitionerRes", new[] { "FhirReleaseId" });
            DropIndex("public.PractitionerRes", "ix_LastUpdated");
            DropIndex("public.PractitionerRes", "ix_IsDeleted");
            DropIndex("public.PractitionerRes", "uq_FhirIdAndVersionId");
            DropIndex("public.PractitionerRes", "ix_IsCurrent");
            DropIndex("public.PlanDefinitionIxUri", new[] { "ResourceId" });
            DropIndex("public.PlanDefinitionIxUri", "ix_SearchParamId");
            DropIndex("public.PlanDefinitionIxUri", "ix_Uri");
            DropIndex("public.PlanDefinitionIxTok", new[] { "ResourceId" });
            DropIndex("public.PlanDefinitionIxTok", "ix_SearchParamId");
            DropIndex("public.PlanDefinitionIxTok", "ix_System");
            DropIndex("public.PlanDefinitionIxTok", "ix_Code");
            DropIndex("public.PlanDefinitionIxStr", new[] { "ResourceId" });
            DropIndex("public.PlanDefinitionIxStr", "ix_SearchParamId");
            DropIndex("public.PlanDefinitionIxStr", "ix_String");
            DropIndex("public.PlanDefinitionIxRef", new[] { "ResourceId" });
            DropIndex("public.PlanDefinitionIxRef", "ix_SearchParamId");
            DropIndex("public.PlanDefinitionIxRef", "ix_RefBaseUrlId");
            DropIndex("public.PlanDefinitionIxRef", "ix_RefFhirId");
            DropIndex("public.PlanDefinitionIxQty", new[] { "ResourceId" });
            DropIndex("public.PlanDefinitionIxQty", "ix_SearchParamId");
            DropIndex("public.PlanDefinitionIxQty", "ix_System");
            DropIndex("public.PlanDefinitionIxQty", "ix_Code");
            DropIndex("public.PlanDefinitionIxDT", new[] { "ResourceId" });
            DropIndex("public.PlanDefinitionIxDT", "ix_SearchParamId");
            DropIndex("public.PlanDefinitionIxDT", "ix_HighUtcDateTime");
            DropIndex("public.PlanDefinitionIxDT", "ix_LowUtcDateTime");
            DropIndex("public.PlanDefinitionRes", new[] { "FhirReleaseId" });
            DropIndex("public.PlanDefinitionRes", "ix_LastUpdated");
            DropIndex("public.PlanDefinitionRes", "ix_IsDeleted");
            DropIndex("public.PlanDefinitionRes", "uq_FhirIdAndVersionId");
            DropIndex("public.PlanDefinitionRes", "ix_IsCurrent");
            DropIndex("public.PersonIxUri", new[] { "ResourceId" });
            DropIndex("public.PersonIxUri", "ix_SearchParamId");
            DropIndex("public.PersonIxUri", "ix_Uri");
            DropIndex("public.PersonIxTok", new[] { "ResourceId" });
            DropIndex("public.PersonIxTok", "ix_SearchParamId");
            DropIndex("public.PersonIxTok", "ix_System");
            DropIndex("public.PersonIxTok", "ix_Code");
            DropIndex("public.PersonIxStr", new[] { "ResourceId" });
            DropIndex("public.PersonIxStr", "ix_SearchParamId");
            DropIndex("public.PersonIxStr", "ix_String");
            DropIndex("public.PersonIxRef", new[] { "ResourceId" });
            DropIndex("public.PersonIxRef", "ix_SearchParamId");
            DropIndex("public.PersonIxRef", "ix_RefBaseUrlId");
            DropIndex("public.PersonIxRef", "ix_RefFhirId");
            DropIndex("public.PersonIxQty", new[] { "ResourceId" });
            DropIndex("public.PersonIxQty", "ix_SearchParamId");
            DropIndex("public.PersonIxQty", "ix_System");
            DropIndex("public.PersonIxQty", "ix_Code");
            DropIndex("public.PersonIxDT", new[] { "ResourceId" });
            DropIndex("public.PersonIxDT", "ix_SearchParamId");
            DropIndex("public.PersonIxDT", "ix_HighUtcDateTime");
            DropIndex("public.PersonIxDT", "ix_LowUtcDateTime");
            DropIndex("public.PersonRes", new[] { "FhirReleaseId" });
            DropIndex("public.PersonRes", "ix_LastUpdated");
            DropIndex("public.PersonRes", "ix_IsDeleted");
            DropIndex("public.PersonRes", "uq_FhirIdAndVersionId");
            DropIndex("public.PersonRes", "ix_IsCurrent");
            DropIndex("public.PaymentReconciliationIxUri", new[] { "ResourceId" });
            DropIndex("public.PaymentReconciliationIxUri", "ix_SearchParamId");
            DropIndex("public.PaymentReconciliationIxUri", "ix_Uri");
            DropIndex("public.PaymentReconciliationIxTok", new[] { "ResourceId" });
            DropIndex("public.PaymentReconciliationIxTok", "ix_SearchParamId");
            DropIndex("public.PaymentReconciliationIxTok", "ix_System");
            DropIndex("public.PaymentReconciliationIxTok", "ix_Code");
            DropIndex("public.PaymentReconciliationIxStr", new[] { "ResourceId" });
            DropIndex("public.PaymentReconciliationIxStr", "ix_SearchParamId");
            DropIndex("public.PaymentReconciliationIxStr", "ix_String");
            DropIndex("public.PaymentReconciliationIxRef", new[] { "ResourceId" });
            DropIndex("public.PaymentReconciliationIxRef", "ix_SearchParamId");
            DropIndex("public.PaymentReconciliationIxRef", "ix_RefBaseUrlId");
            DropIndex("public.PaymentReconciliationIxRef", "ix_RefFhirId");
            DropIndex("public.PaymentReconciliationIxQty", new[] { "ResourceId" });
            DropIndex("public.PaymentReconciliationIxQty", "ix_SearchParamId");
            DropIndex("public.PaymentReconciliationIxQty", "ix_System");
            DropIndex("public.PaymentReconciliationIxQty", "ix_Code");
            DropIndex("public.PaymentReconciliationIxDT", new[] { "ResourceId" });
            DropIndex("public.PaymentReconciliationIxDT", "ix_SearchParamId");
            DropIndex("public.PaymentReconciliationIxDT", "ix_HighUtcDateTime");
            DropIndex("public.PaymentReconciliationIxDT", "ix_LowUtcDateTime");
            DropIndex("public.PaymentReconciliationRes", new[] { "FhirReleaseId" });
            DropIndex("public.PaymentReconciliationRes", "ix_LastUpdated");
            DropIndex("public.PaymentReconciliationRes", "ix_IsDeleted");
            DropIndex("public.PaymentReconciliationRes", "uq_FhirIdAndVersionId");
            DropIndex("public.PaymentReconciliationRes", "ix_IsCurrent");
            DropIndex("public.PaymentNoticeIxUri", new[] { "ResourceId" });
            DropIndex("public.PaymentNoticeIxUri", "ix_SearchParamId");
            DropIndex("public.PaymentNoticeIxUri", "ix_Uri");
            DropIndex("public.PaymentNoticeIxTok", new[] { "ResourceId" });
            DropIndex("public.PaymentNoticeIxTok", "ix_SearchParamId");
            DropIndex("public.PaymentNoticeIxTok", "ix_System");
            DropIndex("public.PaymentNoticeIxTok", "ix_Code");
            DropIndex("public.PaymentNoticeIxStr", new[] { "ResourceId" });
            DropIndex("public.PaymentNoticeIxStr", "ix_SearchParamId");
            DropIndex("public.PaymentNoticeIxStr", "ix_String");
            DropIndex("public.PaymentNoticeIxRef", new[] { "ResourceId" });
            DropIndex("public.PaymentNoticeIxRef", "ix_SearchParamId");
            DropIndex("public.PaymentNoticeIxRef", "ix_RefBaseUrlId");
            DropIndex("public.PaymentNoticeIxRef", "ix_RefFhirId");
            DropIndex("public.PaymentNoticeIxQty", new[] { "ResourceId" });
            DropIndex("public.PaymentNoticeIxQty", "ix_SearchParamId");
            DropIndex("public.PaymentNoticeIxQty", "ix_System");
            DropIndex("public.PaymentNoticeIxQty", "ix_Code");
            DropIndex("public.PaymentNoticeIxDT", new[] { "ResourceId" });
            DropIndex("public.PaymentNoticeIxDT", "ix_SearchParamId");
            DropIndex("public.PaymentNoticeIxDT", "ix_HighUtcDateTime");
            DropIndex("public.PaymentNoticeIxDT", "ix_LowUtcDateTime");
            DropIndex("public.PaymentNoticeRes", new[] { "FhirReleaseId" });
            DropIndex("public.PaymentNoticeRes", "ix_LastUpdated");
            DropIndex("public.PaymentNoticeRes", "ix_IsDeleted");
            DropIndex("public.PaymentNoticeRes", "uq_FhirIdAndVersionId");
            DropIndex("public.PaymentNoticeRes", "ix_IsCurrent");
            DropIndex("public.PatientIxUri", new[] { "ResourceId" });
            DropIndex("public.PatientIxUri", "ix_SearchParamId");
            DropIndex("public.PatientIxUri", "ix_Uri");
            DropIndex("public.PatientIxTok", new[] { "ResourceId" });
            DropIndex("public.PatientIxTok", "ix_SearchParamId");
            DropIndex("public.PatientIxTok", "ix_System");
            DropIndex("public.PatientIxTok", "ix_Code");
            DropIndex("public.PatientIxStr", new[] { "ResourceId" });
            DropIndex("public.PatientIxStr", "ix_SearchParamId");
            DropIndex("public.PatientIxStr", "ix_String");
            DropIndex("public.PatientIxRef", new[] { "ResourceId" });
            DropIndex("public.PatientIxRef", "ix_SearchParamId");
            DropIndex("public.PatientIxRef", "ix_RefBaseUrlId");
            DropIndex("public.PatientIxRef", "ix_RefFhirId");
            DropIndex("public.PatientIxQty", new[] { "ResourceId" });
            DropIndex("public.PatientIxQty", "ix_SearchParamId");
            DropIndex("public.PatientIxQty", "ix_System");
            DropIndex("public.PatientIxQty", "ix_Code");
            DropIndex("public.PatientIxDT", new[] { "ResourceId" });
            DropIndex("public.PatientIxDT", "ix_SearchParamId");
            DropIndex("public.PatientIxDT", "ix_HighUtcDateTime");
            DropIndex("public.PatientIxDT", "ix_LowUtcDateTime");
            DropIndex("public.PatientRes", new[] { "FhirReleaseId" });
            DropIndex("public.PatientRes", "ix_LastUpdated");
            DropIndex("public.PatientRes", "ix_IsDeleted");
            DropIndex("public.PatientRes", "uq_FhirIdAndVersionId");
            DropIndex("public.PatientRes", "ix_IsCurrent");
            DropIndex("public.ParametersIxUri", new[] { "ResourceId" });
            DropIndex("public.ParametersIxUri", "ix_SearchParamId");
            DropIndex("public.ParametersIxUri", "ix_Uri");
            DropIndex("public.ParametersIxTok", new[] { "ResourceId" });
            DropIndex("public.ParametersIxTok", "ix_SearchParamId");
            DropIndex("public.ParametersIxTok", "ix_System");
            DropIndex("public.ParametersIxTok", "ix_Code");
            DropIndex("public.ParametersIxStr", new[] { "ResourceId" });
            DropIndex("public.ParametersIxStr", "ix_SearchParamId");
            DropIndex("public.ParametersIxStr", "ix_String");
            DropIndex("public.ParametersIxRef", new[] { "ResourceId" });
            DropIndex("public.ParametersIxRef", "ix_SearchParamId");
            DropIndex("public.ParametersIxRef", "ix_RefBaseUrlId");
            DropIndex("public.ParametersIxRef", "ix_RefFhirId");
            DropIndex("public.ParametersIxQty", new[] { "ResourceId" });
            DropIndex("public.ParametersIxQty", "ix_SearchParamId");
            DropIndex("public.ParametersIxQty", "ix_System");
            DropIndex("public.ParametersIxQty", "ix_Code");
            DropIndex("public.ParametersIxDT", new[] { "ResourceId" });
            DropIndex("public.ParametersIxDT", "ix_SearchParamId");
            DropIndex("public.ParametersIxDT", "ix_HighUtcDateTime");
            DropIndex("public.ParametersIxDT", "ix_LowUtcDateTime");
            DropIndex("public.ParametersRes", new[] { "FhirReleaseId" });
            DropIndex("public.ParametersRes", "ix_LastUpdated");
            DropIndex("public.ParametersRes", "ix_IsDeleted");
            DropIndex("public.ParametersRes", "uq_FhirIdAndVersionId");
            DropIndex("public.ParametersRes", "ix_IsCurrent");
            DropIndex("public.OrganizationIxUri", new[] { "ResourceId" });
            DropIndex("public.OrganizationIxUri", "ix_SearchParamId");
            DropIndex("public.OrganizationIxUri", "ix_Uri");
            DropIndex("public.OrganizationIxTok", new[] { "ResourceId" });
            DropIndex("public.OrganizationIxTok", "ix_SearchParamId");
            DropIndex("public.OrganizationIxTok", "ix_System");
            DropIndex("public.OrganizationIxTok", "ix_Code");
            DropIndex("public.OrganizationIxStr", new[] { "ResourceId" });
            DropIndex("public.OrganizationIxStr", "ix_SearchParamId");
            DropIndex("public.OrganizationIxStr", "ix_String");
            DropIndex("public.OrganizationIxRef", new[] { "ResourceId" });
            DropIndex("public.OrganizationIxRef", "ix_SearchParamId");
            DropIndex("public.OrganizationIxRef", "ix_RefBaseUrlId");
            DropIndex("public.OrganizationIxRef", "ix_RefFhirId");
            DropIndex("public.OrganizationIxQty", new[] { "ResourceId" });
            DropIndex("public.OrganizationIxQty", "ix_SearchParamId");
            DropIndex("public.OrganizationIxQty", "ix_System");
            DropIndex("public.OrganizationIxQty", "ix_Code");
            DropIndex("public.OrganizationIxDT", new[] { "ResourceId" });
            DropIndex("public.OrganizationIxDT", "ix_SearchParamId");
            DropIndex("public.OrganizationIxDT", "ix_HighUtcDateTime");
            DropIndex("public.OrganizationIxDT", "ix_LowUtcDateTime");
            DropIndex("public.OrganizationRes", new[] { "FhirReleaseId" });
            DropIndex("public.OrganizationRes", "ix_LastUpdated");
            DropIndex("public.OrganizationRes", "ix_IsDeleted");
            DropIndex("public.OrganizationRes", "uq_FhirIdAndVersionId");
            DropIndex("public.OrganizationRes", "ix_IsCurrent");
            DropIndex("public.OrganizationAffiliationIxUri", new[] { "ResourceId" });
            DropIndex("public.OrganizationAffiliationIxUri", "ix_SearchParamId");
            DropIndex("public.OrganizationAffiliationIxUri", "ix_Uri");
            DropIndex("public.OrganizationAffiliationIxTok", new[] { "ResourceId" });
            DropIndex("public.OrganizationAffiliationIxTok", "ix_SearchParamId");
            DropIndex("public.OrganizationAffiliationIxTok", "ix_System");
            DropIndex("public.OrganizationAffiliationIxTok", "ix_Code");
            DropIndex("public.OrganizationAffiliationIxStr", new[] { "ResourceId" });
            DropIndex("public.OrganizationAffiliationIxStr", "ix_SearchParamId");
            DropIndex("public.OrganizationAffiliationIxStr", "ix_String");
            DropIndex("public.OrganizationAffiliationIxRef", new[] { "ResourceId" });
            DropIndex("public.OrganizationAffiliationIxRef", "ix_SearchParamId");
            DropIndex("public.OrganizationAffiliationIxRef", "ix_RefBaseUrlId");
            DropIndex("public.OrganizationAffiliationIxRef", "ix_RefFhirId");
            DropIndex("public.OrganizationAffiliationIxQty", new[] { "ResourceId" });
            DropIndex("public.OrganizationAffiliationIxQty", "ix_SearchParamId");
            DropIndex("public.OrganizationAffiliationIxQty", "ix_System");
            DropIndex("public.OrganizationAffiliationIxQty", "ix_Code");
            DropIndex("public.OrganizationAffiliationIxDT", new[] { "ResourceId" });
            DropIndex("public.OrganizationAffiliationIxDT", "ix_SearchParamId");
            DropIndex("public.OrganizationAffiliationIxDT", "ix_HighUtcDateTime");
            DropIndex("public.OrganizationAffiliationIxDT", "ix_LowUtcDateTime");
            DropIndex("public.OrganizationAffiliationRes", new[] { "FhirReleaseId" });
            DropIndex("public.OrganizationAffiliationRes", "ix_LastUpdated");
            DropIndex("public.OrganizationAffiliationRes", "ix_IsDeleted");
            DropIndex("public.OrganizationAffiliationRes", "uq_FhirIdAndVersionId");
            DropIndex("public.OrganizationAffiliationRes", "ix_IsCurrent");
            DropIndex("public.OperationOutcomeIxUri", new[] { "ResourceId" });
            DropIndex("public.OperationOutcomeIxUri", "ix_SearchParamId");
            DropIndex("public.OperationOutcomeIxUri", "ix_Uri");
            DropIndex("public.OperationOutcomeIxTok", new[] { "ResourceId" });
            DropIndex("public.OperationOutcomeIxTok", "ix_SearchParamId");
            DropIndex("public.OperationOutcomeIxTok", "ix_System");
            DropIndex("public.OperationOutcomeIxTok", "ix_Code");
            DropIndex("public.OperationOutcomeIxStr", new[] { "ResourceId" });
            DropIndex("public.OperationOutcomeIxStr", "ix_SearchParamId");
            DropIndex("public.OperationOutcomeIxStr", "ix_String");
            DropIndex("public.OperationOutcomeIxRef", new[] { "ResourceId" });
            DropIndex("public.OperationOutcomeIxRef", "ix_SearchParamId");
            DropIndex("public.OperationOutcomeIxRef", "ix_RefBaseUrlId");
            DropIndex("public.OperationOutcomeIxRef", "ix_RefFhirId");
            DropIndex("public.OperationOutcomeIxQty", new[] { "ResourceId" });
            DropIndex("public.OperationOutcomeIxQty", "ix_SearchParamId");
            DropIndex("public.OperationOutcomeIxQty", "ix_System");
            DropIndex("public.OperationOutcomeIxQty", "ix_Code");
            DropIndex("public.OperationOutcomeIxDT", new[] { "ResourceId" });
            DropIndex("public.OperationOutcomeIxDT", "ix_SearchParamId");
            DropIndex("public.OperationOutcomeIxDT", "ix_HighUtcDateTime");
            DropIndex("public.OperationOutcomeIxDT", "ix_LowUtcDateTime");
            DropIndex("public.OperationOutcomeRes", new[] { "FhirReleaseId" });
            DropIndex("public.OperationOutcomeRes", "ix_LastUpdated");
            DropIndex("public.OperationOutcomeRes", "ix_IsDeleted");
            DropIndex("public.OperationOutcomeRes", "uq_FhirIdAndVersionId");
            DropIndex("public.OperationOutcomeRes", "ix_IsCurrent");
            DropIndex("public.OperationDefinitionIxUri", new[] { "ResourceId" });
            DropIndex("public.OperationDefinitionIxUri", "ix_SearchParamId");
            DropIndex("public.OperationDefinitionIxUri", "ix_Uri");
            DropIndex("public.OperationDefinitionIxTok", new[] { "ResourceId" });
            DropIndex("public.OperationDefinitionIxTok", "ix_SearchParamId");
            DropIndex("public.OperationDefinitionIxTok", "ix_System");
            DropIndex("public.OperationDefinitionIxTok", "ix_Code");
            DropIndex("public.OperationDefinitionIxStr", new[] { "ResourceId" });
            DropIndex("public.OperationDefinitionIxStr", "ix_SearchParamId");
            DropIndex("public.OperationDefinitionIxStr", "ix_String");
            DropIndex("public.OperationDefinitionIxRef", new[] { "ResourceId" });
            DropIndex("public.OperationDefinitionIxRef", "ix_SearchParamId");
            DropIndex("public.OperationDefinitionIxRef", "ix_RefBaseUrlId");
            DropIndex("public.OperationDefinitionIxRef", "ix_RefFhirId");
            DropIndex("public.OperationDefinitionIxQty", new[] { "ResourceId" });
            DropIndex("public.OperationDefinitionIxQty", "ix_SearchParamId");
            DropIndex("public.OperationDefinitionIxQty", "ix_System");
            DropIndex("public.OperationDefinitionIxQty", "ix_Code");
            DropIndex("public.OperationDefinitionIxDT", new[] { "ResourceId" });
            DropIndex("public.OperationDefinitionIxDT", "ix_SearchParamId");
            DropIndex("public.OperationDefinitionIxDT", "ix_HighUtcDateTime");
            DropIndex("public.OperationDefinitionIxDT", "ix_LowUtcDateTime");
            DropIndex("public.OperationDefinitionRes", new[] { "FhirReleaseId" });
            DropIndex("public.OperationDefinitionRes", "ix_LastUpdated");
            DropIndex("public.OperationDefinitionRes", "ix_IsDeleted");
            DropIndex("public.OperationDefinitionRes", "uq_FhirIdAndVersionId");
            DropIndex("public.OperationDefinitionRes", "ix_IsCurrent");
            DropIndex("public.ObservationIxUri", new[] { "ResourceId" });
            DropIndex("public.ObservationIxUri", "ix_SearchParamId");
            DropIndex("public.ObservationIxUri", "ix_Uri");
            DropIndex("public.ObservationIxTok", new[] { "ResourceId" });
            DropIndex("public.ObservationIxTok", "ix_SearchParamId");
            DropIndex("public.ObservationIxTok", "ix_System");
            DropIndex("public.ObservationIxTok", "ix_Code");
            DropIndex("public.ObservationIxStr", new[] { "ResourceId" });
            DropIndex("public.ObservationIxStr", "ix_SearchParamId");
            DropIndex("public.ObservationIxStr", "ix_String");
            DropIndex("public.ObservationIxRef", new[] { "ResourceId" });
            DropIndex("public.ObservationIxRef", "ix_SearchParamId");
            DropIndex("public.ObservationIxRef", "ix_RefBaseUrlId");
            DropIndex("public.ObservationIxRef", "ix_RefFhirId");
            DropIndex("public.ObservationIxQty", new[] { "ResourceId" });
            DropIndex("public.ObservationIxQty", "ix_SearchParamId");
            DropIndex("public.ObservationIxQty", "ix_System");
            DropIndex("public.ObservationIxQty", "ix_Code");
            DropIndex("public.ObservationIxDT", new[] { "ResourceId" });
            DropIndex("public.ObservationIxDT", "ix_SearchParamId");
            DropIndex("public.ObservationIxDT", "ix_HighUtcDateTime");
            DropIndex("public.ObservationIxDT", "ix_LowUtcDateTime");
            DropIndex("public.ObservationRes", new[] { "FhirReleaseId" });
            DropIndex("public.ObservationRes", "ix_LastUpdated");
            DropIndex("public.ObservationRes", "ix_IsDeleted");
            DropIndex("public.ObservationRes", "uq_FhirIdAndVersionId");
            DropIndex("public.ObservationRes", "ix_IsCurrent");
            DropIndex("public.ObservationDefinitionIxUri", new[] { "ResourceId" });
            DropIndex("public.ObservationDefinitionIxUri", "ix_SearchParamId");
            DropIndex("public.ObservationDefinitionIxUri", "ix_Uri");
            DropIndex("public.ObservationDefinitionIxTok", new[] { "ResourceId" });
            DropIndex("public.ObservationDefinitionIxTok", "ix_SearchParamId");
            DropIndex("public.ObservationDefinitionIxTok", "ix_System");
            DropIndex("public.ObservationDefinitionIxTok", "ix_Code");
            DropIndex("public.ObservationDefinitionIxStr", new[] { "ResourceId" });
            DropIndex("public.ObservationDefinitionIxStr", "ix_SearchParamId");
            DropIndex("public.ObservationDefinitionIxStr", "ix_String");
            DropIndex("public.ObservationDefinitionIxRef", new[] { "ResourceId" });
            DropIndex("public.ObservationDefinitionIxRef", "ix_SearchParamId");
            DropIndex("public.ObservationDefinitionIxRef", "ix_RefBaseUrlId");
            DropIndex("public.ObservationDefinitionIxRef", "ix_RefFhirId");
            DropIndex("public.ObservationDefinitionIxQty", new[] { "ResourceId" });
            DropIndex("public.ObservationDefinitionIxQty", "ix_SearchParamId");
            DropIndex("public.ObservationDefinitionIxQty", "ix_System");
            DropIndex("public.ObservationDefinitionIxQty", "ix_Code");
            DropIndex("public.ObservationDefinitionIxDT", new[] { "ResourceId" });
            DropIndex("public.ObservationDefinitionIxDT", "ix_SearchParamId");
            DropIndex("public.ObservationDefinitionIxDT", "ix_HighUtcDateTime");
            DropIndex("public.ObservationDefinitionIxDT", "ix_LowUtcDateTime");
            DropIndex("public.ObservationDefinitionRes", new[] { "FhirReleaseId" });
            DropIndex("public.ObservationDefinitionRes", "ix_LastUpdated");
            DropIndex("public.ObservationDefinitionRes", "ix_IsDeleted");
            DropIndex("public.ObservationDefinitionRes", "uq_FhirIdAndVersionId");
            DropIndex("public.ObservationDefinitionRes", "ix_IsCurrent");
            DropIndex("public.NutritionOrderIxUri", new[] { "ResourceId" });
            DropIndex("public.NutritionOrderIxUri", "ix_SearchParamId");
            DropIndex("public.NutritionOrderIxUri", "ix_Uri");
            DropIndex("public.NutritionOrderIxTok", new[] { "ResourceId" });
            DropIndex("public.NutritionOrderIxTok", "ix_SearchParamId");
            DropIndex("public.NutritionOrderIxTok", "ix_System");
            DropIndex("public.NutritionOrderIxTok", "ix_Code");
            DropIndex("public.NutritionOrderIxStr", new[] { "ResourceId" });
            DropIndex("public.NutritionOrderIxStr", "ix_SearchParamId");
            DropIndex("public.NutritionOrderIxStr", "ix_String");
            DropIndex("public.NutritionOrderIxRef", new[] { "ResourceId" });
            DropIndex("public.NutritionOrderIxRef", "ix_SearchParamId");
            DropIndex("public.NutritionOrderIxRef", "ix_RefBaseUrlId");
            DropIndex("public.NutritionOrderIxRef", "ix_RefFhirId");
            DropIndex("public.NutritionOrderIxQty", new[] { "ResourceId" });
            DropIndex("public.NutritionOrderIxQty", "ix_SearchParamId");
            DropIndex("public.NutritionOrderIxQty", "ix_System");
            DropIndex("public.NutritionOrderIxQty", "ix_Code");
            DropIndex("public.NutritionOrderIxDT", new[] { "ResourceId" });
            DropIndex("public.NutritionOrderIxDT", "ix_SearchParamId");
            DropIndex("public.NutritionOrderIxDT", "ix_HighUtcDateTime");
            DropIndex("public.NutritionOrderIxDT", "ix_LowUtcDateTime");
            DropIndex("public.NutritionOrderRes", new[] { "FhirReleaseId" });
            DropIndex("public.NutritionOrderRes", "ix_LastUpdated");
            DropIndex("public.NutritionOrderRes", "ix_IsDeleted");
            DropIndex("public.NutritionOrderRes", "uq_FhirIdAndVersionId");
            DropIndex("public.NutritionOrderRes", "ix_IsCurrent");
            DropIndex("public.NamingSystemIxUri", new[] { "ResourceId" });
            DropIndex("public.NamingSystemIxUri", "ix_SearchParamId");
            DropIndex("public.NamingSystemIxUri", "ix_Uri");
            DropIndex("public.NamingSystemIxTok", new[] { "ResourceId" });
            DropIndex("public.NamingSystemIxTok", "ix_SearchParamId");
            DropIndex("public.NamingSystemIxTok", "ix_System");
            DropIndex("public.NamingSystemIxTok", "ix_Code");
            DropIndex("public.NamingSystemIxStr", new[] { "ResourceId" });
            DropIndex("public.NamingSystemIxStr", "ix_SearchParamId");
            DropIndex("public.NamingSystemIxStr", "ix_String");
            DropIndex("public.NamingSystemIxRef", new[] { "ResourceId" });
            DropIndex("public.NamingSystemIxRef", "ix_SearchParamId");
            DropIndex("public.NamingSystemIxRef", "ix_RefBaseUrlId");
            DropIndex("public.NamingSystemIxRef", "ix_RefFhirId");
            DropIndex("public.NamingSystemIxQty", new[] { "ResourceId" });
            DropIndex("public.NamingSystemIxQty", "ix_SearchParamId");
            DropIndex("public.NamingSystemIxQty", "ix_System");
            DropIndex("public.NamingSystemIxQty", "ix_Code");
            DropIndex("public.NamingSystemIxDT", new[] { "ResourceId" });
            DropIndex("public.NamingSystemIxDT", "ix_SearchParamId");
            DropIndex("public.NamingSystemIxDT", "ix_HighUtcDateTime");
            DropIndex("public.NamingSystemIxDT", "ix_LowUtcDateTime");
            DropIndex("public.NamingSystemRes", new[] { "FhirReleaseId" });
            DropIndex("public.NamingSystemRes", "ix_LastUpdated");
            DropIndex("public.NamingSystemRes", "ix_IsDeleted");
            DropIndex("public.NamingSystemRes", "uq_FhirIdAndVersionId");
            DropIndex("public.NamingSystemRes", "ix_IsCurrent");
            DropIndex("public.MessageHeaderIxUri", new[] { "ResourceId" });
            DropIndex("public.MessageHeaderIxUri", "ix_SearchParamId");
            DropIndex("public.MessageHeaderIxUri", "ix_Uri");
            DropIndex("public.MessageHeaderIxTok", new[] { "ResourceId" });
            DropIndex("public.MessageHeaderIxTok", "ix_SearchParamId");
            DropIndex("public.MessageHeaderIxTok", "ix_System");
            DropIndex("public.MessageHeaderIxTok", "ix_Code");
            DropIndex("public.MessageHeaderIxStr", new[] { "ResourceId" });
            DropIndex("public.MessageHeaderIxStr", "ix_SearchParamId");
            DropIndex("public.MessageHeaderIxStr", "ix_String");
            DropIndex("public.MessageHeaderIxRef", new[] { "ResourceId" });
            DropIndex("public.MessageHeaderIxRef", "ix_SearchParamId");
            DropIndex("public.MessageHeaderIxRef", "ix_RefBaseUrlId");
            DropIndex("public.MessageHeaderIxRef", "ix_RefFhirId");
            DropIndex("public.MessageHeaderIxQty", new[] { "ResourceId" });
            DropIndex("public.MessageHeaderIxQty", "ix_SearchParamId");
            DropIndex("public.MessageHeaderIxQty", "ix_System");
            DropIndex("public.MessageHeaderIxQty", "ix_Code");
            DropIndex("public.MessageHeaderIxDT", new[] { "ResourceId" });
            DropIndex("public.MessageHeaderIxDT", "ix_SearchParamId");
            DropIndex("public.MessageHeaderIxDT", "ix_HighUtcDateTime");
            DropIndex("public.MessageHeaderIxDT", "ix_LowUtcDateTime");
            DropIndex("public.MessageHeaderRes", new[] { "FhirReleaseId" });
            DropIndex("public.MessageHeaderRes", "ix_LastUpdated");
            DropIndex("public.MessageHeaderRes", "ix_IsDeleted");
            DropIndex("public.MessageHeaderRes", "uq_FhirIdAndVersionId");
            DropIndex("public.MessageHeaderRes", "ix_IsCurrent");
            DropIndex("public.MessageDefinitionIxUri", new[] { "ResourceId" });
            DropIndex("public.MessageDefinitionIxUri", "ix_SearchParamId");
            DropIndex("public.MessageDefinitionIxUri", "ix_Uri");
            DropIndex("public.MessageDefinitionIxTok", new[] { "ResourceId" });
            DropIndex("public.MessageDefinitionIxTok", "ix_SearchParamId");
            DropIndex("public.MessageDefinitionIxTok", "ix_System");
            DropIndex("public.MessageDefinitionIxTok", "ix_Code");
            DropIndex("public.MessageDefinitionIxStr", new[] { "ResourceId" });
            DropIndex("public.MessageDefinitionIxStr", "ix_SearchParamId");
            DropIndex("public.MessageDefinitionIxStr", "ix_String");
            DropIndex("public.MessageDefinitionIxRef", new[] { "ResourceId" });
            DropIndex("public.MessageDefinitionIxRef", "ix_SearchParamId");
            DropIndex("public.MessageDefinitionIxRef", "ix_RefBaseUrlId");
            DropIndex("public.MessageDefinitionIxRef", "ix_RefFhirId");
            DropIndex("public.MessageDefinitionIxQty", new[] { "ResourceId" });
            DropIndex("public.MessageDefinitionIxQty", "ix_SearchParamId");
            DropIndex("public.MessageDefinitionIxQty", "ix_System");
            DropIndex("public.MessageDefinitionIxQty", "ix_Code");
            DropIndex("public.MessageDefinitionIxDT", new[] { "ResourceId" });
            DropIndex("public.MessageDefinitionIxDT", "ix_SearchParamId");
            DropIndex("public.MessageDefinitionIxDT", "ix_HighUtcDateTime");
            DropIndex("public.MessageDefinitionIxDT", "ix_LowUtcDateTime");
            DropIndex("public.MessageDefinitionRes", new[] { "FhirReleaseId" });
            DropIndex("public.MessageDefinitionRes", "ix_LastUpdated");
            DropIndex("public.MessageDefinitionRes", "ix_IsDeleted");
            DropIndex("public.MessageDefinitionRes", "uq_FhirIdAndVersionId");
            DropIndex("public.MessageDefinitionRes", "ix_IsCurrent");
            DropIndex("public.MedicinalProductUndesirableEffectIxUri", new[] { "ResourceId" });
            DropIndex("public.MedicinalProductUndesirableEffectIxUri", "ix_SearchParamId");
            DropIndex("public.MedicinalProductUndesirableEffectIxUri", "ix_Uri");
            DropIndex("public.MedicinalProductUndesirableEffectIxTok", new[] { "ResourceId" });
            DropIndex("public.MedicinalProductUndesirableEffectIxTok", "ix_SearchParamId");
            DropIndex("public.MedicinalProductUndesirableEffectIxTok", "ix_System");
            DropIndex("public.MedicinalProductUndesirableEffectIxTok", "ix_Code");
            DropIndex("public.MedicinalProductUndesirableEffectIxStr", new[] { "ResourceId" });
            DropIndex("public.MedicinalProductUndesirableEffectIxStr", "ix_SearchParamId");
            DropIndex("public.MedicinalProductUndesirableEffectIxStr", "ix_String");
            DropIndex("public.MedicinalProductUndesirableEffectIxRef", new[] { "ResourceId" });
            DropIndex("public.MedicinalProductUndesirableEffectIxRef", "ix_SearchParamId");
            DropIndex("public.MedicinalProductUndesirableEffectIxRef", "ix_RefBaseUrlId");
            DropIndex("public.MedicinalProductUndesirableEffectIxRef", "ix_RefFhirId");
            DropIndex("public.MedicinalProductUndesirableEffectIxQty", new[] { "ResourceId" });
            DropIndex("public.MedicinalProductUndesirableEffectIxQty", "ix_SearchParamId");
            DropIndex("public.MedicinalProductUndesirableEffectIxQty", "ix_System");
            DropIndex("public.MedicinalProductUndesirableEffectIxQty", "ix_Code");
            DropIndex("public.MedicinalProductUndesirableEffectIxDT", new[] { "ResourceId" });
            DropIndex("public.MedicinalProductUndesirableEffectIxDT", "ix_SearchParamId");
            DropIndex("public.MedicinalProductUndesirableEffectIxDT", "ix_HighUtcDateTime");
            DropIndex("public.MedicinalProductUndesirableEffectIxDT", "ix_LowUtcDateTime");
            DropIndex("public.MedicinalProductUndesirableEffectRes", new[] { "FhirReleaseId" });
            DropIndex("public.MedicinalProductUndesirableEffectRes", "ix_LastUpdated");
            DropIndex("public.MedicinalProductUndesirableEffectRes", "ix_IsDeleted");
            DropIndex("public.MedicinalProductUndesirableEffectRes", "uq_FhirIdAndVersionId");
            DropIndex("public.MedicinalProductUndesirableEffectRes", "ix_IsCurrent");
            DropIndex("public.MedicinalProductPharmaceuticalIxUri", new[] { "ResourceId" });
            DropIndex("public.MedicinalProductPharmaceuticalIxUri", "ix_SearchParamId");
            DropIndex("public.MedicinalProductPharmaceuticalIxUri", "ix_Uri");
            DropIndex("public.MedicinalProductPharmaceuticalIxTok", new[] { "ResourceId" });
            DropIndex("public.MedicinalProductPharmaceuticalIxTok", "ix_SearchParamId");
            DropIndex("public.MedicinalProductPharmaceuticalIxTok", "ix_System");
            DropIndex("public.MedicinalProductPharmaceuticalIxTok", "ix_Code");
            DropIndex("public.MedicinalProductPharmaceuticalIxStr", new[] { "ResourceId" });
            DropIndex("public.MedicinalProductPharmaceuticalIxStr", "ix_SearchParamId");
            DropIndex("public.MedicinalProductPharmaceuticalIxStr", "ix_String");
            DropIndex("public.MedicinalProductPharmaceuticalIxRef", new[] { "ResourceId" });
            DropIndex("public.MedicinalProductPharmaceuticalIxRef", "ix_SearchParamId");
            DropIndex("public.MedicinalProductPharmaceuticalIxRef", "ix_RefBaseUrlId");
            DropIndex("public.MedicinalProductPharmaceuticalIxRef", "ix_RefFhirId");
            DropIndex("public.MedicinalProductPharmaceuticalIxQty", new[] { "ResourceId" });
            DropIndex("public.MedicinalProductPharmaceuticalIxQty", "ix_SearchParamId");
            DropIndex("public.MedicinalProductPharmaceuticalIxQty", "ix_System");
            DropIndex("public.MedicinalProductPharmaceuticalIxQty", "ix_Code");
            DropIndex("public.MedicinalProductPharmaceuticalIxDT", new[] { "ResourceId" });
            DropIndex("public.MedicinalProductPharmaceuticalIxDT", "ix_SearchParamId");
            DropIndex("public.MedicinalProductPharmaceuticalIxDT", "ix_HighUtcDateTime");
            DropIndex("public.MedicinalProductPharmaceuticalIxDT", "ix_LowUtcDateTime");
            DropIndex("public.MedicinalProductPharmaceuticalRes", new[] { "FhirReleaseId" });
            DropIndex("public.MedicinalProductPharmaceuticalRes", "ix_LastUpdated");
            DropIndex("public.MedicinalProductPharmaceuticalRes", "ix_IsDeleted");
            DropIndex("public.MedicinalProductPharmaceuticalRes", "uq_FhirIdAndVersionId");
            DropIndex("public.MedicinalProductPharmaceuticalRes", "ix_IsCurrent");
            DropIndex("public.MedicinalProductPackagedIxUri", new[] { "ResourceId" });
            DropIndex("public.MedicinalProductPackagedIxUri", "ix_SearchParamId");
            DropIndex("public.MedicinalProductPackagedIxUri", "ix_Uri");
            DropIndex("public.MedicinalProductPackagedIxTok", new[] { "ResourceId" });
            DropIndex("public.MedicinalProductPackagedIxTok", "ix_SearchParamId");
            DropIndex("public.MedicinalProductPackagedIxTok", "ix_System");
            DropIndex("public.MedicinalProductPackagedIxTok", "ix_Code");
            DropIndex("public.MedicinalProductPackagedIxStr", new[] { "ResourceId" });
            DropIndex("public.MedicinalProductPackagedIxStr", "ix_SearchParamId");
            DropIndex("public.MedicinalProductPackagedIxStr", "ix_String");
            DropIndex("public.MedicinalProductPackagedIxRef", new[] { "ResourceId" });
            DropIndex("public.MedicinalProductPackagedIxRef", "ix_SearchParamId");
            DropIndex("public.MedicinalProductPackagedIxRef", "ix_RefBaseUrlId");
            DropIndex("public.MedicinalProductPackagedIxRef", "ix_RefFhirId");
            DropIndex("public.MedicinalProductPackagedIxQty", new[] { "ResourceId" });
            DropIndex("public.MedicinalProductPackagedIxQty", "ix_SearchParamId");
            DropIndex("public.MedicinalProductPackagedIxQty", "ix_System");
            DropIndex("public.MedicinalProductPackagedIxQty", "ix_Code");
            DropIndex("public.MedicinalProductPackagedIxDT", new[] { "ResourceId" });
            DropIndex("public.MedicinalProductPackagedIxDT", "ix_SearchParamId");
            DropIndex("public.MedicinalProductPackagedIxDT", "ix_HighUtcDateTime");
            DropIndex("public.MedicinalProductPackagedIxDT", "ix_LowUtcDateTime");
            DropIndex("public.MedicinalProductPackagedRes", new[] { "FhirReleaseId" });
            DropIndex("public.MedicinalProductPackagedRes", "ix_LastUpdated");
            DropIndex("public.MedicinalProductPackagedRes", "ix_IsDeleted");
            DropIndex("public.MedicinalProductPackagedRes", "uq_FhirIdAndVersionId");
            DropIndex("public.MedicinalProductPackagedRes", "ix_IsCurrent");
            DropIndex("public.MedicinalProductManufacturedIxUri", new[] { "ResourceId" });
            DropIndex("public.MedicinalProductManufacturedIxUri", "ix_SearchParamId");
            DropIndex("public.MedicinalProductManufacturedIxUri", "ix_Uri");
            DropIndex("public.MedicinalProductManufacturedIxTok", new[] { "ResourceId" });
            DropIndex("public.MedicinalProductManufacturedIxTok", "ix_SearchParamId");
            DropIndex("public.MedicinalProductManufacturedIxTok", "ix_System");
            DropIndex("public.MedicinalProductManufacturedIxTok", "ix_Code");
            DropIndex("public.MedicinalProductManufacturedIxStr", new[] { "ResourceId" });
            DropIndex("public.MedicinalProductManufacturedIxStr", "ix_SearchParamId");
            DropIndex("public.MedicinalProductManufacturedIxStr", "ix_String");
            DropIndex("public.MedicinalProductManufacturedIxRef", new[] { "ResourceId" });
            DropIndex("public.MedicinalProductManufacturedIxRef", "ix_SearchParamId");
            DropIndex("public.MedicinalProductManufacturedIxRef", "ix_RefBaseUrlId");
            DropIndex("public.MedicinalProductManufacturedIxRef", "ix_RefFhirId");
            DropIndex("public.MedicinalProductManufacturedIxQty", new[] { "ResourceId" });
            DropIndex("public.MedicinalProductManufacturedIxQty", "ix_SearchParamId");
            DropIndex("public.MedicinalProductManufacturedIxQty", "ix_System");
            DropIndex("public.MedicinalProductManufacturedIxQty", "ix_Code");
            DropIndex("public.MedicinalProductManufacturedIxDT", new[] { "ResourceId" });
            DropIndex("public.MedicinalProductManufacturedIxDT", "ix_SearchParamId");
            DropIndex("public.MedicinalProductManufacturedIxDT", "ix_HighUtcDateTime");
            DropIndex("public.MedicinalProductManufacturedIxDT", "ix_LowUtcDateTime");
            DropIndex("public.MedicinalProductManufacturedRes", new[] { "FhirReleaseId" });
            DropIndex("public.MedicinalProductManufacturedRes", "ix_LastUpdated");
            DropIndex("public.MedicinalProductManufacturedRes", "ix_IsDeleted");
            DropIndex("public.MedicinalProductManufacturedRes", "uq_FhirIdAndVersionId");
            DropIndex("public.MedicinalProductManufacturedRes", "ix_IsCurrent");
            DropIndex("public.MedicinalProductIxUri", new[] { "ResourceId" });
            DropIndex("public.MedicinalProductIxUri", "ix_SearchParamId");
            DropIndex("public.MedicinalProductIxUri", "ix_Uri");
            DropIndex("public.MedicinalProductIxTok", new[] { "ResourceId" });
            DropIndex("public.MedicinalProductIxTok", "ix_SearchParamId");
            DropIndex("public.MedicinalProductIxTok", "ix_System");
            DropIndex("public.MedicinalProductIxTok", "ix_Code");
            DropIndex("public.MedicinalProductIxStr", new[] { "ResourceId" });
            DropIndex("public.MedicinalProductIxStr", "ix_SearchParamId");
            DropIndex("public.MedicinalProductIxStr", "ix_String");
            DropIndex("public.MedicinalProductIxRef", new[] { "ResourceId" });
            DropIndex("public.MedicinalProductIxRef", "ix_SearchParamId");
            DropIndex("public.MedicinalProductIxRef", "ix_RefBaseUrlId");
            DropIndex("public.MedicinalProductIxRef", "ix_RefFhirId");
            DropIndex("public.MedicinalProductIxQty", new[] { "ResourceId" });
            DropIndex("public.MedicinalProductIxQty", "ix_SearchParamId");
            DropIndex("public.MedicinalProductIxQty", "ix_System");
            DropIndex("public.MedicinalProductIxQty", "ix_Code");
            DropIndex("public.MedicinalProductIxDT", new[] { "ResourceId" });
            DropIndex("public.MedicinalProductIxDT", "ix_SearchParamId");
            DropIndex("public.MedicinalProductIxDT", "ix_HighUtcDateTime");
            DropIndex("public.MedicinalProductIxDT", "ix_LowUtcDateTime");
            DropIndex("public.MedicinalProductRes", new[] { "FhirReleaseId" });
            DropIndex("public.MedicinalProductRes", "ix_LastUpdated");
            DropIndex("public.MedicinalProductRes", "ix_IsDeleted");
            DropIndex("public.MedicinalProductRes", "uq_FhirIdAndVersionId");
            DropIndex("public.MedicinalProductRes", "ix_IsCurrent");
            DropIndex("public.MedicinalProductInteractionIxUri", new[] { "ResourceId" });
            DropIndex("public.MedicinalProductInteractionIxUri", "ix_SearchParamId");
            DropIndex("public.MedicinalProductInteractionIxUri", "ix_Uri");
            DropIndex("public.MedicinalProductInteractionIxTok", new[] { "ResourceId" });
            DropIndex("public.MedicinalProductInteractionIxTok", "ix_SearchParamId");
            DropIndex("public.MedicinalProductInteractionIxTok", "ix_System");
            DropIndex("public.MedicinalProductInteractionIxTok", "ix_Code");
            DropIndex("public.MedicinalProductInteractionIxStr", new[] { "ResourceId" });
            DropIndex("public.MedicinalProductInteractionIxStr", "ix_SearchParamId");
            DropIndex("public.MedicinalProductInteractionIxStr", "ix_String");
            DropIndex("public.MedicinalProductInteractionIxRef", new[] { "ResourceId" });
            DropIndex("public.MedicinalProductInteractionIxRef", "ix_SearchParamId");
            DropIndex("public.MedicinalProductInteractionIxRef", "ix_RefBaseUrlId");
            DropIndex("public.MedicinalProductInteractionIxRef", "ix_RefFhirId");
            DropIndex("public.MedicinalProductInteractionIxQty", new[] { "ResourceId" });
            DropIndex("public.MedicinalProductInteractionIxQty", "ix_SearchParamId");
            DropIndex("public.MedicinalProductInteractionIxQty", "ix_System");
            DropIndex("public.MedicinalProductInteractionIxQty", "ix_Code");
            DropIndex("public.MedicinalProductInteractionIxDT", new[] { "ResourceId" });
            DropIndex("public.MedicinalProductInteractionIxDT", "ix_SearchParamId");
            DropIndex("public.MedicinalProductInteractionIxDT", "ix_HighUtcDateTime");
            DropIndex("public.MedicinalProductInteractionIxDT", "ix_LowUtcDateTime");
            DropIndex("public.MedicinalProductInteractionRes", new[] { "FhirReleaseId" });
            DropIndex("public.MedicinalProductInteractionRes", "ix_LastUpdated");
            DropIndex("public.MedicinalProductInteractionRes", "ix_IsDeleted");
            DropIndex("public.MedicinalProductInteractionRes", "uq_FhirIdAndVersionId");
            DropIndex("public.MedicinalProductInteractionRes", "ix_IsCurrent");
            DropIndex("public.MedicinalProductIngredientIxUri", new[] { "ResourceId" });
            DropIndex("public.MedicinalProductIngredientIxUri", "ix_SearchParamId");
            DropIndex("public.MedicinalProductIngredientIxUri", "ix_Uri");
            DropIndex("public.MedicinalProductIngredientIxTok", new[] { "ResourceId" });
            DropIndex("public.MedicinalProductIngredientIxTok", "ix_SearchParamId");
            DropIndex("public.MedicinalProductIngredientIxTok", "ix_System");
            DropIndex("public.MedicinalProductIngredientIxTok", "ix_Code");
            DropIndex("public.MedicinalProductIngredientIxStr", new[] { "ResourceId" });
            DropIndex("public.MedicinalProductIngredientIxStr", "ix_SearchParamId");
            DropIndex("public.MedicinalProductIngredientIxStr", "ix_String");
            DropIndex("public.MedicinalProductIngredientIxRef", new[] { "ResourceId" });
            DropIndex("public.MedicinalProductIngredientIxRef", "ix_SearchParamId");
            DropIndex("public.MedicinalProductIngredientIxRef", "ix_RefBaseUrlId");
            DropIndex("public.MedicinalProductIngredientIxRef", "ix_RefFhirId");
            DropIndex("public.MedicinalProductIngredientIxQty", new[] { "ResourceId" });
            DropIndex("public.MedicinalProductIngredientIxQty", "ix_SearchParamId");
            DropIndex("public.MedicinalProductIngredientIxQty", "ix_System");
            DropIndex("public.MedicinalProductIngredientIxQty", "ix_Code");
            DropIndex("public.MedicinalProductIngredientIxDT", new[] { "ResourceId" });
            DropIndex("public.MedicinalProductIngredientIxDT", "ix_SearchParamId");
            DropIndex("public.MedicinalProductIngredientIxDT", "ix_HighUtcDateTime");
            DropIndex("public.MedicinalProductIngredientIxDT", "ix_LowUtcDateTime");
            DropIndex("public.MedicinalProductIngredientRes", new[] { "FhirReleaseId" });
            DropIndex("public.MedicinalProductIngredientRes", "ix_LastUpdated");
            DropIndex("public.MedicinalProductIngredientRes", "ix_IsDeleted");
            DropIndex("public.MedicinalProductIngredientRes", "uq_FhirIdAndVersionId");
            DropIndex("public.MedicinalProductIngredientRes", "ix_IsCurrent");
            DropIndex("public.MedicinalProductIndicationIxUri", new[] { "ResourceId" });
            DropIndex("public.MedicinalProductIndicationIxUri", "ix_SearchParamId");
            DropIndex("public.MedicinalProductIndicationIxUri", "ix_Uri");
            DropIndex("public.MedicinalProductIndicationIxTok", new[] { "ResourceId" });
            DropIndex("public.MedicinalProductIndicationIxTok", "ix_SearchParamId");
            DropIndex("public.MedicinalProductIndicationIxTok", "ix_System");
            DropIndex("public.MedicinalProductIndicationIxTok", "ix_Code");
            DropIndex("public.MedicinalProductIndicationIxStr", new[] { "ResourceId" });
            DropIndex("public.MedicinalProductIndicationIxStr", "ix_SearchParamId");
            DropIndex("public.MedicinalProductIndicationIxStr", "ix_String");
            DropIndex("public.MedicinalProductIndicationIxRef", new[] { "ResourceId" });
            DropIndex("public.MedicinalProductIndicationIxRef", "ix_SearchParamId");
            DropIndex("public.MedicinalProductIndicationIxRef", "ix_RefBaseUrlId");
            DropIndex("public.MedicinalProductIndicationIxRef", "ix_RefFhirId");
            DropIndex("public.MedicinalProductIndicationIxQty", new[] { "ResourceId" });
            DropIndex("public.MedicinalProductIndicationIxQty", "ix_SearchParamId");
            DropIndex("public.MedicinalProductIndicationIxQty", "ix_System");
            DropIndex("public.MedicinalProductIndicationIxQty", "ix_Code");
            DropIndex("public.MedicinalProductIndicationIxDT", new[] { "ResourceId" });
            DropIndex("public.MedicinalProductIndicationIxDT", "ix_SearchParamId");
            DropIndex("public.MedicinalProductIndicationIxDT", "ix_HighUtcDateTime");
            DropIndex("public.MedicinalProductIndicationIxDT", "ix_LowUtcDateTime");
            DropIndex("public.MedicinalProductIndicationRes", new[] { "FhirReleaseId" });
            DropIndex("public.MedicinalProductIndicationRes", "ix_LastUpdated");
            DropIndex("public.MedicinalProductIndicationRes", "ix_IsDeleted");
            DropIndex("public.MedicinalProductIndicationRes", "uq_FhirIdAndVersionId");
            DropIndex("public.MedicinalProductIndicationRes", "ix_IsCurrent");
            DropIndex("public.MedicinalProductDeviceSpecIxUri", new[] { "ResourceId" });
            DropIndex("public.MedicinalProductDeviceSpecIxUri", "ix_SearchParamId");
            DropIndex("public.MedicinalProductDeviceSpecIxUri", "ix_Uri");
            DropIndex("public.MedicinalProductDeviceSpecIxTok", new[] { "ResourceId" });
            DropIndex("public.MedicinalProductDeviceSpecIxTok", "ix_SearchParamId");
            DropIndex("public.MedicinalProductDeviceSpecIxTok", "ix_System");
            DropIndex("public.MedicinalProductDeviceSpecIxTok", "ix_Code");
            DropIndex("public.MedicinalProductDeviceSpecIxStr", new[] { "ResourceId" });
            DropIndex("public.MedicinalProductDeviceSpecIxStr", "ix_SearchParamId");
            DropIndex("public.MedicinalProductDeviceSpecIxStr", "ix_String");
            DropIndex("public.MedicinalProductDeviceSpecIxRef", new[] { "ResourceId" });
            DropIndex("public.MedicinalProductDeviceSpecIxRef", "ix_SearchParamId");
            DropIndex("public.MedicinalProductDeviceSpecIxRef", "ix_RefBaseUrlId");
            DropIndex("public.MedicinalProductDeviceSpecIxRef", "ix_RefFhirId");
            DropIndex("public.MedicinalProductDeviceSpecIxQty", new[] { "ResourceId" });
            DropIndex("public.MedicinalProductDeviceSpecIxQty", "ix_SearchParamId");
            DropIndex("public.MedicinalProductDeviceSpecIxQty", "ix_System");
            DropIndex("public.MedicinalProductDeviceSpecIxQty", "ix_Code");
            DropIndex("public.MedicinalProductDeviceSpecIxDT", new[] { "ResourceId" });
            DropIndex("public.MedicinalProductDeviceSpecIxDT", "ix_SearchParamId");
            DropIndex("public.MedicinalProductDeviceSpecIxDT", "ix_HighUtcDateTime");
            DropIndex("public.MedicinalProductDeviceSpecIxDT", "ix_LowUtcDateTime");
            DropIndex("public.MedicinalProductDeviceSpecRes", new[] { "FhirReleaseId" });
            DropIndex("public.MedicinalProductDeviceSpecRes", "ix_LastUpdated");
            DropIndex("public.MedicinalProductDeviceSpecRes", "ix_IsDeleted");
            DropIndex("public.MedicinalProductDeviceSpecRes", "uq_FhirIdAndVersionId");
            DropIndex("public.MedicinalProductDeviceSpecRes", "ix_IsCurrent");
            DropIndex("public.MedicinalProductContraindicationIxUri", new[] { "ResourceId" });
            DropIndex("public.MedicinalProductContraindicationIxUri", "ix_SearchParamId");
            DropIndex("public.MedicinalProductContraindicationIxUri", "ix_Uri");
            DropIndex("public.MedicinalProductContraindicationIxTok", new[] { "ResourceId" });
            DropIndex("public.MedicinalProductContraindicationIxTok", "ix_SearchParamId");
            DropIndex("public.MedicinalProductContraindicationIxTok", "ix_System");
            DropIndex("public.MedicinalProductContraindicationIxTok", "ix_Code");
            DropIndex("public.MedicinalProductContraindicationIxStr", new[] { "ResourceId" });
            DropIndex("public.MedicinalProductContraindicationIxStr", "ix_SearchParamId");
            DropIndex("public.MedicinalProductContraindicationIxStr", "ix_String");
            DropIndex("public.MedicinalProductContraindicationIxRef", new[] { "ResourceId" });
            DropIndex("public.MedicinalProductContraindicationIxRef", "ix_SearchParamId");
            DropIndex("public.MedicinalProductContraindicationIxRef", "ix_RefBaseUrlId");
            DropIndex("public.MedicinalProductContraindicationIxRef", "ix_RefFhirId");
            DropIndex("public.MedicinalProductContraindicationIxQty", new[] { "ResourceId" });
            DropIndex("public.MedicinalProductContraindicationIxQty", "ix_SearchParamId");
            DropIndex("public.MedicinalProductContraindicationIxQty", "ix_System");
            DropIndex("public.MedicinalProductContraindicationIxQty", "ix_Code");
            DropIndex("public.MedicinalProductContraindicationIxDT", new[] { "ResourceId" });
            DropIndex("public.MedicinalProductContraindicationIxDT", "ix_SearchParamId");
            DropIndex("public.MedicinalProductContraindicationIxDT", "ix_HighUtcDateTime");
            DropIndex("public.MedicinalProductContraindicationIxDT", "ix_LowUtcDateTime");
            DropIndex("public.MedicinalProductContraindicationRes", new[] { "FhirReleaseId" });
            DropIndex("public.MedicinalProductContraindicationRes", "ix_LastUpdated");
            DropIndex("public.MedicinalProductContraindicationRes", "ix_IsDeleted");
            DropIndex("public.MedicinalProductContraindicationRes", "uq_FhirIdAndVersionId");
            DropIndex("public.MedicinalProductContraindicationRes", "ix_IsCurrent");
            DropIndex("public.MedicinalProductClinicalsIxUri", new[] { "ResourceId" });
            DropIndex("public.MedicinalProductClinicalsIxUri", "ix_SearchParamId");
            DropIndex("public.MedicinalProductClinicalsIxUri", "ix_Uri");
            DropIndex("public.MedicinalProductClinicalsIxTok", new[] { "ResourceId" });
            DropIndex("public.MedicinalProductClinicalsIxTok", "ix_SearchParamId");
            DropIndex("public.MedicinalProductClinicalsIxTok", "ix_System");
            DropIndex("public.MedicinalProductClinicalsIxTok", "ix_Code");
            DropIndex("public.MedicinalProductClinicalsIxStr", new[] { "ResourceId" });
            DropIndex("public.MedicinalProductClinicalsIxStr", "ix_SearchParamId");
            DropIndex("public.MedicinalProductClinicalsIxStr", "ix_String");
            DropIndex("public.MedicinalProductClinicalsIxRef", new[] { "ResourceId" });
            DropIndex("public.MedicinalProductClinicalsIxRef", "ix_SearchParamId");
            DropIndex("public.MedicinalProductClinicalsIxRef", "ix_RefBaseUrlId");
            DropIndex("public.MedicinalProductClinicalsIxRef", "ix_RefFhirId");
            DropIndex("public.MedicinalProductClinicalsIxQty", new[] { "ResourceId" });
            DropIndex("public.MedicinalProductClinicalsIxQty", "ix_SearchParamId");
            DropIndex("public.MedicinalProductClinicalsIxQty", "ix_System");
            DropIndex("public.MedicinalProductClinicalsIxQty", "ix_Code");
            DropIndex("public.MedicinalProductClinicalsIxDT", new[] { "ResourceId" });
            DropIndex("public.MedicinalProductClinicalsIxDT", "ix_SearchParamId");
            DropIndex("public.MedicinalProductClinicalsIxDT", "ix_HighUtcDateTime");
            DropIndex("public.MedicinalProductClinicalsIxDT", "ix_LowUtcDateTime");
            DropIndex("public.MedicinalProductClinicalsRes", new[] { "FhirReleaseId" });
            DropIndex("public.MedicinalProductClinicalsRes", "ix_LastUpdated");
            DropIndex("public.MedicinalProductClinicalsRes", "ix_IsDeleted");
            DropIndex("public.MedicinalProductClinicalsRes", "uq_FhirIdAndVersionId");
            DropIndex("public.MedicinalProductClinicalsRes", "ix_IsCurrent");
            DropIndex("public.MedicinalProductAuthorizationIxUri", new[] { "ResourceId" });
            DropIndex("public.MedicinalProductAuthorizationIxUri", "ix_SearchParamId");
            DropIndex("public.MedicinalProductAuthorizationIxUri", "ix_Uri");
            DropIndex("public.MedicinalProductAuthorizationIxTok", new[] { "ResourceId" });
            DropIndex("public.MedicinalProductAuthorizationIxTok", "ix_SearchParamId");
            DropIndex("public.MedicinalProductAuthorizationIxTok", "ix_System");
            DropIndex("public.MedicinalProductAuthorizationIxTok", "ix_Code");
            DropIndex("public.MedicinalProductAuthorizationIxStr", new[] { "ResourceId" });
            DropIndex("public.MedicinalProductAuthorizationIxStr", "ix_SearchParamId");
            DropIndex("public.MedicinalProductAuthorizationIxStr", "ix_String");
            DropIndex("public.MedicinalProductAuthorizationIxRef", new[] { "ResourceId" });
            DropIndex("public.MedicinalProductAuthorizationIxRef", "ix_SearchParamId");
            DropIndex("public.MedicinalProductAuthorizationIxRef", "ix_RefBaseUrlId");
            DropIndex("public.MedicinalProductAuthorizationIxRef", "ix_RefFhirId");
            DropIndex("public.MedicinalProductAuthorizationIxQty", new[] { "ResourceId" });
            DropIndex("public.MedicinalProductAuthorizationIxQty", "ix_SearchParamId");
            DropIndex("public.MedicinalProductAuthorizationIxQty", "ix_System");
            DropIndex("public.MedicinalProductAuthorizationIxQty", "ix_Code");
            DropIndex("public.MedicinalProductAuthorizationIxDT", new[] { "ResourceId" });
            DropIndex("public.MedicinalProductAuthorizationIxDT", "ix_SearchParamId");
            DropIndex("public.MedicinalProductAuthorizationIxDT", "ix_HighUtcDateTime");
            DropIndex("public.MedicinalProductAuthorizationIxDT", "ix_LowUtcDateTime");
            DropIndex("public.MedicinalProductAuthorizationRes", new[] { "FhirReleaseId" });
            DropIndex("public.MedicinalProductAuthorizationRes", "ix_LastUpdated");
            DropIndex("public.MedicinalProductAuthorizationRes", "ix_IsDeleted");
            DropIndex("public.MedicinalProductAuthorizationRes", "uq_FhirIdAndVersionId");
            DropIndex("public.MedicinalProductAuthorizationRes", "ix_IsCurrent");
            DropIndex("public.MedicationStatementIxUri", new[] { "ResourceId" });
            DropIndex("public.MedicationStatementIxUri", "ix_SearchParamId");
            DropIndex("public.MedicationStatementIxUri", "ix_Uri");
            DropIndex("public.MedicationStatementIxTok", new[] { "ResourceId" });
            DropIndex("public.MedicationStatementIxTok", "ix_SearchParamId");
            DropIndex("public.MedicationStatementIxTok", "ix_System");
            DropIndex("public.MedicationStatementIxTok", "ix_Code");
            DropIndex("public.MedicationStatementIxStr", new[] { "ResourceId" });
            DropIndex("public.MedicationStatementIxStr", "ix_SearchParamId");
            DropIndex("public.MedicationStatementIxStr", "ix_String");
            DropIndex("public.MedicationStatementIxRef", new[] { "ResourceId" });
            DropIndex("public.MedicationStatementIxRef", "ix_SearchParamId");
            DropIndex("public.MedicationStatementIxRef", "ix_RefBaseUrlId");
            DropIndex("public.MedicationStatementIxRef", "ix_RefFhirId");
            DropIndex("public.MedicationStatementIxQty", new[] { "ResourceId" });
            DropIndex("public.MedicationStatementIxQty", "ix_SearchParamId");
            DropIndex("public.MedicationStatementIxQty", "ix_System");
            DropIndex("public.MedicationStatementIxQty", "ix_Code");
            DropIndex("public.MedicationStatementIxDT", new[] { "ResourceId" });
            DropIndex("public.MedicationStatementIxDT", "ix_SearchParamId");
            DropIndex("public.MedicationStatementIxDT", "ix_HighUtcDateTime");
            DropIndex("public.MedicationStatementIxDT", "ix_LowUtcDateTime");
            DropIndex("public.MedicationStatementRes", new[] { "FhirReleaseId" });
            DropIndex("public.MedicationStatementRes", "ix_LastUpdated");
            DropIndex("public.MedicationStatementRes", "ix_IsDeleted");
            DropIndex("public.MedicationStatementRes", "uq_FhirIdAndVersionId");
            DropIndex("public.MedicationStatementRes", "ix_IsCurrent");
            DropIndex("public.MedicationRequestIxUri", new[] { "ResourceId" });
            DropIndex("public.MedicationRequestIxUri", "ix_SearchParamId");
            DropIndex("public.MedicationRequestIxUri", "ix_Uri");
            DropIndex("public.MedicationRequestIxTok", new[] { "ResourceId" });
            DropIndex("public.MedicationRequestIxTok", "ix_SearchParamId");
            DropIndex("public.MedicationRequestIxTok", "ix_System");
            DropIndex("public.MedicationRequestIxTok", "ix_Code");
            DropIndex("public.MedicationRequestIxStr", new[] { "ResourceId" });
            DropIndex("public.MedicationRequestIxStr", "ix_SearchParamId");
            DropIndex("public.MedicationRequestIxStr", "ix_String");
            DropIndex("public.MedicationRequestIxRef", new[] { "ResourceId" });
            DropIndex("public.MedicationRequestIxRef", "ix_SearchParamId");
            DropIndex("public.MedicationRequestIxRef", "ix_RefBaseUrlId");
            DropIndex("public.MedicationRequestIxRef", "ix_RefFhirId");
            DropIndex("public.MedicationRequestIxQty", new[] { "ResourceId" });
            DropIndex("public.MedicationRequestIxQty", "ix_SearchParamId");
            DropIndex("public.MedicationRequestIxQty", "ix_System");
            DropIndex("public.MedicationRequestIxQty", "ix_Code");
            DropIndex("public.MedicationRequestIxDT", new[] { "ResourceId" });
            DropIndex("public.MedicationRequestIxDT", "ix_SearchParamId");
            DropIndex("public.MedicationRequestIxDT", "ix_HighUtcDateTime");
            DropIndex("public.MedicationRequestIxDT", "ix_LowUtcDateTime");
            DropIndex("public.MedicationRequestRes", new[] { "FhirReleaseId" });
            DropIndex("public.MedicationRequestRes", "ix_LastUpdated");
            DropIndex("public.MedicationRequestRes", "ix_IsDeleted");
            DropIndex("public.MedicationRequestRes", "uq_FhirIdAndVersionId");
            DropIndex("public.MedicationRequestRes", "ix_IsCurrent");
            DropIndex("public.MedicationIxUri", new[] { "ResourceId" });
            DropIndex("public.MedicationIxUri", "ix_SearchParamId");
            DropIndex("public.MedicationIxUri", "ix_Uri");
            DropIndex("public.MedicationIxTok", new[] { "ResourceId" });
            DropIndex("public.MedicationIxTok", "ix_SearchParamId");
            DropIndex("public.MedicationIxTok", "ix_System");
            DropIndex("public.MedicationIxTok", "ix_Code");
            DropIndex("public.MedicationIxStr", new[] { "ResourceId" });
            DropIndex("public.MedicationIxStr", "ix_SearchParamId");
            DropIndex("public.MedicationIxStr", "ix_String");
            DropIndex("public.MedicationIxRef", new[] { "ResourceId" });
            DropIndex("public.MedicationIxRef", "ix_SearchParamId");
            DropIndex("public.MedicationIxRef", "ix_RefBaseUrlId");
            DropIndex("public.MedicationIxRef", "ix_RefFhirId");
            DropIndex("public.MedicationIxQty", new[] { "ResourceId" });
            DropIndex("public.MedicationIxQty", "ix_SearchParamId");
            DropIndex("public.MedicationIxQty", "ix_System");
            DropIndex("public.MedicationIxQty", "ix_Code");
            DropIndex("public.MedicationIxDT", new[] { "ResourceId" });
            DropIndex("public.MedicationIxDT", "ix_SearchParamId");
            DropIndex("public.MedicationIxDT", "ix_HighUtcDateTime");
            DropIndex("public.MedicationIxDT", "ix_LowUtcDateTime");
            DropIndex("public.MedicationRes", new[] { "FhirReleaseId" });
            DropIndex("public.MedicationRes", "ix_LastUpdated");
            DropIndex("public.MedicationRes", "ix_IsDeleted");
            DropIndex("public.MedicationRes", "uq_FhirIdAndVersionId");
            DropIndex("public.MedicationRes", "ix_IsCurrent");
            DropIndex("public.MedicationKnowledgeIxUri", new[] { "ResourceId" });
            DropIndex("public.MedicationKnowledgeIxUri", "ix_SearchParamId");
            DropIndex("public.MedicationKnowledgeIxUri", "ix_Uri");
            DropIndex("public.MedicationKnowledgeIxTok", new[] { "ResourceId" });
            DropIndex("public.MedicationKnowledgeIxTok", "ix_SearchParamId");
            DropIndex("public.MedicationKnowledgeIxTok", "ix_System");
            DropIndex("public.MedicationKnowledgeIxTok", "ix_Code");
            DropIndex("public.MedicationKnowledgeIxStr", new[] { "ResourceId" });
            DropIndex("public.MedicationKnowledgeIxStr", "ix_SearchParamId");
            DropIndex("public.MedicationKnowledgeIxStr", "ix_String");
            DropIndex("public.MedicationKnowledgeIxRef", new[] { "ResourceId" });
            DropIndex("public.MedicationKnowledgeIxRef", "ix_SearchParamId");
            DropIndex("public.MedicationKnowledgeIxRef", "ix_RefBaseUrlId");
            DropIndex("public.MedicationKnowledgeIxRef", "ix_RefFhirId");
            DropIndex("public.MedicationKnowledgeIxQty", new[] { "ResourceId" });
            DropIndex("public.MedicationKnowledgeIxQty", "ix_SearchParamId");
            DropIndex("public.MedicationKnowledgeIxQty", "ix_System");
            DropIndex("public.MedicationKnowledgeIxQty", "ix_Code");
            DropIndex("public.MedicationKnowledgeIxDT", new[] { "ResourceId" });
            DropIndex("public.MedicationKnowledgeIxDT", "ix_SearchParamId");
            DropIndex("public.MedicationKnowledgeIxDT", "ix_HighUtcDateTime");
            DropIndex("public.MedicationKnowledgeIxDT", "ix_LowUtcDateTime");
            DropIndex("public.MedicationKnowledgeRes", new[] { "FhirReleaseId" });
            DropIndex("public.MedicationKnowledgeRes", "ix_LastUpdated");
            DropIndex("public.MedicationKnowledgeRes", "ix_IsDeleted");
            DropIndex("public.MedicationKnowledgeRes", "uq_FhirIdAndVersionId");
            DropIndex("public.MedicationKnowledgeRes", "ix_IsCurrent");
            DropIndex("public.MedicationDispenseIxUri", new[] { "ResourceId" });
            DropIndex("public.MedicationDispenseIxUri", "ix_SearchParamId");
            DropIndex("public.MedicationDispenseIxUri", "ix_Uri");
            DropIndex("public.MedicationDispenseIxTok", new[] { "ResourceId" });
            DropIndex("public.MedicationDispenseIxTok", "ix_SearchParamId");
            DropIndex("public.MedicationDispenseIxTok", "ix_System");
            DropIndex("public.MedicationDispenseIxTok", "ix_Code");
            DropIndex("public.MedicationDispenseIxStr", new[] { "ResourceId" });
            DropIndex("public.MedicationDispenseIxStr", "ix_SearchParamId");
            DropIndex("public.MedicationDispenseIxStr", "ix_String");
            DropIndex("public.MedicationDispenseIxRef", new[] { "ResourceId" });
            DropIndex("public.MedicationDispenseIxRef", "ix_SearchParamId");
            DropIndex("public.MedicationDispenseIxRef", "ix_RefBaseUrlId");
            DropIndex("public.MedicationDispenseIxRef", "ix_RefFhirId");
            DropIndex("public.MedicationDispenseIxQty", new[] { "ResourceId" });
            DropIndex("public.MedicationDispenseIxQty", "ix_SearchParamId");
            DropIndex("public.MedicationDispenseIxQty", "ix_System");
            DropIndex("public.MedicationDispenseIxQty", "ix_Code");
            DropIndex("public.MedicationDispenseIxDT", new[] { "ResourceId" });
            DropIndex("public.MedicationDispenseIxDT", "ix_SearchParamId");
            DropIndex("public.MedicationDispenseIxDT", "ix_HighUtcDateTime");
            DropIndex("public.MedicationDispenseIxDT", "ix_LowUtcDateTime");
            DropIndex("public.MedicationDispenseRes", new[] { "FhirReleaseId" });
            DropIndex("public.MedicationDispenseRes", "ix_LastUpdated");
            DropIndex("public.MedicationDispenseRes", "ix_IsDeleted");
            DropIndex("public.MedicationDispenseRes", "uq_FhirIdAndVersionId");
            DropIndex("public.MedicationDispenseRes", "ix_IsCurrent");
            DropIndex("public.MedicationAdministrationIxUri", new[] { "ResourceId" });
            DropIndex("public.MedicationAdministrationIxUri", "ix_SearchParamId");
            DropIndex("public.MedicationAdministrationIxUri", "ix_Uri");
            DropIndex("public.MedicationAdministrationIxTok", new[] { "ResourceId" });
            DropIndex("public.MedicationAdministrationIxTok", "ix_SearchParamId");
            DropIndex("public.MedicationAdministrationIxTok", "ix_System");
            DropIndex("public.MedicationAdministrationIxTok", "ix_Code");
            DropIndex("public.MedicationAdministrationIxStr", new[] { "ResourceId" });
            DropIndex("public.MedicationAdministrationIxStr", "ix_SearchParamId");
            DropIndex("public.MedicationAdministrationIxStr", "ix_String");
            DropIndex("public.MedicationAdministrationIxRef", new[] { "ResourceId" });
            DropIndex("public.MedicationAdministrationIxRef", "ix_SearchParamId");
            DropIndex("public.MedicationAdministrationIxRef", "ix_RefBaseUrlId");
            DropIndex("public.MedicationAdministrationIxRef", "ix_RefFhirId");
            DropIndex("public.MedicationAdministrationIxQty", new[] { "ResourceId" });
            DropIndex("public.MedicationAdministrationIxQty", "ix_SearchParamId");
            DropIndex("public.MedicationAdministrationIxQty", "ix_System");
            DropIndex("public.MedicationAdministrationIxQty", "ix_Code");
            DropIndex("public.MedicationAdministrationIxDT", new[] { "ResourceId" });
            DropIndex("public.MedicationAdministrationIxDT", "ix_SearchParamId");
            DropIndex("public.MedicationAdministrationIxDT", "ix_HighUtcDateTime");
            DropIndex("public.MedicationAdministrationIxDT", "ix_LowUtcDateTime");
            DropIndex("public.MedicationAdministrationRes", new[] { "FhirReleaseId" });
            DropIndex("public.MedicationAdministrationRes", "ix_LastUpdated");
            DropIndex("public.MedicationAdministrationRes", "ix_IsDeleted");
            DropIndex("public.MedicationAdministrationRes", "uq_FhirIdAndVersionId");
            DropIndex("public.MedicationAdministrationRes", "ix_IsCurrent");
            DropIndex("public.MediaIxUri", new[] { "ResourceId" });
            DropIndex("public.MediaIxUri", "ix_SearchParamId");
            DropIndex("public.MediaIxUri", "ix_Uri");
            DropIndex("public.MediaIxTok", new[] { "ResourceId" });
            DropIndex("public.MediaIxTok", "ix_SearchParamId");
            DropIndex("public.MediaIxTok", "ix_System");
            DropIndex("public.MediaIxTok", "ix_Code");
            DropIndex("public.MediaIxStr", new[] { "ResourceId" });
            DropIndex("public.MediaIxStr", "ix_SearchParamId");
            DropIndex("public.MediaIxStr", "ix_String");
            DropIndex("public.MediaIxRef", new[] { "ResourceId" });
            DropIndex("public.MediaIxRef", "ix_SearchParamId");
            DropIndex("public.MediaIxRef", "ix_RefBaseUrlId");
            DropIndex("public.MediaIxRef", "ix_RefFhirId");
            DropIndex("public.MediaIxQty", new[] { "ResourceId" });
            DropIndex("public.MediaIxQty", "ix_SearchParamId");
            DropIndex("public.MediaIxQty", "ix_System");
            DropIndex("public.MediaIxQty", "ix_Code");
            DropIndex("public.MediaIxDT", new[] { "ResourceId" });
            DropIndex("public.MediaIxDT", "ix_SearchParamId");
            DropIndex("public.MediaIxDT", "ix_HighUtcDateTime");
            DropIndex("public.MediaIxDT", "ix_LowUtcDateTime");
            DropIndex("public.MediaRes", new[] { "FhirReleaseId" });
            DropIndex("public.MediaRes", "ix_LastUpdated");
            DropIndex("public.MediaRes", "ix_IsDeleted");
            DropIndex("public.MediaRes", "uq_FhirIdAndVersionId");
            DropIndex("public.MediaRes", "ix_IsCurrent");
            DropIndex("public.MeasureReportIxUri", new[] { "ResourceId" });
            DropIndex("public.MeasureReportIxUri", "ix_SearchParamId");
            DropIndex("public.MeasureReportIxUri", "ix_Uri");
            DropIndex("public.MeasureReportIxTok", new[] { "ResourceId" });
            DropIndex("public.MeasureReportIxTok", "ix_SearchParamId");
            DropIndex("public.MeasureReportIxTok", "ix_System");
            DropIndex("public.MeasureReportIxTok", "ix_Code");
            DropIndex("public.MeasureReportIxStr", new[] { "ResourceId" });
            DropIndex("public.MeasureReportIxStr", "ix_SearchParamId");
            DropIndex("public.MeasureReportIxStr", "ix_String");
            DropIndex("public.MeasureReportIxRef", new[] { "ResourceId" });
            DropIndex("public.MeasureReportIxRef", "ix_SearchParamId");
            DropIndex("public.MeasureReportIxRef", "ix_RefBaseUrlId");
            DropIndex("public.MeasureReportIxRef", "ix_RefFhirId");
            DropIndex("public.MeasureReportIxQty", new[] { "ResourceId" });
            DropIndex("public.MeasureReportIxQty", "ix_SearchParamId");
            DropIndex("public.MeasureReportIxQty", "ix_System");
            DropIndex("public.MeasureReportIxQty", "ix_Code");
            DropIndex("public.MeasureReportIxDT", new[] { "ResourceId" });
            DropIndex("public.MeasureReportIxDT", "ix_SearchParamId");
            DropIndex("public.MeasureReportIxDT", "ix_HighUtcDateTime");
            DropIndex("public.MeasureReportIxDT", "ix_LowUtcDateTime");
            DropIndex("public.MeasureReportRes", new[] { "FhirReleaseId" });
            DropIndex("public.MeasureReportRes", "ix_LastUpdated");
            DropIndex("public.MeasureReportRes", "ix_IsDeleted");
            DropIndex("public.MeasureReportRes", "uq_FhirIdAndVersionId");
            DropIndex("public.MeasureReportRes", "ix_IsCurrent");
            DropIndex("public.MeasureIxUri", new[] { "ResourceId" });
            DropIndex("public.MeasureIxUri", "ix_SearchParamId");
            DropIndex("public.MeasureIxUri", "ix_Uri");
            DropIndex("public.MeasureIxTok", new[] { "ResourceId" });
            DropIndex("public.MeasureIxTok", "ix_SearchParamId");
            DropIndex("public.MeasureIxTok", "ix_System");
            DropIndex("public.MeasureIxTok", "ix_Code");
            DropIndex("public.MeasureIxStr", new[] { "ResourceId" });
            DropIndex("public.MeasureIxStr", "ix_SearchParamId");
            DropIndex("public.MeasureIxStr", "ix_String");
            DropIndex("public.MeasureIxRef", new[] { "ResourceId" });
            DropIndex("public.MeasureIxRef", "ix_SearchParamId");
            DropIndex("public.MeasureIxRef", "ix_RefBaseUrlId");
            DropIndex("public.MeasureIxRef", "ix_RefFhirId");
            DropIndex("public.MeasureIxQty", new[] { "ResourceId" });
            DropIndex("public.MeasureIxQty", "ix_SearchParamId");
            DropIndex("public.MeasureIxQty", "ix_System");
            DropIndex("public.MeasureIxQty", "ix_Code");
            DropIndex("public.MeasureIxDT", new[] { "ResourceId" });
            DropIndex("public.MeasureIxDT", "ix_SearchParamId");
            DropIndex("public.MeasureIxDT", "ix_HighUtcDateTime");
            DropIndex("public.MeasureIxDT", "ix_LowUtcDateTime");
            DropIndex("public.MeasureRes", new[] { "FhirReleaseId" });
            DropIndex("public.MeasureRes", "ix_LastUpdated");
            DropIndex("public.MeasureRes", "ix_IsDeleted");
            DropIndex("public.MeasureRes", "uq_FhirIdAndVersionId");
            DropIndex("public.MeasureRes", "ix_IsCurrent");
            DropIndex("public.LocationIxUri", new[] { "ResourceId" });
            DropIndex("public.LocationIxUri", "ix_SearchParamId");
            DropIndex("public.LocationIxUri", "ix_Uri");
            DropIndex("public.LocationIxTok", new[] { "ResourceId" });
            DropIndex("public.LocationIxTok", "ix_SearchParamId");
            DropIndex("public.LocationIxTok", "ix_System");
            DropIndex("public.LocationIxTok", "ix_Code");
            DropIndex("public.LocationIxStr", new[] { "ResourceId" });
            DropIndex("public.LocationIxStr", "ix_SearchParamId");
            DropIndex("public.LocationIxStr", "ix_String");
            DropIndex("public.LocationIxRef", new[] { "ResourceId" });
            DropIndex("public.LocationIxRef", "ix_SearchParamId");
            DropIndex("public.LocationIxRef", "ix_RefBaseUrlId");
            DropIndex("public.LocationIxRef", "ix_RefFhirId");
            DropIndex("public.LocationIxQty", new[] { "ResourceId" });
            DropIndex("public.LocationIxQty", "ix_SearchParamId");
            DropIndex("public.LocationIxQty", "ix_System");
            DropIndex("public.LocationIxQty", "ix_Code");
            DropIndex("public.LocationIxDT", new[] { "ResourceId" });
            DropIndex("public.LocationIxDT", "ix_SearchParamId");
            DropIndex("public.LocationIxDT", "ix_HighUtcDateTime");
            DropIndex("public.LocationIxDT", "ix_LowUtcDateTime");
            DropIndex("public.LocationRes", new[] { "FhirReleaseId" });
            DropIndex("public.LocationRes", "ix_LastUpdated");
            DropIndex("public.LocationRes", "ix_IsDeleted");
            DropIndex("public.LocationRes", "uq_FhirIdAndVersionId");
            DropIndex("public.LocationRes", "ix_IsCurrent");
            DropIndex("public.ListIxUri", new[] { "ResourceId" });
            DropIndex("public.ListIxUri", "ix_SearchParamId");
            DropIndex("public.ListIxUri", "ix_Uri");
            DropIndex("public.ListIxTok", new[] { "ResourceId" });
            DropIndex("public.ListIxTok", "ix_SearchParamId");
            DropIndex("public.ListIxTok", "ix_System");
            DropIndex("public.ListIxTok", "ix_Code");
            DropIndex("public.ListIxStr", new[] { "ResourceId" });
            DropIndex("public.ListIxStr", "ix_SearchParamId");
            DropIndex("public.ListIxStr", "ix_String");
            DropIndex("public.ListIxRef", new[] { "ResourceId" });
            DropIndex("public.ListIxRef", "ix_SearchParamId");
            DropIndex("public.ListIxRef", "ix_RefBaseUrlId");
            DropIndex("public.ListIxRef", "ix_RefFhirId");
            DropIndex("public.ListIxQty", new[] { "ResourceId" });
            DropIndex("public.ListIxQty", "ix_SearchParamId");
            DropIndex("public.ListIxQty", "ix_System");
            DropIndex("public.ListIxQty", "ix_Code");
            DropIndex("public.ListIxDT", new[] { "ResourceId" });
            DropIndex("public.ListIxDT", "ix_SearchParamId");
            DropIndex("public.ListIxDT", "ix_HighUtcDateTime");
            DropIndex("public.ListIxDT", "ix_LowUtcDateTime");
            DropIndex("public.ListRes", new[] { "FhirReleaseId" });
            DropIndex("public.ListRes", "ix_LastUpdated");
            DropIndex("public.ListRes", "ix_IsDeleted");
            DropIndex("public.ListRes", "uq_FhirIdAndVersionId");
            DropIndex("public.ListRes", "ix_IsCurrent");
            DropIndex("public.LinkageIxUri", new[] { "ResourceId" });
            DropIndex("public.LinkageIxUri", "ix_SearchParamId");
            DropIndex("public.LinkageIxUri", "ix_Uri");
            DropIndex("public.LinkageIxTok", new[] { "ResourceId" });
            DropIndex("public.LinkageIxTok", "ix_SearchParamId");
            DropIndex("public.LinkageIxTok", "ix_System");
            DropIndex("public.LinkageIxTok", "ix_Code");
            DropIndex("public.LinkageIxStr", new[] { "ResourceId" });
            DropIndex("public.LinkageIxStr", "ix_SearchParamId");
            DropIndex("public.LinkageIxStr", "ix_String");
            DropIndex("public.LinkageIxRef", new[] { "ResourceId" });
            DropIndex("public.LinkageIxRef", "ix_SearchParamId");
            DropIndex("public.LinkageIxRef", "ix_RefBaseUrlId");
            DropIndex("public.LinkageIxRef", "ix_RefFhirId");
            DropIndex("public.LinkageIxQty", new[] { "ResourceId" });
            DropIndex("public.LinkageIxQty", "ix_SearchParamId");
            DropIndex("public.LinkageIxQty", "ix_System");
            DropIndex("public.LinkageIxQty", "ix_Code");
            DropIndex("public.LinkageIxDT", new[] { "ResourceId" });
            DropIndex("public.LinkageIxDT", "ix_SearchParamId");
            DropIndex("public.LinkageIxDT", "ix_HighUtcDateTime");
            DropIndex("public.LinkageIxDT", "ix_LowUtcDateTime");
            DropIndex("public.LinkageRes", new[] { "FhirReleaseId" });
            DropIndex("public.LinkageRes", "ix_LastUpdated");
            DropIndex("public.LinkageRes", "ix_IsDeleted");
            DropIndex("public.LinkageRes", "uq_FhirIdAndVersionId");
            DropIndex("public.LinkageRes", "ix_IsCurrent");
            DropIndex("public.LibraryIxUri", new[] { "ResourceId" });
            DropIndex("public.LibraryIxUri", "ix_SearchParamId");
            DropIndex("public.LibraryIxUri", "ix_Uri");
            DropIndex("public.LibraryIxTok", new[] { "ResourceId" });
            DropIndex("public.LibraryIxTok", "ix_SearchParamId");
            DropIndex("public.LibraryIxTok", "ix_System");
            DropIndex("public.LibraryIxTok", "ix_Code");
            DropIndex("public.LibraryIxStr", new[] { "ResourceId" });
            DropIndex("public.LibraryIxStr", "ix_SearchParamId");
            DropIndex("public.LibraryIxStr", "ix_String");
            DropIndex("public.LibraryIxRef", new[] { "ResourceId" });
            DropIndex("public.LibraryIxRef", "ix_SearchParamId");
            DropIndex("public.LibraryIxRef", "ix_RefBaseUrlId");
            DropIndex("public.LibraryIxRef", "ix_RefFhirId");
            DropIndex("public.LibraryIxQty", new[] { "ResourceId" });
            DropIndex("public.LibraryIxQty", "ix_SearchParamId");
            DropIndex("public.LibraryIxQty", "ix_System");
            DropIndex("public.LibraryIxQty", "ix_Code");
            DropIndex("public.LibraryIxDT", new[] { "ResourceId" });
            DropIndex("public.LibraryIxDT", "ix_SearchParamId");
            DropIndex("public.LibraryIxDT", "ix_HighUtcDateTime");
            DropIndex("public.LibraryIxDT", "ix_LowUtcDateTime");
            DropIndex("public.LibraryRes", new[] { "FhirReleaseId" });
            DropIndex("public.LibraryRes", "ix_LastUpdated");
            DropIndex("public.LibraryRes", "ix_IsDeleted");
            DropIndex("public.LibraryRes", "uq_FhirIdAndVersionId");
            DropIndex("public.LibraryRes", "ix_IsCurrent");
            DropIndex("public.ItemInstanceIxUri", new[] { "ResourceId" });
            DropIndex("public.ItemInstanceIxUri", "ix_SearchParamId");
            DropIndex("public.ItemInstanceIxUri", "ix_Uri");
            DropIndex("public.ItemInstanceIxTok", new[] { "ResourceId" });
            DropIndex("public.ItemInstanceIxTok", "ix_SearchParamId");
            DropIndex("public.ItemInstanceIxTok", "ix_System");
            DropIndex("public.ItemInstanceIxTok", "ix_Code");
            DropIndex("public.ItemInstanceIxStr", new[] { "ResourceId" });
            DropIndex("public.ItemInstanceIxStr", "ix_SearchParamId");
            DropIndex("public.ItemInstanceIxStr", "ix_String");
            DropIndex("public.ItemInstanceIxRef", new[] { "ResourceId" });
            DropIndex("public.ItemInstanceIxRef", "ix_SearchParamId");
            DropIndex("public.ItemInstanceIxRef", "ix_RefBaseUrlId");
            DropIndex("public.ItemInstanceIxRef", "ix_RefFhirId");
            DropIndex("public.ItemInstanceIxQty", new[] { "ResourceId" });
            DropIndex("public.ItemInstanceIxQty", "ix_SearchParamId");
            DropIndex("public.ItemInstanceIxQty", "ix_System");
            DropIndex("public.ItemInstanceIxQty", "ix_Code");
            DropIndex("public.ItemInstanceIxDT", new[] { "ResourceId" });
            DropIndex("public.ItemInstanceIxDT", "ix_SearchParamId");
            DropIndex("public.ItemInstanceIxDT", "ix_HighUtcDateTime");
            DropIndex("public.ItemInstanceIxDT", "ix_LowUtcDateTime");
            DropIndex("public.ItemInstanceRes", new[] { "FhirReleaseId" });
            DropIndex("public.ItemInstanceRes", "ix_LastUpdated");
            DropIndex("public.ItemInstanceRes", "ix_IsDeleted");
            DropIndex("public.ItemInstanceRes", "uq_FhirIdAndVersionId");
            DropIndex("public.ItemInstanceRes", "ix_IsCurrent");
            DropIndex("public.InvoiceIxUri", new[] { "ResourceId" });
            DropIndex("public.InvoiceIxUri", "ix_SearchParamId");
            DropIndex("public.InvoiceIxUri", "ix_Uri");
            DropIndex("public.InvoiceIxTok", new[] { "ResourceId" });
            DropIndex("public.InvoiceIxTok", "ix_SearchParamId");
            DropIndex("public.InvoiceIxTok", "ix_System");
            DropIndex("public.InvoiceIxTok", "ix_Code");
            DropIndex("public.InvoiceIxStr", new[] { "ResourceId" });
            DropIndex("public.InvoiceIxStr", "ix_SearchParamId");
            DropIndex("public.InvoiceIxStr", "ix_String");
            DropIndex("public.InvoiceIxRef", new[] { "ResourceId" });
            DropIndex("public.InvoiceIxRef", "ix_SearchParamId");
            DropIndex("public.InvoiceIxRef", "ix_RefBaseUrlId");
            DropIndex("public.InvoiceIxRef", "ix_RefFhirId");
            DropIndex("public.InvoiceIxQty", new[] { "ResourceId" });
            DropIndex("public.InvoiceIxQty", "ix_SearchParamId");
            DropIndex("public.InvoiceIxQty", "ix_System");
            DropIndex("public.InvoiceIxQty", "ix_Code");
            DropIndex("public.InvoiceIxDT", new[] { "ResourceId" });
            DropIndex("public.InvoiceIxDT", "ix_SearchParamId");
            DropIndex("public.InvoiceIxDT", "ix_HighUtcDateTime");
            DropIndex("public.InvoiceIxDT", "ix_LowUtcDateTime");
            DropIndex("public.InvoiceRes", new[] { "FhirReleaseId" });
            DropIndex("public.InvoiceRes", "ix_LastUpdated");
            DropIndex("public.InvoiceRes", "ix_IsDeleted");
            DropIndex("public.InvoiceRes", "uq_FhirIdAndVersionId");
            DropIndex("public.InvoiceRes", "ix_IsCurrent");
            DropIndex("public.InsurancePlanIxUri", new[] { "ResourceId" });
            DropIndex("public.InsurancePlanIxUri", "ix_SearchParamId");
            DropIndex("public.InsurancePlanIxUri", "ix_Uri");
            DropIndex("public.InsurancePlanIxTok", new[] { "ResourceId" });
            DropIndex("public.InsurancePlanIxTok", "ix_SearchParamId");
            DropIndex("public.InsurancePlanIxTok", "ix_System");
            DropIndex("public.InsurancePlanIxTok", "ix_Code");
            DropIndex("public.InsurancePlanIxStr", new[] { "ResourceId" });
            DropIndex("public.InsurancePlanIxStr", "ix_SearchParamId");
            DropIndex("public.InsurancePlanIxStr", "ix_String");
            DropIndex("public.InsurancePlanIxRef", new[] { "ResourceId" });
            DropIndex("public.InsurancePlanIxRef", "ix_SearchParamId");
            DropIndex("public.InsurancePlanIxRef", "ix_RefBaseUrlId");
            DropIndex("public.InsurancePlanIxRef", "ix_RefFhirId");
            DropIndex("public.InsurancePlanIxQty", new[] { "ResourceId" });
            DropIndex("public.InsurancePlanIxQty", "ix_SearchParamId");
            DropIndex("public.InsurancePlanIxQty", "ix_System");
            DropIndex("public.InsurancePlanIxQty", "ix_Code");
            DropIndex("public.InsurancePlanIxDT", new[] { "ResourceId" });
            DropIndex("public.InsurancePlanIxDT", "ix_SearchParamId");
            DropIndex("public.InsurancePlanIxDT", "ix_HighUtcDateTime");
            DropIndex("public.InsurancePlanIxDT", "ix_LowUtcDateTime");
            DropIndex("public.InsurancePlanRes", new[] { "FhirReleaseId" });
            DropIndex("public.InsurancePlanRes", "ix_LastUpdated");
            DropIndex("public.InsurancePlanRes", "ix_IsDeleted");
            DropIndex("public.InsurancePlanRes", "uq_FhirIdAndVersionId");
            DropIndex("public.InsurancePlanRes", "ix_IsCurrent");
            DropIndex("public.ImplementationGuideIxUri", new[] { "ResourceId" });
            DropIndex("public.ImplementationGuideIxUri", "ix_SearchParamId");
            DropIndex("public.ImplementationGuideIxUri", "ix_Uri");
            DropIndex("public.ImplementationGuideIxTok", new[] { "ResourceId" });
            DropIndex("public.ImplementationGuideIxTok", "ix_SearchParamId");
            DropIndex("public.ImplementationGuideIxTok", "ix_System");
            DropIndex("public.ImplementationGuideIxTok", "ix_Code");
            DropIndex("public.ImplementationGuideIxStr", new[] { "ResourceId" });
            DropIndex("public.ImplementationGuideIxStr", "ix_SearchParamId");
            DropIndex("public.ImplementationGuideIxStr", "ix_String");
            DropIndex("public.ImplementationGuideIxRef", new[] { "ResourceId" });
            DropIndex("public.ImplementationGuideIxRef", "ix_SearchParamId");
            DropIndex("public.ImplementationGuideIxRef", "ix_RefBaseUrlId");
            DropIndex("public.ImplementationGuideIxRef", "ix_RefFhirId");
            DropIndex("public.ImplementationGuideIxQty", new[] { "ResourceId" });
            DropIndex("public.ImplementationGuideIxQty", "ix_SearchParamId");
            DropIndex("public.ImplementationGuideIxQty", "ix_System");
            DropIndex("public.ImplementationGuideIxQty", "ix_Code");
            DropIndex("public.ImplementationGuideIxDT", new[] { "ResourceId" });
            DropIndex("public.ImplementationGuideIxDT", "ix_SearchParamId");
            DropIndex("public.ImplementationGuideIxDT", "ix_HighUtcDateTime");
            DropIndex("public.ImplementationGuideIxDT", "ix_LowUtcDateTime");
            DropIndex("public.ImplementationGuideRes", new[] { "FhirReleaseId" });
            DropIndex("public.ImplementationGuideRes", "ix_LastUpdated");
            DropIndex("public.ImplementationGuideRes", "ix_IsDeleted");
            DropIndex("public.ImplementationGuideRes", "uq_FhirIdAndVersionId");
            DropIndex("public.ImplementationGuideRes", "ix_IsCurrent");
            DropIndex("public.ImmunizationRecommendationIxUri", new[] { "ResourceId" });
            DropIndex("public.ImmunizationRecommendationIxUri", "ix_SearchParamId");
            DropIndex("public.ImmunizationRecommendationIxUri", "ix_Uri");
            DropIndex("public.ImmunizationRecommendationIxTok", new[] { "ResourceId" });
            DropIndex("public.ImmunizationRecommendationIxTok", "ix_SearchParamId");
            DropIndex("public.ImmunizationRecommendationIxTok", "ix_System");
            DropIndex("public.ImmunizationRecommendationIxTok", "ix_Code");
            DropIndex("public.ImmunizationRecommendationIxStr", new[] { "ResourceId" });
            DropIndex("public.ImmunizationRecommendationIxStr", "ix_SearchParamId");
            DropIndex("public.ImmunizationRecommendationIxStr", "ix_String");
            DropIndex("public.ImmunizationRecommendationIxRef", new[] { "ResourceId" });
            DropIndex("public.ImmunizationRecommendationIxRef", "ix_SearchParamId");
            DropIndex("public.ImmunizationRecommendationIxRef", "ix_RefBaseUrlId");
            DropIndex("public.ImmunizationRecommendationIxRef", "ix_RefFhirId");
            DropIndex("public.ImmunizationRecommendationIxQty", new[] { "ResourceId" });
            DropIndex("public.ImmunizationRecommendationIxQty", "ix_SearchParamId");
            DropIndex("public.ImmunizationRecommendationIxQty", "ix_System");
            DropIndex("public.ImmunizationRecommendationIxQty", "ix_Code");
            DropIndex("public.ImmunizationRecommendationIxDT", new[] { "ResourceId" });
            DropIndex("public.ImmunizationRecommendationIxDT", "ix_SearchParamId");
            DropIndex("public.ImmunizationRecommendationIxDT", "ix_HighUtcDateTime");
            DropIndex("public.ImmunizationRecommendationIxDT", "ix_LowUtcDateTime");
            DropIndex("public.ImmunizationRecommendationRes", new[] { "FhirReleaseId" });
            DropIndex("public.ImmunizationRecommendationRes", "ix_LastUpdated");
            DropIndex("public.ImmunizationRecommendationRes", "ix_IsDeleted");
            DropIndex("public.ImmunizationRecommendationRes", "uq_FhirIdAndVersionId");
            DropIndex("public.ImmunizationRecommendationRes", "ix_IsCurrent");
            DropIndex("public.ImmunizationIxUri", new[] { "ResourceId" });
            DropIndex("public.ImmunizationIxUri", "ix_SearchParamId");
            DropIndex("public.ImmunizationIxUri", "ix_Uri");
            DropIndex("public.ImmunizationIxTok", new[] { "ResourceId" });
            DropIndex("public.ImmunizationIxTok", "ix_SearchParamId");
            DropIndex("public.ImmunizationIxTok", "ix_System");
            DropIndex("public.ImmunizationIxTok", "ix_Code");
            DropIndex("public.ImmunizationIxStr", new[] { "ResourceId" });
            DropIndex("public.ImmunizationIxStr", "ix_SearchParamId");
            DropIndex("public.ImmunizationIxStr", "ix_String");
            DropIndex("public.ImmunizationIxRef", new[] { "ResourceId" });
            DropIndex("public.ImmunizationIxRef", "ix_SearchParamId");
            DropIndex("public.ImmunizationIxRef", "ix_RefBaseUrlId");
            DropIndex("public.ImmunizationIxRef", "ix_RefFhirId");
            DropIndex("public.ImmunizationIxQty", new[] { "ResourceId" });
            DropIndex("public.ImmunizationIxQty", "ix_SearchParamId");
            DropIndex("public.ImmunizationIxQty", "ix_System");
            DropIndex("public.ImmunizationIxQty", "ix_Code");
            DropIndex("public.ImmunizationIxDT", new[] { "ResourceId" });
            DropIndex("public.ImmunizationIxDT", "ix_SearchParamId");
            DropIndex("public.ImmunizationIxDT", "ix_HighUtcDateTime");
            DropIndex("public.ImmunizationIxDT", "ix_LowUtcDateTime");
            DropIndex("public.ImmunizationRes", new[] { "FhirReleaseId" });
            DropIndex("public.ImmunizationRes", "ix_LastUpdated");
            DropIndex("public.ImmunizationRes", "ix_IsDeleted");
            DropIndex("public.ImmunizationRes", "uq_FhirIdAndVersionId");
            DropIndex("public.ImmunizationRes", "ix_IsCurrent");
            DropIndex("public.ImmunizationEvaluationIxUri", new[] { "ResourceId" });
            DropIndex("public.ImmunizationEvaluationIxUri", "ix_SearchParamId");
            DropIndex("public.ImmunizationEvaluationIxUri", "ix_Uri");
            DropIndex("public.ImmunizationEvaluationIxTok", new[] { "ResourceId" });
            DropIndex("public.ImmunizationEvaluationIxTok", "ix_SearchParamId");
            DropIndex("public.ImmunizationEvaluationIxTok", "ix_System");
            DropIndex("public.ImmunizationEvaluationIxTok", "ix_Code");
            DropIndex("public.ImmunizationEvaluationIxStr", new[] { "ResourceId" });
            DropIndex("public.ImmunizationEvaluationIxStr", "ix_SearchParamId");
            DropIndex("public.ImmunizationEvaluationIxStr", "ix_String");
            DropIndex("public.ImmunizationEvaluationIxRef", new[] { "ResourceId" });
            DropIndex("public.ImmunizationEvaluationIxRef", "ix_SearchParamId");
            DropIndex("public.ImmunizationEvaluationIxRef", "ix_RefBaseUrlId");
            DropIndex("public.ImmunizationEvaluationIxRef", "ix_RefFhirId");
            DropIndex("public.ImmunizationEvaluationIxQty", new[] { "ResourceId" });
            DropIndex("public.ImmunizationEvaluationIxQty", "ix_SearchParamId");
            DropIndex("public.ImmunizationEvaluationIxQty", "ix_System");
            DropIndex("public.ImmunizationEvaluationIxQty", "ix_Code");
            DropIndex("public.ImmunizationEvaluationIxDT", new[] { "ResourceId" });
            DropIndex("public.ImmunizationEvaluationIxDT", "ix_SearchParamId");
            DropIndex("public.ImmunizationEvaluationIxDT", "ix_HighUtcDateTime");
            DropIndex("public.ImmunizationEvaluationIxDT", "ix_LowUtcDateTime");
            DropIndex("public.ImmunizationEvaluationRes", new[] { "FhirReleaseId" });
            DropIndex("public.ImmunizationEvaluationRes", "ix_LastUpdated");
            DropIndex("public.ImmunizationEvaluationRes", "ix_IsDeleted");
            DropIndex("public.ImmunizationEvaluationRes", "uq_FhirIdAndVersionId");
            DropIndex("public.ImmunizationEvaluationRes", "ix_IsCurrent");
            DropIndex("public.ImagingStudyIxUri", new[] { "ResourceId" });
            DropIndex("public.ImagingStudyIxUri", "ix_SearchParamId");
            DropIndex("public.ImagingStudyIxUri", "ix_Uri");
            DropIndex("public.ImagingStudyIxTok", new[] { "ResourceId" });
            DropIndex("public.ImagingStudyIxTok", "ix_SearchParamId");
            DropIndex("public.ImagingStudyIxTok", "ix_System");
            DropIndex("public.ImagingStudyIxTok", "ix_Code");
            DropIndex("public.ImagingStudyIxStr", new[] { "ResourceId" });
            DropIndex("public.ImagingStudyIxStr", "ix_SearchParamId");
            DropIndex("public.ImagingStudyIxStr", "ix_String");
            DropIndex("public.ImagingStudyIxRef", new[] { "ResourceId" });
            DropIndex("public.ImagingStudyIxRef", "ix_SearchParamId");
            DropIndex("public.ImagingStudyIxRef", "ix_RefBaseUrlId");
            DropIndex("public.ImagingStudyIxRef", "ix_RefFhirId");
            DropIndex("public.ImagingStudyIxQty", new[] { "ResourceId" });
            DropIndex("public.ImagingStudyIxQty", "ix_SearchParamId");
            DropIndex("public.ImagingStudyIxQty", "ix_System");
            DropIndex("public.ImagingStudyIxQty", "ix_Code");
            DropIndex("public.ImagingStudyIxDT", new[] { "ResourceId" });
            DropIndex("public.ImagingStudyIxDT", "ix_SearchParamId");
            DropIndex("public.ImagingStudyIxDT", "ix_HighUtcDateTime");
            DropIndex("public.ImagingStudyIxDT", "ix_LowUtcDateTime");
            DropIndex("public.ImagingStudyRes", new[] { "FhirReleaseId" });
            DropIndex("public.ImagingStudyRes", "ix_LastUpdated");
            DropIndex("public.ImagingStudyRes", "ix_IsDeleted");
            DropIndex("public.ImagingStudyRes", "uq_FhirIdAndVersionId");
            DropIndex("public.ImagingStudyRes", "ix_IsCurrent");
            DropIndex("public.HealthcareServiceIxUri", new[] { "ResourceId" });
            DropIndex("public.HealthcareServiceIxUri", "ix_SearchParamId");
            DropIndex("public.HealthcareServiceIxUri", "ix_Uri");
            DropIndex("public.HealthcareServiceIxTok", new[] { "ResourceId" });
            DropIndex("public.HealthcareServiceIxTok", "ix_SearchParamId");
            DropIndex("public.HealthcareServiceIxTok", "ix_System");
            DropIndex("public.HealthcareServiceIxTok", "ix_Code");
            DropIndex("public.HealthcareServiceIxStr", new[] { "ResourceId" });
            DropIndex("public.HealthcareServiceIxStr", "ix_SearchParamId");
            DropIndex("public.HealthcareServiceIxStr", "ix_String");
            DropIndex("public.HealthcareServiceIxRef", new[] { "ResourceId" });
            DropIndex("public.HealthcareServiceIxRef", "ix_SearchParamId");
            DropIndex("public.HealthcareServiceIxRef", "ix_RefBaseUrlId");
            DropIndex("public.HealthcareServiceIxRef", "ix_RefFhirId");
            DropIndex("public.HealthcareServiceIxQty", new[] { "ResourceId" });
            DropIndex("public.HealthcareServiceIxQty", "ix_SearchParamId");
            DropIndex("public.HealthcareServiceIxQty", "ix_System");
            DropIndex("public.HealthcareServiceIxQty", "ix_Code");
            DropIndex("public.HealthcareServiceIxDT", new[] { "ResourceId" });
            DropIndex("public.HealthcareServiceIxDT", "ix_SearchParamId");
            DropIndex("public.HealthcareServiceIxDT", "ix_HighUtcDateTime");
            DropIndex("public.HealthcareServiceIxDT", "ix_LowUtcDateTime");
            DropIndex("public.HealthcareServiceRes", new[] { "FhirReleaseId" });
            DropIndex("public.HealthcareServiceRes", "ix_LastUpdated");
            DropIndex("public.HealthcareServiceRes", "ix_IsDeleted");
            DropIndex("public.HealthcareServiceRes", "uq_FhirIdAndVersionId");
            DropIndex("public.HealthcareServiceRes", "ix_IsCurrent");
            DropIndex("public.GuidanceResponseIxUri", new[] { "ResourceId" });
            DropIndex("public.GuidanceResponseIxUri", "ix_SearchParamId");
            DropIndex("public.GuidanceResponseIxUri", "ix_Uri");
            DropIndex("public.GuidanceResponseIxTok", new[] { "ResourceId" });
            DropIndex("public.GuidanceResponseIxTok", "ix_SearchParamId");
            DropIndex("public.GuidanceResponseIxTok", "ix_System");
            DropIndex("public.GuidanceResponseIxTok", "ix_Code");
            DropIndex("public.GuidanceResponseIxStr", new[] { "ResourceId" });
            DropIndex("public.GuidanceResponseIxStr", "ix_SearchParamId");
            DropIndex("public.GuidanceResponseIxStr", "ix_String");
            DropIndex("public.GuidanceResponseIxRef", new[] { "ResourceId" });
            DropIndex("public.GuidanceResponseIxRef", "ix_SearchParamId");
            DropIndex("public.GuidanceResponseIxRef", "ix_RefBaseUrlId");
            DropIndex("public.GuidanceResponseIxRef", "ix_RefFhirId");
            DropIndex("public.GuidanceResponseIxQty", new[] { "ResourceId" });
            DropIndex("public.GuidanceResponseIxQty", "ix_SearchParamId");
            DropIndex("public.GuidanceResponseIxQty", "ix_System");
            DropIndex("public.GuidanceResponseIxQty", "ix_Code");
            DropIndex("public.GuidanceResponseIxDT", new[] { "ResourceId" });
            DropIndex("public.GuidanceResponseIxDT", "ix_SearchParamId");
            DropIndex("public.GuidanceResponseIxDT", "ix_HighUtcDateTime");
            DropIndex("public.GuidanceResponseIxDT", "ix_LowUtcDateTime");
            DropIndex("public.GuidanceResponseRes", new[] { "FhirReleaseId" });
            DropIndex("public.GuidanceResponseRes", "ix_LastUpdated");
            DropIndex("public.GuidanceResponseRes", "ix_IsDeleted");
            DropIndex("public.GuidanceResponseRes", "uq_FhirIdAndVersionId");
            DropIndex("public.GuidanceResponseRes", "ix_IsCurrent");
            DropIndex("public.GroupIxUri", new[] { "ResourceId" });
            DropIndex("public.GroupIxUri", "ix_SearchParamId");
            DropIndex("public.GroupIxUri", "ix_Uri");
            DropIndex("public.GroupIxTok", new[] { "ResourceId" });
            DropIndex("public.GroupIxTok", "ix_SearchParamId");
            DropIndex("public.GroupIxTok", "ix_System");
            DropIndex("public.GroupIxTok", "ix_Code");
            DropIndex("public.GroupIxStr", new[] { "ResourceId" });
            DropIndex("public.GroupIxStr", "ix_SearchParamId");
            DropIndex("public.GroupIxStr", "ix_String");
            DropIndex("public.GroupIxRef", new[] { "ResourceId" });
            DropIndex("public.GroupIxRef", "ix_SearchParamId");
            DropIndex("public.GroupIxRef", "ix_RefBaseUrlId");
            DropIndex("public.GroupIxRef", "ix_RefFhirId");
            DropIndex("public.GroupIxQty", new[] { "ResourceId" });
            DropIndex("public.GroupIxQty", "ix_SearchParamId");
            DropIndex("public.GroupIxQty", "ix_System");
            DropIndex("public.GroupIxQty", "ix_Code");
            DropIndex("public.GroupIxDT", new[] { "ResourceId" });
            DropIndex("public.GroupIxDT", "ix_SearchParamId");
            DropIndex("public.GroupIxDT", "ix_HighUtcDateTime");
            DropIndex("public.GroupIxDT", "ix_LowUtcDateTime");
            DropIndex("public.GroupRes", new[] { "FhirReleaseId" });
            DropIndex("public.GroupRes", "ix_LastUpdated");
            DropIndex("public.GroupRes", "ix_IsDeleted");
            DropIndex("public.GroupRes", "uq_FhirIdAndVersionId");
            DropIndex("public.GroupRes", "ix_IsCurrent");
            DropIndex("public.GraphDefinitionIxUri", new[] { "ResourceId" });
            DropIndex("public.GraphDefinitionIxUri", "ix_SearchParamId");
            DropIndex("public.GraphDefinitionIxUri", "ix_Uri");
            DropIndex("public.GraphDefinitionIxTok", new[] { "ResourceId" });
            DropIndex("public.GraphDefinitionIxTok", "ix_SearchParamId");
            DropIndex("public.GraphDefinitionIxTok", "ix_System");
            DropIndex("public.GraphDefinitionIxTok", "ix_Code");
            DropIndex("public.GraphDefinitionIxStr", new[] { "ResourceId" });
            DropIndex("public.GraphDefinitionIxStr", "ix_SearchParamId");
            DropIndex("public.GraphDefinitionIxStr", "ix_String");
            DropIndex("public.GraphDefinitionIxRef", new[] { "ResourceId" });
            DropIndex("public.GraphDefinitionIxRef", "ix_SearchParamId");
            DropIndex("public.GraphDefinitionIxRef", "ix_RefBaseUrlId");
            DropIndex("public.GraphDefinitionIxRef", "ix_RefFhirId");
            DropIndex("public.GraphDefinitionIxQty", new[] { "ResourceId" });
            DropIndex("public.GraphDefinitionIxQty", "ix_SearchParamId");
            DropIndex("public.GraphDefinitionIxQty", "ix_System");
            DropIndex("public.GraphDefinitionIxQty", "ix_Code");
            DropIndex("public.GraphDefinitionIxDT", new[] { "ResourceId" });
            DropIndex("public.GraphDefinitionIxDT", "ix_SearchParamId");
            DropIndex("public.GraphDefinitionIxDT", "ix_HighUtcDateTime");
            DropIndex("public.GraphDefinitionIxDT", "ix_LowUtcDateTime");
            DropIndex("public.GraphDefinitionRes", new[] { "FhirReleaseId" });
            DropIndex("public.GraphDefinitionRes", "ix_LastUpdated");
            DropIndex("public.GraphDefinitionRes", "ix_IsDeleted");
            DropIndex("public.GraphDefinitionRes", "uq_FhirIdAndVersionId");
            DropIndex("public.GraphDefinitionRes", "ix_IsCurrent");
            DropIndex("public.GoalIxUri", new[] { "ResourceId" });
            DropIndex("public.GoalIxUri", "ix_SearchParamId");
            DropIndex("public.GoalIxUri", "ix_Uri");
            DropIndex("public.GoalIxTok", new[] { "ResourceId" });
            DropIndex("public.GoalIxTok", "ix_SearchParamId");
            DropIndex("public.GoalIxTok", "ix_System");
            DropIndex("public.GoalIxTok", "ix_Code");
            DropIndex("public.GoalIxStr", new[] { "ResourceId" });
            DropIndex("public.GoalIxStr", "ix_SearchParamId");
            DropIndex("public.GoalIxStr", "ix_String");
            DropIndex("public.GoalIxRef", new[] { "ResourceId" });
            DropIndex("public.GoalIxRef", "ix_SearchParamId");
            DropIndex("public.GoalIxRef", "ix_RefBaseUrlId");
            DropIndex("public.GoalIxRef", "ix_RefFhirId");
            DropIndex("public.GoalIxQty", new[] { "ResourceId" });
            DropIndex("public.GoalIxQty", "ix_SearchParamId");
            DropIndex("public.GoalIxQty", "ix_System");
            DropIndex("public.GoalIxQty", "ix_Code");
            DropIndex("public.GoalIxDT", new[] { "ResourceId" });
            DropIndex("public.GoalIxDT", "ix_SearchParamId");
            DropIndex("public.GoalIxDT", "ix_HighUtcDateTime");
            DropIndex("public.GoalIxDT", "ix_LowUtcDateTime");
            DropIndex("public.GoalRes", new[] { "FhirReleaseId" });
            DropIndex("public.GoalRes", "ix_LastUpdated");
            DropIndex("public.GoalRes", "ix_IsDeleted");
            DropIndex("public.GoalRes", "uq_FhirIdAndVersionId");
            DropIndex("public.GoalRes", "ix_IsCurrent");
            DropIndex("public.FlagIxUri", new[] { "ResourceId" });
            DropIndex("public.FlagIxUri", "ix_SearchParamId");
            DropIndex("public.FlagIxUri", "ix_Uri");
            DropIndex("public.FlagIxTok", new[] { "ResourceId" });
            DropIndex("public.FlagIxTok", "ix_SearchParamId");
            DropIndex("public.FlagIxTok", "ix_System");
            DropIndex("public.FlagIxTok", "ix_Code");
            DropIndex("public.FlagIxStr", new[] { "ResourceId" });
            DropIndex("public.FlagIxStr", "ix_SearchParamId");
            DropIndex("public.FlagIxStr", "ix_String");
            DropIndex("public.FlagIxRef", new[] { "ResourceId" });
            DropIndex("public.FlagIxRef", "ix_SearchParamId");
            DropIndex("public.FlagIxRef", "ix_RefBaseUrlId");
            DropIndex("public.FlagIxRef", "ix_RefFhirId");
            DropIndex("public.FlagIxQty", new[] { "ResourceId" });
            DropIndex("public.FlagIxQty", "ix_SearchParamId");
            DropIndex("public.FlagIxQty", "ix_System");
            DropIndex("public.FlagIxQty", "ix_Code");
            DropIndex("public.FlagIxDT", new[] { "ResourceId" });
            DropIndex("public.FlagIxDT", "ix_SearchParamId");
            DropIndex("public.FlagIxDT", "ix_HighUtcDateTime");
            DropIndex("public.FlagIxDT", "ix_LowUtcDateTime");
            DropIndex("public.FlagRes", new[] { "FhirReleaseId" });
            DropIndex("public.FlagRes", "ix_LastUpdated");
            DropIndex("public.FlagRes", "ix_IsDeleted");
            DropIndex("public.FlagRes", "uq_FhirIdAndVersionId");
            DropIndex("public.FlagRes", "ix_IsCurrent");
            DropIndex("public.FamilyMemberHistoryIxUri", new[] { "ResourceId" });
            DropIndex("public.FamilyMemberHistoryIxUri", "ix_SearchParamId");
            DropIndex("public.FamilyMemberHistoryIxUri", "ix_Uri");
            DropIndex("public.FamilyMemberHistoryIxTok", new[] { "ResourceId" });
            DropIndex("public.FamilyMemberHistoryIxTok", "ix_SearchParamId");
            DropIndex("public.FamilyMemberHistoryIxTok", "ix_System");
            DropIndex("public.FamilyMemberHistoryIxTok", "ix_Code");
            DropIndex("public.FamilyMemberHistoryIxStr", new[] { "ResourceId" });
            DropIndex("public.FamilyMemberHistoryIxStr", "ix_SearchParamId");
            DropIndex("public.FamilyMemberHistoryIxStr", "ix_String");
            DropIndex("public.FamilyMemberHistoryIxRef", new[] { "ResourceId" });
            DropIndex("public.FamilyMemberHistoryIxRef", "ix_SearchParamId");
            DropIndex("public.FamilyMemberHistoryIxRef", "ix_RefBaseUrlId");
            DropIndex("public.FamilyMemberHistoryIxRef", "ix_RefFhirId");
            DropIndex("public.FamilyMemberHistoryIxQty", new[] { "ResourceId" });
            DropIndex("public.FamilyMemberHistoryIxQty", "ix_SearchParamId");
            DropIndex("public.FamilyMemberHistoryIxQty", "ix_System");
            DropIndex("public.FamilyMemberHistoryIxQty", "ix_Code");
            DropIndex("public.FamilyMemberHistoryIxDT", new[] { "ResourceId" });
            DropIndex("public.FamilyMemberHistoryIxDT", "ix_SearchParamId");
            DropIndex("public.FamilyMemberHistoryIxDT", "ix_HighUtcDateTime");
            DropIndex("public.FamilyMemberHistoryIxDT", "ix_LowUtcDateTime");
            DropIndex("public.FamilyMemberHistoryRes", new[] { "FhirReleaseId" });
            DropIndex("public.FamilyMemberHistoryRes", "ix_LastUpdated");
            DropIndex("public.FamilyMemberHistoryRes", "ix_IsDeleted");
            DropIndex("public.FamilyMemberHistoryRes", "uq_FhirIdAndVersionId");
            DropIndex("public.FamilyMemberHistoryRes", "ix_IsCurrent");
            DropIndex("public.ExplanationOfBenefitIxUri", new[] { "ResourceId" });
            DropIndex("public.ExplanationOfBenefitIxUri", "ix_SearchParamId");
            DropIndex("public.ExplanationOfBenefitIxUri", "ix_Uri");
            DropIndex("public.ExplanationOfBenefitIxTok", new[] { "ResourceId" });
            DropIndex("public.ExplanationOfBenefitIxTok", "ix_SearchParamId");
            DropIndex("public.ExplanationOfBenefitIxTok", "ix_System");
            DropIndex("public.ExplanationOfBenefitIxTok", "ix_Code");
            DropIndex("public.ExplanationOfBenefitIxStr", new[] { "ResourceId" });
            DropIndex("public.ExplanationOfBenefitIxStr", "ix_SearchParamId");
            DropIndex("public.ExplanationOfBenefitIxStr", "ix_String");
            DropIndex("public.ExplanationOfBenefitIxRef", new[] { "ResourceId" });
            DropIndex("public.ExplanationOfBenefitIxRef", "ix_SearchParamId");
            DropIndex("public.ExplanationOfBenefitIxRef", "ix_RefBaseUrlId");
            DropIndex("public.ExplanationOfBenefitIxRef", "ix_RefFhirId");
            DropIndex("public.ExplanationOfBenefitIxQty", new[] { "ResourceId" });
            DropIndex("public.ExplanationOfBenefitIxQty", "ix_SearchParamId");
            DropIndex("public.ExplanationOfBenefitIxQty", "ix_System");
            DropIndex("public.ExplanationOfBenefitIxQty", "ix_Code");
            DropIndex("public.ExplanationOfBenefitIxDT", new[] { "ResourceId" });
            DropIndex("public.ExplanationOfBenefitIxDT", "ix_SearchParamId");
            DropIndex("public.ExplanationOfBenefitIxDT", "ix_HighUtcDateTime");
            DropIndex("public.ExplanationOfBenefitIxDT", "ix_LowUtcDateTime");
            DropIndex("public.ExplanationOfBenefitRes", new[] { "FhirReleaseId" });
            DropIndex("public.ExplanationOfBenefitRes", "ix_LastUpdated");
            DropIndex("public.ExplanationOfBenefitRes", "ix_IsDeleted");
            DropIndex("public.ExplanationOfBenefitRes", "uq_FhirIdAndVersionId");
            DropIndex("public.ExplanationOfBenefitRes", "ix_IsCurrent");
            DropIndex("public.ExampleScenarioIxUri", new[] { "ResourceId" });
            DropIndex("public.ExampleScenarioIxUri", "ix_SearchParamId");
            DropIndex("public.ExampleScenarioIxUri", "ix_Uri");
            DropIndex("public.ExampleScenarioIxTok", new[] { "ResourceId" });
            DropIndex("public.ExampleScenarioIxTok", "ix_SearchParamId");
            DropIndex("public.ExampleScenarioIxTok", "ix_System");
            DropIndex("public.ExampleScenarioIxTok", "ix_Code");
            DropIndex("public.ExampleScenarioIxStr", new[] { "ResourceId" });
            DropIndex("public.ExampleScenarioIxStr", "ix_SearchParamId");
            DropIndex("public.ExampleScenarioIxStr", "ix_String");
            DropIndex("public.ExampleScenarioIxRef", new[] { "ResourceId" });
            DropIndex("public.ExampleScenarioIxRef", "ix_SearchParamId");
            DropIndex("public.ExampleScenarioIxRef", "ix_RefBaseUrlId");
            DropIndex("public.ExampleScenarioIxRef", "ix_RefFhirId");
            DropIndex("public.ExampleScenarioIxQty", new[] { "ResourceId" });
            DropIndex("public.ExampleScenarioIxQty", "ix_SearchParamId");
            DropIndex("public.ExampleScenarioIxQty", "ix_System");
            DropIndex("public.ExampleScenarioIxQty", "ix_Code");
            DropIndex("public.ExampleScenarioIxDT", new[] { "ResourceId" });
            DropIndex("public.ExampleScenarioIxDT", "ix_SearchParamId");
            DropIndex("public.ExampleScenarioIxDT", "ix_HighUtcDateTime");
            DropIndex("public.ExampleScenarioIxDT", "ix_LowUtcDateTime");
            DropIndex("public.ExampleScenarioRes", new[] { "FhirReleaseId" });
            DropIndex("public.ExampleScenarioRes", "ix_LastUpdated");
            DropIndex("public.ExampleScenarioRes", "ix_IsDeleted");
            DropIndex("public.ExampleScenarioRes", "uq_FhirIdAndVersionId");
            DropIndex("public.ExampleScenarioRes", "ix_IsCurrent");
            DropIndex("public.EventDefinitionIxUri", new[] { "ResourceId" });
            DropIndex("public.EventDefinitionIxUri", "ix_SearchParamId");
            DropIndex("public.EventDefinitionIxUri", "ix_Uri");
            DropIndex("public.EventDefinitionIxTok", new[] { "ResourceId" });
            DropIndex("public.EventDefinitionIxTok", "ix_SearchParamId");
            DropIndex("public.EventDefinitionIxTok", "ix_System");
            DropIndex("public.EventDefinitionIxTok", "ix_Code");
            DropIndex("public.EventDefinitionIxStr", new[] { "ResourceId" });
            DropIndex("public.EventDefinitionIxStr", "ix_SearchParamId");
            DropIndex("public.EventDefinitionIxStr", "ix_String");
            DropIndex("public.EventDefinitionIxRef", new[] { "ResourceId" });
            DropIndex("public.EventDefinitionIxRef", "ix_SearchParamId");
            DropIndex("public.EventDefinitionIxRef", "ix_RefBaseUrlId");
            DropIndex("public.EventDefinitionIxRef", "ix_RefFhirId");
            DropIndex("public.EventDefinitionIxQty", new[] { "ResourceId" });
            DropIndex("public.EventDefinitionIxQty", "ix_SearchParamId");
            DropIndex("public.EventDefinitionIxQty", "ix_System");
            DropIndex("public.EventDefinitionIxQty", "ix_Code");
            DropIndex("public.EventDefinitionIxDT", new[] { "ResourceId" });
            DropIndex("public.EventDefinitionIxDT", "ix_SearchParamId");
            DropIndex("public.EventDefinitionIxDT", "ix_HighUtcDateTime");
            DropIndex("public.EventDefinitionIxDT", "ix_LowUtcDateTime");
            DropIndex("public.EventDefinitionRes", new[] { "FhirReleaseId" });
            DropIndex("public.EventDefinitionRes", "ix_LastUpdated");
            DropIndex("public.EventDefinitionRes", "ix_IsDeleted");
            DropIndex("public.EventDefinitionRes", "uq_FhirIdAndVersionId");
            DropIndex("public.EventDefinitionRes", "ix_IsCurrent");
            DropIndex("public.EpisodeOfCareIxUri", new[] { "ResourceId" });
            DropIndex("public.EpisodeOfCareIxUri", "ix_SearchParamId");
            DropIndex("public.EpisodeOfCareIxUri", "ix_Uri");
            DropIndex("public.EpisodeOfCareIxTok", new[] { "ResourceId" });
            DropIndex("public.EpisodeOfCareIxTok", "ix_SearchParamId");
            DropIndex("public.EpisodeOfCareIxTok", "ix_System");
            DropIndex("public.EpisodeOfCareIxTok", "ix_Code");
            DropIndex("public.EpisodeOfCareIxStr", new[] { "ResourceId" });
            DropIndex("public.EpisodeOfCareIxStr", "ix_SearchParamId");
            DropIndex("public.EpisodeOfCareIxStr", "ix_String");
            DropIndex("public.EpisodeOfCareIxRef", new[] { "ResourceId" });
            DropIndex("public.EpisodeOfCareIxRef", "ix_SearchParamId");
            DropIndex("public.EpisodeOfCareIxRef", "ix_RefBaseUrlId");
            DropIndex("public.EpisodeOfCareIxRef", "ix_RefFhirId");
            DropIndex("public.EpisodeOfCareIxQty", new[] { "ResourceId" });
            DropIndex("public.EpisodeOfCareIxQty", "ix_SearchParamId");
            DropIndex("public.EpisodeOfCareIxQty", "ix_System");
            DropIndex("public.EpisodeOfCareIxQty", "ix_Code");
            DropIndex("public.EpisodeOfCareIxDT", new[] { "ResourceId" });
            DropIndex("public.EpisodeOfCareIxDT", "ix_SearchParamId");
            DropIndex("public.EpisodeOfCareIxDT", "ix_HighUtcDateTime");
            DropIndex("public.EpisodeOfCareIxDT", "ix_LowUtcDateTime");
            DropIndex("public.EpisodeOfCareRes", new[] { "FhirReleaseId" });
            DropIndex("public.EpisodeOfCareRes", "ix_LastUpdated");
            DropIndex("public.EpisodeOfCareRes", "ix_IsDeleted");
            DropIndex("public.EpisodeOfCareRes", "uq_FhirIdAndVersionId");
            DropIndex("public.EpisodeOfCareRes", "ix_IsCurrent");
            DropIndex("public.EntryDefinitionIxUri", new[] { "ResourceId" });
            DropIndex("public.EntryDefinitionIxUri", "ix_SearchParamId");
            DropIndex("public.EntryDefinitionIxUri", "ix_Uri");
            DropIndex("public.EntryDefinitionIxTok", new[] { "ResourceId" });
            DropIndex("public.EntryDefinitionIxTok", "ix_SearchParamId");
            DropIndex("public.EntryDefinitionIxTok", "ix_System");
            DropIndex("public.EntryDefinitionIxTok", "ix_Code");
            DropIndex("public.EntryDefinitionIxStr", new[] { "ResourceId" });
            DropIndex("public.EntryDefinitionIxStr", "ix_SearchParamId");
            DropIndex("public.EntryDefinitionIxStr", "ix_String");
            DropIndex("public.EntryDefinitionIxRef", new[] { "ResourceId" });
            DropIndex("public.EntryDefinitionIxRef", "ix_SearchParamId");
            DropIndex("public.EntryDefinitionIxRef", "ix_RefBaseUrlId");
            DropIndex("public.EntryDefinitionIxRef", "ix_RefFhirId");
            DropIndex("public.EntryDefinitionIxQty", new[] { "ResourceId" });
            DropIndex("public.EntryDefinitionIxQty", "ix_SearchParamId");
            DropIndex("public.EntryDefinitionIxQty", "ix_System");
            DropIndex("public.EntryDefinitionIxQty", "ix_Code");
            DropIndex("public.EntryDefinitionIxDT", new[] { "ResourceId" });
            DropIndex("public.EntryDefinitionIxDT", "ix_SearchParamId");
            DropIndex("public.EntryDefinitionIxDT", "ix_HighUtcDateTime");
            DropIndex("public.EntryDefinitionIxDT", "ix_LowUtcDateTime");
            DropIndex("public.EntryDefinitionRes", new[] { "FhirReleaseId" });
            DropIndex("public.EntryDefinitionRes", "ix_LastUpdated");
            DropIndex("public.EntryDefinitionRes", "ix_IsDeleted");
            DropIndex("public.EntryDefinitionRes", "uq_FhirIdAndVersionId");
            DropIndex("public.EntryDefinitionRes", "ix_IsCurrent");
            DropIndex("public.EnrollmentResponseIxUri", new[] { "ResourceId" });
            DropIndex("public.EnrollmentResponseIxUri", "ix_SearchParamId");
            DropIndex("public.EnrollmentResponseIxUri", "ix_Uri");
            DropIndex("public.EnrollmentResponseIxTok", new[] { "ResourceId" });
            DropIndex("public.EnrollmentResponseIxTok", "ix_SearchParamId");
            DropIndex("public.EnrollmentResponseIxTok", "ix_System");
            DropIndex("public.EnrollmentResponseIxTok", "ix_Code");
            DropIndex("public.EnrollmentResponseIxStr", new[] { "ResourceId" });
            DropIndex("public.EnrollmentResponseIxStr", "ix_SearchParamId");
            DropIndex("public.EnrollmentResponseIxStr", "ix_String");
            DropIndex("public.EnrollmentResponseIxRef", new[] { "ResourceId" });
            DropIndex("public.EnrollmentResponseIxRef", "ix_SearchParamId");
            DropIndex("public.EnrollmentResponseIxRef", "ix_RefBaseUrlId");
            DropIndex("public.EnrollmentResponseIxRef", "ix_RefFhirId");
            DropIndex("public.EnrollmentResponseIxQty", new[] { "ResourceId" });
            DropIndex("public.EnrollmentResponseIxQty", "ix_SearchParamId");
            DropIndex("public.EnrollmentResponseIxQty", "ix_System");
            DropIndex("public.EnrollmentResponseIxQty", "ix_Code");
            DropIndex("public.EnrollmentResponseIxDT", new[] { "ResourceId" });
            DropIndex("public.EnrollmentResponseIxDT", "ix_SearchParamId");
            DropIndex("public.EnrollmentResponseIxDT", "ix_HighUtcDateTime");
            DropIndex("public.EnrollmentResponseIxDT", "ix_LowUtcDateTime");
            DropIndex("public.EnrollmentResponseRes", new[] { "FhirReleaseId" });
            DropIndex("public.EnrollmentResponseRes", "ix_LastUpdated");
            DropIndex("public.EnrollmentResponseRes", "ix_IsDeleted");
            DropIndex("public.EnrollmentResponseRes", "uq_FhirIdAndVersionId");
            DropIndex("public.EnrollmentResponseRes", "ix_IsCurrent");
            DropIndex("public.EnrollmentRequestIxUri", new[] { "ResourceId" });
            DropIndex("public.EnrollmentRequestIxUri", "ix_SearchParamId");
            DropIndex("public.EnrollmentRequestIxUri", "ix_Uri");
            DropIndex("public.EnrollmentRequestIxTok", new[] { "ResourceId" });
            DropIndex("public.EnrollmentRequestIxTok", "ix_SearchParamId");
            DropIndex("public.EnrollmentRequestIxTok", "ix_System");
            DropIndex("public.EnrollmentRequestIxTok", "ix_Code");
            DropIndex("public.EnrollmentRequestIxStr", new[] { "ResourceId" });
            DropIndex("public.EnrollmentRequestIxStr", "ix_SearchParamId");
            DropIndex("public.EnrollmentRequestIxStr", "ix_String");
            DropIndex("public.EnrollmentRequestIxRef", new[] { "ResourceId" });
            DropIndex("public.EnrollmentRequestIxRef", "ix_SearchParamId");
            DropIndex("public.EnrollmentRequestIxRef", "ix_RefBaseUrlId");
            DropIndex("public.EnrollmentRequestIxRef", "ix_RefFhirId");
            DropIndex("public.EnrollmentRequestIxQty", new[] { "ResourceId" });
            DropIndex("public.EnrollmentRequestIxQty", "ix_SearchParamId");
            DropIndex("public.EnrollmentRequestIxQty", "ix_System");
            DropIndex("public.EnrollmentRequestIxQty", "ix_Code");
            DropIndex("public.EnrollmentRequestIxDT", new[] { "ResourceId" });
            DropIndex("public.EnrollmentRequestIxDT", "ix_SearchParamId");
            DropIndex("public.EnrollmentRequestIxDT", "ix_HighUtcDateTime");
            DropIndex("public.EnrollmentRequestIxDT", "ix_LowUtcDateTime");
            DropIndex("public.EnrollmentRequestRes", new[] { "FhirReleaseId" });
            DropIndex("public.EnrollmentRequestRes", "ix_LastUpdated");
            DropIndex("public.EnrollmentRequestRes", "ix_IsDeleted");
            DropIndex("public.EnrollmentRequestRes", "uq_FhirIdAndVersionId");
            DropIndex("public.EnrollmentRequestRes", "ix_IsCurrent");
            DropIndex("public.EndpointIxUri", new[] { "ResourceId" });
            DropIndex("public.EndpointIxUri", "ix_SearchParamId");
            DropIndex("public.EndpointIxUri", "ix_Uri");
            DropIndex("public.EndpointIxTok", new[] { "ResourceId" });
            DropIndex("public.EndpointIxTok", "ix_SearchParamId");
            DropIndex("public.EndpointIxTok", "ix_System");
            DropIndex("public.EndpointIxTok", "ix_Code");
            DropIndex("public.EndpointIxStr", new[] { "ResourceId" });
            DropIndex("public.EndpointIxStr", "ix_SearchParamId");
            DropIndex("public.EndpointIxStr", "ix_String");
            DropIndex("public.EndpointIxRef", new[] { "ResourceId" });
            DropIndex("public.EndpointIxRef", "ix_SearchParamId");
            DropIndex("public.EndpointIxRef", "ix_RefBaseUrlId");
            DropIndex("public.EndpointIxRef", "ix_RefFhirId");
            DropIndex("public.EndpointIxQty", new[] { "ResourceId" });
            DropIndex("public.EndpointIxQty", "ix_SearchParamId");
            DropIndex("public.EndpointIxQty", "ix_System");
            DropIndex("public.EndpointIxQty", "ix_Code");
            DropIndex("public.EndpointIxDT", new[] { "ResourceId" });
            DropIndex("public.EndpointIxDT", "ix_SearchParamId");
            DropIndex("public.EndpointIxDT", "ix_HighUtcDateTime");
            DropIndex("public.EndpointIxDT", "ix_LowUtcDateTime");
            DropIndex("public.EndpointRes", new[] { "FhirReleaseId" });
            DropIndex("public.EndpointRes", "ix_LastUpdated");
            DropIndex("public.EndpointRes", "ix_IsDeleted");
            DropIndex("public.EndpointRes", "uq_FhirIdAndVersionId");
            DropIndex("public.EndpointRes", "ix_IsCurrent");
            DropIndex("public.EncounterIxUri", new[] { "ResourceId" });
            DropIndex("public.EncounterIxUri", "ix_SearchParamId");
            DropIndex("public.EncounterIxUri", "ix_Uri");
            DropIndex("public.EncounterIxTok", new[] { "ResourceId" });
            DropIndex("public.EncounterIxTok", "ix_SearchParamId");
            DropIndex("public.EncounterIxTok", "ix_System");
            DropIndex("public.EncounterIxTok", "ix_Code");
            DropIndex("public.EncounterIxStr", new[] { "ResourceId" });
            DropIndex("public.EncounterIxStr", "ix_SearchParamId");
            DropIndex("public.EncounterIxStr", "ix_String");
            DropIndex("public.EncounterIxRef", new[] { "ResourceId" });
            DropIndex("public.EncounterIxRef", "ix_SearchParamId");
            DropIndex("public.EncounterIxRef", "ix_RefBaseUrlId");
            DropIndex("public.EncounterIxRef", "ix_RefFhirId");
            DropIndex("public.EncounterIxQty", new[] { "ResourceId" });
            DropIndex("public.EncounterIxQty", "ix_SearchParamId");
            DropIndex("public.EncounterIxQty", "ix_System");
            DropIndex("public.EncounterIxQty", "ix_Code");
            DropIndex("public.EncounterIxDT", new[] { "ResourceId" });
            DropIndex("public.EncounterIxDT", "ix_SearchParamId");
            DropIndex("public.EncounterIxDT", "ix_HighUtcDateTime");
            DropIndex("public.EncounterIxDT", "ix_LowUtcDateTime");
            DropIndex("public.EncounterRes", new[] { "FhirReleaseId" });
            DropIndex("public.EncounterRes", "ix_LastUpdated");
            DropIndex("public.EncounterRes", "ix_IsDeleted");
            DropIndex("public.EncounterRes", "uq_FhirIdAndVersionId");
            DropIndex("public.EncounterRes", "ix_IsCurrent");
            DropIndex("public.DocumentReferenceIxUri", new[] { "ResourceId" });
            DropIndex("public.DocumentReferenceIxUri", "ix_SearchParamId");
            DropIndex("public.DocumentReferenceIxUri", "ix_Uri");
            DropIndex("public.DocumentReferenceIxTok", new[] { "ResourceId" });
            DropIndex("public.DocumentReferenceIxTok", "ix_SearchParamId");
            DropIndex("public.DocumentReferenceIxTok", "ix_System");
            DropIndex("public.DocumentReferenceIxTok", "ix_Code");
            DropIndex("public.DocumentReferenceIxStr", new[] { "ResourceId" });
            DropIndex("public.DocumentReferenceIxStr", "ix_SearchParamId");
            DropIndex("public.DocumentReferenceIxStr", "ix_String");
            DropIndex("public.DocumentReferenceIxRef", new[] { "ResourceId" });
            DropIndex("public.DocumentReferenceIxRef", "ix_SearchParamId");
            DropIndex("public.DocumentReferenceIxRef", "ix_RefBaseUrlId");
            DropIndex("public.DocumentReferenceIxRef", "ix_RefFhirId");
            DropIndex("public.DocumentReferenceIxQty", new[] { "ResourceId" });
            DropIndex("public.DocumentReferenceIxQty", "ix_SearchParamId");
            DropIndex("public.DocumentReferenceIxQty", "ix_System");
            DropIndex("public.DocumentReferenceIxQty", "ix_Code");
            DropIndex("public.DocumentReferenceIxDT", new[] { "ResourceId" });
            DropIndex("public.DocumentReferenceIxDT", "ix_SearchParamId");
            DropIndex("public.DocumentReferenceIxDT", "ix_HighUtcDateTime");
            DropIndex("public.DocumentReferenceIxDT", "ix_LowUtcDateTime");
            DropIndex("public.DocumentReferenceRes", new[] { "FhirReleaseId" });
            DropIndex("public.DocumentReferenceRes", "ix_LastUpdated");
            DropIndex("public.DocumentReferenceRes", "ix_IsDeleted");
            DropIndex("public.DocumentReferenceRes", "uq_FhirIdAndVersionId");
            DropIndex("public.DocumentReferenceRes", "ix_IsCurrent");
            DropIndex("public.DocumentManifestIxUri", new[] { "ResourceId" });
            DropIndex("public.DocumentManifestIxUri", "ix_SearchParamId");
            DropIndex("public.DocumentManifestIxUri", "ix_Uri");
            DropIndex("public.DocumentManifestIxTok", new[] { "ResourceId" });
            DropIndex("public.DocumentManifestIxTok", "ix_SearchParamId");
            DropIndex("public.DocumentManifestIxTok", "ix_System");
            DropIndex("public.DocumentManifestIxTok", "ix_Code");
            DropIndex("public.DocumentManifestIxStr", new[] { "ResourceId" });
            DropIndex("public.DocumentManifestIxStr", "ix_SearchParamId");
            DropIndex("public.DocumentManifestIxStr", "ix_String");
            DropIndex("public.DocumentManifestIxRef", new[] { "ResourceId" });
            DropIndex("public.DocumentManifestIxRef", "ix_SearchParamId");
            DropIndex("public.DocumentManifestIxRef", "ix_RefBaseUrlId");
            DropIndex("public.DocumentManifestIxRef", "ix_RefFhirId");
            DropIndex("public.DocumentManifestIxQty", new[] { "ResourceId" });
            DropIndex("public.DocumentManifestIxQty", "ix_SearchParamId");
            DropIndex("public.DocumentManifestIxQty", "ix_System");
            DropIndex("public.DocumentManifestIxQty", "ix_Code");
            DropIndex("public.DocumentManifestIxDT", new[] { "ResourceId" });
            DropIndex("public.DocumentManifestIxDT", "ix_SearchParamId");
            DropIndex("public.DocumentManifestIxDT", "ix_HighUtcDateTime");
            DropIndex("public.DocumentManifestIxDT", "ix_LowUtcDateTime");
            DropIndex("public.DocumentManifestRes", new[] { "FhirReleaseId" });
            DropIndex("public.DocumentManifestRes", "ix_LastUpdated");
            DropIndex("public.DocumentManifestRes", "ix_IsDeleted");
            DropIndex("public.DocumentManifestRes", "uq_FhirIdAndVersionId");
            DropIndex("public.DocumentManifestRes", "ix_IsCurrent");
            DropIndex("public.DiagnosticReportIxUri", new[] { "ResourceId" });
            DropIndex("public.DiagnosticReportIxUri", "ix_SearchParamId");
            DropIndex("public.DiagnosticReportIxUri", "ix_Uri");
            DropIndex("public.DiagnosticReportIxTok", new[] { "ResourceId" });
            DropIndex("public.DiagnosticReportIxTok", "ix_SearchParamId");
            DropIndex("public.DiagnosticReportIxTok", "ix_System");
            DropIndex("public.DiagnosticReportIxTok", "ix_Code");
            DropIndex("public.DiagnosticReportIxStr", new[] { "ResourceId" });
            DropIndex("public.DiagnosticReportIxStr", "ix_SearchParamId");
            DropIndex("public.DiagnosticReportIxStr", "ix_String");
            DropIndex("public.DiagnosticReportIxRef", new[] { "ResourceId" });
            DropIndex("public.DiagnosticReportIxRef", "ix_SearchParamId");
            DropIndex("public.DiagnosticReportIxRef", "ix_RefBaseUrlId");
            DropIndex("public.DiagnosticReportIxRef", "ix_RefFhirId");
            DropIndex("public.DiagnosticReportIxQty", new[] { "ResourceId" });
            DropIndex("public.DiagnosticReportIxQty", "ix_SearchParamId");
            DropIndex("public.DiagnosticReportIxQty", "ix_System");
            DropIndex("public.DiagnosticReportIxQty", "ix_Code");
            DropIndex("public.DiagnosticReportIxDT", new[] { "ResourceId" });
            DropIndex("public.DiagnosticReportIxDT", "ix_SearchParamId");
            DropIndex("public.DiagnosticReportIxDT", "ix_HighUtcDateTime");
            DropIndex("public.DiagnosticReportIxDT", "ix_LowUtcDateTime");
            DropIndex("public.DiagnosticReportRes", new[] { "FhirReleaseId" });
            DropIndex("public.DiagnosticReportRes", "ix_LastUpdated");
            DropIndex("public.DiagnosticReportRes", "ix_IsDeleted");
            DropIndex("public.DiagnosticReportRes", "uq_FhirIdAndVersionId");
            DropIndex("public.DiagnosticReportRes", "ix_IsCurrent");
            DropIndex("public.DeviceUseStatementIxUri", new[] { "ResourceId" });
            DropIndex("public.DeviceUseStatementIxUri", "ix_SearchParamId");
            DropIndex("public.DeviceUseStatementIxUri", "ix_Uri");
            DropIndex("public.DeviceUseStatementIxTok", new[] { "ResourceId" });
            DropIndex("public.DeviceUseStatementIxTok", "ix_SearchParamId");
            DropIndex("public.DeviceUseStatementIxTok", "ix_System");
            DropIndex("public.DeviceUseStatementIxTok", "ix_Code");
            DropIndex("public.DeviceUseStatementIxStr", new[] { "ResourceId" });
            DropIndex("public.DeviceUseStatementIxStr", "ix_SearchParamId");
            DropIndex("public.DeviceUseStatementIxStr", "ix_String");
            DropIndex("public.DeviceUseStatementIxRef", new[] { "ResourceId" });
            DropIndex("public.DeviceUseStatementIxRef", "ix_SearchParamId");
            DropIndex("public.DeviceUseStatementIxRef", "ix_RefBaseUrlId");
            DropIndex("public.DeviceUseStatementIxRef", "ix_RefFhirId");
            DropIndex("public.DeviceUseStatementIxQty", new[] { "ResourceId" });
            DropIndex("public.DeviceUseStatementIxQty", "ix_SearchParamId");
            DropIndex("public.DeviceUseStatementIxQty", "ix_System");
            DropIndex("public.DeviceUseStatementIxQty", "ix_Code");
            DropIndex("public.DeviceUseStatementIxDT", new[] { "ResourceId" });
            DropIndex("public.DeviceUseStatementIxDT", "ix_SearchParamId");
            DropIndex("public.DeviceUseStatementIxDT", "ix_HighUtcDateTime");
            DropIndex("public.DeviceUseStatementIxDT", "ix_LowUtcDateTime");
            DropIndex("public.DeviceUseStatementRes", new[] { "FhirReleaseId" });
            DropIndex("public.DeviceUseStatementRes", "ix_LastUpdated");
            DropIndex("public.DeviceUseStatementRes", "ix_IsDeleted");
            DropIndex("public.DeviceUseStatementRes", "uq_FhirIdAndVersionId");
            DropIndex("public.DeviceUseStatementRes", "ix_IsCurrent");
            DropIndex("public.DeviceRequestIxUri", new[] { "ResourceId" });
            DropIndex("public.DeviceRequestIxUri", "ix_SearchParamId");
            DropIndex("public.DeviceRequestIxUri", "ix_Uri");
            DropIndex("public.DeviceRequestIxTok", new[] { "ResourceId" });
            DropIndex("public.DeviceRequestIxTok", "ix_SearchParamId");
            DropIndex("public.DeviceRequestIxTok", "ix_System");
            DropIndex("public.DeviceRequestIxTok", "ix_Code");
            DropIndex("public.DeviceRequestIxStr", new[] { "ResourceId" });
            DropIndex("public.DeviceRequestIxStr", "ix_SearchParamId");
            DropIndex("public.DeviceRequestIxStr", "ix_String");
            DropIndex("public.DeviceRequestIxRef", new[] { "ResourceId" });
            DropIndex("public.DeviceRequestIxRef", "ix_SearchParamId");
            DropIndex("public.DeviceRequestIxRef", "ix_RefBaseUrlId");
            DropIndex("public.DeviceRequestIxRef", "ix_RefFhirId");
            DropIndex("public.DeviceRequestIxQty", new[] { "ResourceId" });
            DropIndex("public.DeviceRequestIxQty", "ix_SearchParamId");
            DropIndex("public.DeviceRequestIxQty", "ix_System");
            DropIndex("public.DeviceRequestIxQty", "ix_Code");
            DropIndex("public.DeviceRequestIxDT", new[] { "ResourceId" });
            DropIndex("public.DeviceRequestIxDT", "ix_SearchParamId");
            DropIndex("public.DeviceRequestIxDT", "ix_HighUtcDateTime");
            DropIndex("public.DeviceRequestIxDT", "ix_LowUtcDateTime");
            DropIndex("public.DeviceRequestRes", new[] { "FhirReleaseId" });
            DropIndex("public.DeviceRequestRes", "ix_LastUpdated");
            DropIndex("public.DeviceRequestRes", "ix_IsDeleted");
            DropIndex("public.DeviceRequestRes", "uq_FhirIdAndVersionId");
            DropIndex("public.DeviceRequestRes", "ix_IsCurrent");
            DropIndex("public.DeviceMetricIxUri", new[] { "ResourceId" });
            DropIndex("public.DeviceMetricIxUri", "ix_SearchParamId");
            DropIndex("public.DeviceMetricIxUri", "ix_Uri");
            DropIndex("public.DeviceMetricIxTok", new[] { "ResourceId" });
            DropIndex("public.DeviceMetricIxTok", "ix_SearchParamId");
            DropIndex("public.DeviceMetricIxTok", "ix_System");
            DropIndex("public.DeviceMetricIxTok", "ix_Code");
            DropIndex("public.DeviceMetricIxStr", new[] { "ResourceId" });
            DropIndex("public.DeviceMetricIxStr", "ix_SearchParamId");
            DropIndex("public.DeviceMetricIxStr", "ix_String");
            DropIndex("public.DeviceMetricIxRef", new[] { "ResourceId" });
            DropIndex("public.DeviceMetricIxRef", "ix_SearchParamId");
            DropIndex("public.DeviceMetricIxRef", "ix_RefBaseUrlId");
            DropIndex("public.DeviceMetricIxRef", "ix_RefFhirId");
            DropIndex("public.DeviceMetricIxQty", new[] { "ResourceId" });
            DropIndex("public.DeviceMetricIxQty", "ix_SearchParamId");
            DropIndex("public.DeviceMetricIxQty", "ix_System");
            DropIndex("public.DeviceMetricIxQty", "ix_Code");
            DropIndex("public.DeviceMetricIxDT", new[] { "ResourceId" });
            DropIndex("public.DeviceMetricIxDT", "ix_SearchParamId");
            DropIndex("public.DeviceMetricIxDT", "ix_HighUtcDateTime");
            DropIndex("public.DeviceMetricIxDT", "ix_LowUtcDateTime");
            DropIndex("public.DeviceMetricRes", new[] { "FhirReleaseId" });
            DropIndex("public.DeviceMetricRes", "ix_LastUpdated");
            DropIndex("public.DeviceMetricRes", "ix_IsDeleted");
            DropIndex("public.DeviceMetricRes", "uq_FhirIdAndVersionId");
            DropIndex("public.DeviceMetricRes", "ix_IsCurrent");
            DropIndex("public.DeviceIxUri", new[] { "ResourceId" });
            DropIndex("public.DeviceIxUri", "ix_SearchParamId");
            DropIndex("public.DeviceIxUri", "ix_Uri");
            DropIndex("public.DeviceIxTok", new[] { "ResourceId" });
            DropIndex("public.DeviceIxTok", "ix_SearchParamId");
            DropIndex("public.DeviceIxTok", "ix_System");
            DropIndex("public.DeviceIxTok", "ix_Code");
            DropIndex("public.DeviceIxStr", new[] { "ResourceId" });
            DropIndex("public.DeviceIxStr", "ix_SearchParamId");
            DropIndex("public.DeviceIxStr", "ix_String");
            DropIndex("public.DeviceIxRef", new[] { "ResourceId" });
            DropIndex("public.DeviceIxRef", "ix_SearchParamId");
            DropIndex("public.DeviceIxRef", "ix_RefBaseUrlId");
            DropIndex("public.DeviceIxRef", "ix_RefFhirId");
            DropIndex("public.DeviceIxQty", new[] { "ResourceId" });
            DropIndex("public.DeviceIxQty", "ix_SearchParamId");
            DropIndex("public.DeviceIxQty", "ix_System");
            DropIndex("public.DeviceIxQty", "ix_Code");
            DropIndex("public.DeviceIxDT", new[] { "ResourceId" });
            DropIndex("public.DeviceIxDT", "ix_SearchParamId");
            DropIndex("public.DeviceIxDT", "ix_HighUtcDateTime");
            DropIndex("public.DeviceIxDT", "ix_LowUtcDateTime");
            DropIndex("public.DeviceRes", new[] { "FhirReleaseId" });
            DropIndex("public.DeviceRes", "ix_LastUpdated");
            DropIndex("public.DeviceRes", "ix_IsDeleted");
            DropIndex("public.DeviceRes", "uq_FhirIdAndVersionId");
            DropIndex("public.DeviceRes", "ix_IsCurrent");
            DropIndex("public.DeviceDefinitionIxUri", new[] { "ResourceId" });
            DropIndex("public.DeviceDefinitionIxUri", "ix_SearchParamId");
            DropIndex("public.DeviceDefinitionIxUri", "ix_Uri");
            DropIndex("public.DeviceDefinitionIxTok", new[] { "ResourceId" });
            DropIndex("public.DeviceDefinitionIxTok", "ix_SearchParamId");
            DropIndex("public.DeviceDefinitionIxTok", "ix_System");
            DropIndex("public.DeviceDefinitionIxTok", "ix_Code");
            DropIndex("public.DeviceDefinitionIxStr", new[] { "ResourceId" });
            DropIndex("public.DeviceDefinitionIxStr", "ix_SearchParamId");
            DropIndex("public.DeviceDefinitionIxStr", "ix_String");
            DropIndex("public.DeviceDefinitionIxRef", new[] { "ResourceId" });
            DropIndex("public.DeviceDefinitionIxRef", "ix_SearchParamId");
            DropIndex("public.DeviceDefinitionIxRef", "ix_RefBaseUrlId");
            DropIndex("public.DeviceDefinitionIxRef", "ix_RefFhirId");
            DropIndex("public.DeviceDefinitionIxQty", new[] { "ResourceId" });
            DropIndex("public.DeviceDefinitionIxQty", "ix_SearchParamId");
            DropIndex("public.DeviceDefinitionIxQty", "ix_System");
            DropIndex("public.DeviceDefinitionIxQty", "ix_Code");
            DropIndex("public.DeviceDefinitionIxDT", new[] { "ResourceId" });
            DropIndex("public.DeviceDefinitionIxDT", "ix_SearchParamId");
            DropIndex("public.DeviceDefinitionIxDT", "ix_HighUtcDateTime");
            DropIndex("public.DeviceDefinitionIxDT", "ix_LowUtcDateTime");
            DropIndex("public.DeviceDefinitionRes", new[] { "FhirReleaseId" });
            DropIndex("public.DeviceDefinitionRes", "ix_LastUpdated");
            DropIndex("public.DeviceDefinitionRes", "ix_IsDeleted");
            DropIndex("public.DeviceDefinitionRes", "uq_FhirIdAndVersionId");
            DropIndex("public.DeviceDefinitionRes", "ix_IsCurrent");
            DropIndex("public.DetectedIssueIxUri", new[] { "ResourceId" });
            DropIndex("public.DetectedIssueIxUri", "ix_SearchParamId");
            DropIndex("public.DetectedIssueIxUri", "ix_Uri");
            DropIndex("public.DetectedIssueIxTok", new[] { "ResourceId" });
            DropIndex("public.DetectedIssueIxTok", "ix_SearchParamId");
            DropIndex("public.DetectedIssueIxTok", "ix_System");
            DropIndex("public.DetectedIssueIxTok", "ix_Code");
            DropIndex("public.DetectedIssueIxStr", new[] { "ResourceId" });
            DropIndex("public.DetectedIssueIxStr", "ix_SearchParamId");
            DropIndex("public.DetectedIssueIxStr", "ix_String");
            DropIndex("public.DetectedIssueIxRef", new[] { "ResourceId" });
            DropIndex("public.DetectedIssueIxRef", "ix_SearchParamId");
            DropIndex("public.DetectedIssueIxRef", "ix_RefBaseUrlId");
            DropIndex("public.DetectedIssueIxRef", "ix_RefFhirId");
            DropIndex("public.DetectedIssueIxQty", new[] { "ResourceId" });
            DropIndex("public.DetectedIssueIxQty", "ix_SearchParamId");
            DropIndex("public.DetectedIssueIxQty", "ix_System");
            DropIndex("public.DetectedIssueIxQty", "ix_Code");
            DropIndex("public.DetectedIssueIxDT", new[] { "ResourceId" });
            DropIndex("public.DetectedIssueIxDT", "ix_SearchParamId");
            DropIndex("public.DetectedIssueIxDT", "ix_HighUtcDateTime");
            DropIndex("public.DetectedIssueIxDT", "ix_LowUtcDateTime");
            DropIndex("public.DetectedIssueRes", new[] { "FhirReleaseId" });
            DropIndex("public.DetectedIssueRes", "ix_LastUpdated");
            DropIndex("public.DetectedIssueRes", "ix_IsDeleted");
            DropIndex("public.DetectedIssueRes", "uq_FhirIdAndVersionId");
            DropIndex("public.DetectedIssueRes", "ix_IsCurrent");
            DropIndex("public.CoverageIxUri", new[] { "ResourceId" });
            DropIndex("public.CoverageIxUri", "ix_SearchParamId");
            DropIndex("public.CoverageIxUri", "ix_Uri");
            DropIndex("public.CoverageIxTok", new[] { "ResourceId" });
            DropIndex("public.CoverageIxTok", "ix_SearchParamId");
            DropIndex("public.CoverageIxTok", "ix_System");
            DropIndex("public.CoverageIxTok", "ix_Code");
            DropIndex("public.CoverageIxStr", new[] { "ResourceId" });
            DropIndex("public.CoverageIxStr", "ix_SearchParamId");
            DropIndex("public.CoverageIxStr", "ix_String");
            DropIndex("public.CoverageIxRef", new[] { "ResourceId" });
            DropIndex("public.CoverageIxRef", "ix_SearchParamId");
            DropIndex("public.CoverageIxRef", "ix_RefBaseUrlId");
            DropIndex("public.CoverageIxRef", "ix_RefFhirId");
            DropIndex("public.CoverageIxQty", new[] { "ResourceId" });
            DropIndex("public.CoverageIxQty", "ix_SearchParamId");
            DropIndex("public.CoverageIxQty", "ix_System");
            DropIndex("public.CoverageIxQty", "ix_Code");
            DropIndex("public.CoverageIxDT", new[] { "ResourceId" });
            DropIndex("public.CoverageIxDT", "ix_SearchParamId");
            DropIndex("public.CoverageIxDT", "ix_HighUtcDateTime");
            DropIndex("public.CoverageIxDT", "ix_LowUtcDateTime");
            DropIndex("public.CoverageRes", new[] { "FhirReleaseId" });
            DropIndex("public.CoverageRes", "ix_LastUpdated");
            DropIndex("public.CoverageRes", "ix_IsDeleted");
            DropIndex("public.CoverageRes", "uq_FhirIdAndVersionId");
            DropIndex("public.CoverageRes", "ix_IsCurrent");
            DropIndex("public.CoverageEligibilityResponseIxUri", new[] { "ResourceId" });
            DropIndex("public.CoverageEligibilityResponseIxUri", "ix_SearchParamId");
            DropIndex("public.CoverageEligibilityResponseIxUri", "ix_Uri");
            DropIndex("public.CoverageEligibilityResponseIxTok", new[] { "ResourceId" });
            DropIndex("public.CoverageEligibilityResponseIxTok", "ix_SearchParamId");
            DropIndex("public.CoverageEligibilityResponseIxTok", "ix_System");
            DropIndex("public.CoverageEligibilityResponseIxTok", "ix_Code");
            DropIndex("public.CoverageEligibilityResponseIxStr", new[] { "ResourceId" });
            DropIndex("public.CoverageEligibilityResponseIxStr", "ix_SearchParamId");
            DropIndex("public.CoverageEligibilityResponseIxStr", "ix_String");
            DropIndex("public.CoverageEligibilityResponseIxRef", new[] { "ResourceId" });
            DropIndex("public.CoverageEligibilityResponseIxRef", "ix_SearchParamId");
            DropIndex("public.CoverageEligibilityResponseIxRef", "ix_RefBaseUrlId");
            DropIndex("public.CoverageEligibilityResponseIxRef", "ix_RefFhirId");
            DropIndex("public.CoverageEligibilityResponseIxQty", new[] { "ResourceId" });
            DropIndex("public.CoverageEligibilityResponseIxQty", "ix_SearchParamId");
            DropIndex("public.CoverageEligibilityResponseIxQty", "ix_System");
            DropIndex("public.CoverageEligibilityResponseIxQty", "ix_Code");
            DropIndex("public.CoverageEligibilityResponseIxDT", new[] { "ResourceId" });
            DropIndex("public.CoverageEligibilityResponseIxDT", "ix_SearchParamId");
            DropIndex("public.CoverageEligibilityResponseIxDT", "ix_HighUtcDateTime");
            DropIndex("public.CoverageEligibilityResponseIxDT", "ix_LowUtcDateTime");
            DropIndex("public.CoverageEligibilityResponseRes", new[] { "FhirReleaseId" });
            DropIndex("public.CoverageEligibilityResponseRes", "ix_LastUpdated");
            DropIndex("public.CoverageEligibilityResponseRes", "ix_IsDeleted");
            DropIndex("public.CoverageEligibilityResponseRes", "uq_FhirIdAndVersionId");
            DropIndex("public.CoverageEligibilityResponseRes", "ix_IsCurrent");
            DropIndex("public.CoverageEligibilityRequestIxUri", new[] { "ResourceId" });
            DropIndex("public.CoverageEligibilityRequestIxUri", "ix_SearchParamId");
            DropIndex("public.CoverageEligibilityRequestIxUri", "ix_Uri");
            DropIndex("public.CoverageEligibilityRequestIxTok", new[] { "ResourceId" });
            DropIndex("public.CoverageEligibilityRequestIxTok", "ix_SearchParamId");
            DropIndex("public.CoverageEligibilityRequestIxTok", "ix_System");
            DropIndex("public.CoverageEligibilityRequestIxTok", "ix_Code");
            DropIndex("public.CoverageEligibilityRequestIxStr", new[] { "ResourceId" });
            DropIndex("public.CoverageEligibilityRequestIxStr", "ix_SearchParamId");
            DropIndex("public.CoverageEligibilityRequestIxStr", "ix_String");
            DropIndex("public.CoverageEligibilityRequestIxRef", new[] { "ResourceId" });
            DropIndex("public.CoverageEligibilityRequestIxRef", "ix_SearchParamId");
            DropIndex("public.CoverageEligibilityRequestIxRef", "ix_RefBaseUrlId");
            DropIndex("public.CoverageEligibilityRequestIxRef", "ix_RefFhirId");
            DropIndex("public.CoverageEligibilityRequestIxQty", new[] { "ResourceId" });
            DropIndex("public.CoverageEligibilityRequestIxQty", "ix_SearchParamId");
            DropIndex("public.CoverageEligibilityRequestIxQty", "ix_System");
            DropIndex("public.CoverageEligibilityRequestIxQty", "ix_Code");
            DropIndex("public.CoverageEligibilityRequestIxDT", new[] { "ResourceId" });
            DropIndex("public.CoverageEligibilityRequestIxDT", "ix_SearchParamId");
            DropIndex("public.CoverageEligibilityRequestIxDT", "ix_HighUtcDateTime");
            DropIndex("public.CoverageEligibilityRequestIxDT", "ix_LowUtcDateTime");
            DropIndex("public.CoverageEligibilityRequestRes", new[] { "FhirReleaseId" });
            DropIndex("public.CoverageEligibilityRequestRes", "ix_LastUpdated");
            DropIndex("public.CoverageEligibilityRequestRes", "ix_IsDeleted");
            DropIndex("public.CoverageEligibilityRequestRes", "uq_FhirIdAndVersionId");
            DropIndex("public.CoverageEligibilityRequestRes", "ix_IsCurrent");
            DropIndex("public.ContractIxUri", new[] { "ResourceId" });
            DropIndex("public.ContractIxUri", "ix_SearchParamId");
            DropIndex("public.ContractIxUri", "ix_Uri");
            DropIndex("public.ContractIxTok", new[] { "ResourceId" });
            DropIndex("public.ContractIxTok", "ix_SearchParamId");
            DropIndex("public.ContractIxTok", "ix_System");
            DropIndex("public.ContractIxTok", "ix_Code");
            DropIndex("public.ContractIxStr", new[] { "ResourceId" });
            DropIndex("public.ContractIxStr", "ix_SearchParamId");
            DropIndex("public.ContractIxStr", "ix_String");
            DropIndex("public.ContractIxRef", new[] { "ResourceId" });
            DropIndex("public.ContractIxRef", "ix_SearchParamId");
            DropIndex("public.ContractIxRef", "ix_RefBaseUrlId");
            DropIndex("public.ContractIxRef", "ix_RefFhirId");
            DropIndex("public.ContractIxQty", new[] { "ResourceId" });
            DropIndex("public.ContractIxQty", "ix_SearchParamId");
            DropIndex("public.ContractIxQty", "ix_System");
            DropIndex("public.ContractIxQty", "ix_Code");
            DropIndex("public.ContractIxDT", new[] { "ResourceId" });
            DropIndex("public.ContractIxDT", "ix_SearchParamId");
            DropIndex("public.ContractIxDT", "ix_HighUtcDateTime");
            DropIndex("public.ContractIxDT", "ix_LowUtcDateTime");
            DropIndex("public.ContractRes", new[] { "FhirReleaseId" });
            DropIndex("public.ContractRes", "ix_LastUpdated");
            DropIndex("public.ContractRes", "ix_IsDeleted");
            DropIndex("public.ContractRes", "uq_FhirIdAndVersionId");
            DropIndex("public.ContractRes", "ix_IsCurrent");
            DropIndex("public.ConsentIxUri", new[] { "ResourceId" });
            DropIndex("public.ConsentIxUri", "ix_SearchParamId");
            DropIndex("public.ConsentIxUri", "ix_Uri");
            DropIndex("public.ConsentIxTok", new[] { "ResourceId" });
            DropIndex("public.ConsentIxTok", "ix_SearchParamId");
            DropIndex("public.ConsentIxTok", "ix_System");
            DropIndex("public.ConsentIxTok", "ix_Code");
            DropIndex("public.ConsentIxStr", new[] { "ResourceId" });
            DropIndex("public.ConsentIxStr", "ix_SearchParamId");
            DropIndex("public.ConsentIxStr", "ix_String");
            DropIndex("public.ConsentIxRef", new[] { "ResourceId" });
            DropIndex("public.ConsentIxRef", "ix_SearchParamId");
            DropIndex("public.ConsentIxRef", "ix_RefBaseUrlId");
            DropIndex("public.ConsentIxRef", "ix_RefFhirId");
            DropIndex("public.ConsentIxQty", new[] { "ResourceId" });
            DropIndex("public.ConsentIxQty", "ix_SearchParamId");
            DropIndex("public.ConsentIxQty", "ix_System");
            DropIndex("public.ConsentIxQty", "ix_Code");
            DropIndex("public.ConsentIxDT", new[] { "ResourceId" });
            DropIndex("public.ConsentIxDT", "ix_SearchParamId");
            DropIndex("public.ConsentIxDT", "ix_HighUtcDateTime");
            DropIndex("public.ConsentIxDT", "ix_LowUtcDateTime");
            DropIndex("public.ConsentRes", new[] { "FhirReleaseId" });
            DropIndex("public.ConsentRes", "ix_LastUpdated");
            DropIndex("public.ConsentRes", "ix_IsDeleted");
            DropIndex("public.ConsentRes", "uq_FhirIdAndVersionId");
            DropIndex("public.ConsentRes", "ix_IsCurrent");
            DropIndex("public.ConditionIxUri", new[] { "ResourceId" });
            DropIndex("public.ConditionIxUri", "ix_SearchParamId");
            DropIndex("public.ConditionIxUri", "ix_Uri");
            DropIndex("public.ConditionIxTok", new[] { "ResourceId" });
            DropIndex("public.ConditionIxTok", "ix_SearchParamId");
            DropIndex("public.ConditionIxTok", "ix_System");
            DropIndex("public.ConditionIxTok", "ix_Code");
            DropIndex("public.ConditionIxStr", new[] { "ResourceId" });
            DropIndex("public.ConditionIxStr", "ix_SearchParamId");
            DropIndex("public.ConditionIxStr", "ix_String");
            DropIndex("public.ConditionIxRef", new[] { "ResourceId" });
            DropIndex("public.ConditionIxRef", "ix_SearchParamId");
            DropIndex("public.ConditionIxRef", "ix_RefBaseUrlId");
            DropIndex("public.ConditionIxRef", "ix_RefFhirId");
            DropIndex("public.ConditionIxQty", new[] { "ResourceId" });
            DropIndex("public.ConditionIxQty", "ix_SearchParamId");
            DropIndex("public.ConditionIxQty", "ix_System");
            DropIndex("public.ConditionIxQty", "ix_Code");
            DropIndex("public.ConditionIxDT", new[] { "ResourceId" });
            DropIndex("public.ConditionIxDT", "ix_SearchParamId");
            DropIndex("public.ConditionIxDT", "ix_HighUtcDateTime");
            DropIndex("public.ConditionIxDT", "ix_LowUtcDateTime");
            DropIndex("public.ConditionRes", new[] { "FhirReleaseId" });
            DropIndex("public.ConditionRes", "ix_LastUpdated");
            DropIndex("public.ConditionRes", "ix_IsDeleted");
            DropIndex("public.ConditionRes", "uq_FhirIdAndVersionId");
            DropIndex("public.ConditionRes", "ix_IsCurrent");
            DropIndex("public.ConceptMapIxUri", new[] { "ResourceId" });
            DropIndex("public.ConceptMapIxUri", "ix_SearchParamId");
            DropIndex("public.ConceptMapIxUri", "ix_Uri");
            DropIndex("public.ConceptMapIxTok", new[] { "ResourceId" });
            DropIndex("public.ConceptMapIxTok", "ix_SearchParamId");
            DropIndex("public.ConceptMapIxTok", "ix_System");
            DropIndex("public.ConceptMapIxTok", "ix_Code");
            DropIndex("public.ConceptMapIxStr", new[] { "ResourceId" });
            DropIndex("public.ConceptMapIxStr", "ix_SearchParamId");
            DropIndex("public.ConceptMapIxStr", "ix_String");
            DropIndex("public.ConceptMapIxRef", new[] { "ResourceId" });
            DropIndex("public.ConceptMapIxRef", "ix_SearchParamId");
            DropIndex("public.ConceptMapIxRef", "ix_RefBaseUrlId");
            DropIndex("public.ConceptMapIxRef", "ix_RefFhirId");
            DropIndex("public.ConceptMapIxQty", new[] { "ResourceId" });
            DropIndex("public.ConceptMapIxQty", "ix_SearchParamId");
            DropIndex("public.ConceptMapIxQty", "ix_System");
            DropIndex("public.ConceptMapIxQty", "ix_Code");
            DropIndex("public.ConceptMapIxDT", new[] { "ResourceId" });
            DropIndex("public.ConceptMapIxDT", "ix_SearchParamId");
            DropIndex("public.ConceptMapIxDT", "ix_HighUtcDateTime");
            DropIndex("public.ConceptMapIxDT", "ix_LowUtcDateTime");
            DropIndex("public.ConceptMapRes", new[] { "FhirReleaseId" });
            DropIndex("public.ConceptMapRes", "ix_LastUpdated");
            DropIndex("public.ConceptMapRes", "ix_IsDeleted");
            DropIndex("public.ConceptMapRes", "uq_FhirIdAndVersionId");
            DropIndex("public.ConceptMapRes", "ix_IsCurrent");
            DropIndex("public.CompositionIxUri", new[] { "ResourceId" });
            DropIndex("public.CompositionIxUri", "ix_SearchParamId");
            DropIndex("public.CompositionIxUri", "ix_Uri");
            DropIndex("public.CompositionIxTok", new[] { "ResourceId" });
            DropIndex("public.CompositionIxTok", "ix_SearchParamId");
            DropIndex("public.CompositionIxTok", "ix_System");
            DropIndex("public.CompositionIxTok", "ix_Code");
            DropIndex("public.CompositionIxStr", new[] { "ResourceId" });
            DropIndex("public.CompositionIxStr", "ix_SearchParamId");
            DropIndex("public.CompositionIxStr", "ix_String");
            DropIndex("public.CompositionIxRef", new[] { "ResourceId" });
            DropIndex("public.CompositionIxRef", "ix_SearchParamId");
            DropIndex("public.CompositionIxRef", "ix_RefBaseUrlId");
            DropIndex("public.CompositionIxRef", "ix_RefFhirId");
            DropIndex("public.CompositionIxQty", new[] { "ResourceId" });
            DropIndex("public.CompositionIxQty", "ix_SearchParamId");
            DropIndex("public.CompositionIxQty", "ix_System");
            DropIndex("public.CompositionIxQty", "ix_Code");
            DropIndex("public.CompositionIxDT", new[] { "ResourceId" });
            DropIndex("public.CompositionIxDT", "ix_SearchParamId");
            DropIndex("public.CompositionIxDT", "ix_HighUtcDateTime");
            DropIndex("public.CompositionIxDT", "ix_LowUtcDateTime");
            DropIndex("public.CompositionRes", new[] { "FhirReleaseId" });
            DropIndex("public.CompositionRes", "ix_LastUpdated");
            DropIndex("public.CompositionRes", "ix_IsDeleted");
            DropIndex("public.CompositionRes", "uq_FhirIdAndVersionId");
            DropIndex("public.CompositionRes", "ix_IsCurrent");
            DropIndex("public.CompartmentDefinitionIxUri", new[] { "ResourceId" });
            DropIndex("public.CompartmentDefinitionIxUri", "ix_SearchParamId");
            DropIndex("public.CompartmentDefinitionIxUri", "ix_Uri");
            DropIndex("public.CompartmentDefinitionIxTok", new[] { "ResourceId" });
            DropIndex("public.CompartmentDefinitionIxTok", "ix_SearchParamId");
            DropIndex("public.CompartmentDefinitionIxTok", "ix_System");
            DropIndex("public.CompartmentDefinitionIxTok", "ix_Code");
            DropIndex("public.CompartmentDefinitionIxStr", new[] { "ResourceId" });
            DropIndex("public.CompartmentDefinitionIxStr", "ix_SearchParamId");
            DropIndex("public.CompartmentDefinitionIxStr", "ix_String");
            DropIndex("public.CompartmentDefinitionIxRef", new[] { "ResourceId" });
            DropIndex("public.CompartmentDefinitionIxRef", "ix_SearchParamId");
            DropIndex("public.CompartmentDefinitionIxRef", "ix_RefBaseUrlId");
            DropIndex("public.CompartmentDefinitionIxRef", "ix_RefFhirId");
            DropIndex("public.CompartmentDefinitionIxQty", new[] { "ResourceId" });
            DropIndex("public.CompartmentDefinitionIxQty", "ix_SearchParamId");
            DropIndex("public.CompartmentDefinitionIxQty", "ix_System");
            DropIndex("public.CompartmentDefinitionIxQty", "ix_Code");
            DropIndex("public.CompartmentDefinitionIxDT", new[] { "ResourceId" });
            DropIndex("public.CompartmentDefinitionIxDT", "ix_SearchParamId");
            DropIndex("public.CompartmentDefinitionIxDT", "ix_HighUtcDateTime");
            DropIndex("public.CompartmentDefinitionIxDT", "ix_LowUtcDateTime");
            DropIndex("public.CompartmentDefinitionRes", new[] { "FhirReleaseId" });
            DropIndex("public.CompartmentDefinitionRes", "ix_LastUpdated");
            DropIndex("public.CompartmentDefinitionRes", "ix_IsDeleted");
            DropIndex("public.CompartmentDefinitionRes", "uq_FhirIdAndVersionId");
            DropIndex("public.CompartmentDefinitionRes", "ix_IsCurrent");
            DropIndex("public.CommunicationRequestIxUri", new[] { "ResourceId" });
            DropIndex("public.CommunicationRequestIxUri", "ix_SearchParamId");
            DropIndex("public.CommunicationRequestIxUri", "ix_Uri");
            DropIndex("public.CommunicationRequestIxTok", new[] { "ResourceId" });
            DropIndex("public.CommunicationRequestIxTok", "ix_SearchParamId");
            DropIndex("public.CommunicationRequestIxTok", "ix_System");
            DropIndex("public.CommunicationRequestIxTok", "ix_Code");
            DropIndex("public.CommunicationRequestIxStr", new[] { "ResourceId" });
            DropIndex("public.CommunicationRequestIxStr", "ix_SearchParamId");
            DropIndex("public.CommunicationRequestIxStr", "ix_String");
            DropIndex("public.CommunicationRequestIxRef", new[] { "ResourceId" });
            DropIndex("public.CommunicationRequestIxRef", "ix_SearchParamId");
            DropIndex("public.CommunicationRequestIxRef", "ix_RefBaseUrlId");
            DropIndex("public.CommunicationRequestIxRef", "ix_RefFhirId");
            DropIndex("public.CommunicationRequestIxQty", new[] { "ResourceId" });
            DropIndex("public.CommunicationRequestIxQty", "ix_SearchParamId");
            DropIndex("public.CommunicationRequestIxQty", "ix_System");
            DropIndex("public.CommunicationRequestIxQty", "ix_Code");
            DropIndex("public.CommunicationRequestIxDT", new[] { "ResourceId" });
            DropIndex("public.CommunicationRequestIxDT", "ix_SearchParamId");
            DropIndex("public.CommunicationRequestIxDT", "ix_HighUtcDateTime");
            DropIndex("public.CommunicationRequestIxDT", "ix_LowUtcDateTime");
            DropIndex("public.CommunicationRequestRes", new[] { "FhirReleaseId" });
            DropIndex("public.CommunicationRequestRes", "ix_LastUpdated");
            DropIndex("public.CommunicationRequestRes", "ix_IsDeleted");
            DropIndex("public.CommunicationRequestRes", "uq_FhirIdAndVersionId");
            DropIndex("public.CommunicationRequestRes", "ix_IsCurrent");
            DropIndex("public.CommunicationIxUri", new[] { "ResourceId" });
            DropIndex("public.CommunicationIxUri", "ix_SearchParamId");
            DropIndex("public.CommunicationIxUri", "ix_Uri");
            DropIndex("public.CommunicationIxTok", new[] { "ResourceId" });
            DropIndex("public.CommunicationIxTok", "ix_SearchParamId");
            DropIndex("public.CommunicationIxTok", "ix_System");
            DropIndex("public.CommunicationIxTok", "ix_Code");
            DropIndex("public.CommunicationIxStr", new[] { "ResourceId" });
            DropIndex("public.CommunicationIxStr", "ix_SearchParamId");
            DropIndex("public.CommunicationIxStr", "ix_String");
            DropIndex("public.CommunicationIxRef", new[] { "ResourceId" });
            DropIndex("public.CommunicationIxRef", "ix_SearchParamId");
            DropIndex("public.CommunicationIxRef", "ix_RefBaseUrlId");
            DropIndex("public.CommunicationIxRef", "ix_RefFhirId");
            DropIndex("public.CommunicationIxQty", new[] { "ResourceId" });
            DropIndex("public.CommunicationIxQty", "ix_SearchParamId");
            DropIndex("public.CommunicationIxQty", "ix_System");
            DropIndex("public.CommunicationIxQty", "ix_Code");
            DropIndex("public.CommunicationIxDT", new[] { "ResourceId" });
            DropIndex("public.CommunicationIxDT", "ix_SearchParamId");
            DropIndex("public.CommunicationIxDT", "ix_HighUtcDateTime");
            DropIndex("public.CommunicationIxDT", "ix_LowUtcDateTime");
            DropIndex("public.CommunicationRes", new[] { "FhirReleaseId" });
            DropIndex("public.CommunicationRes", "ix_LastUpdated");
            DropIndex("public.CommunicationRes", "ix_IsDeleted");
            DropIndex("public.CommunicationRes", "uq_FhirIdAndVersionId");
            DropIndex("public.CommunicationRes", "ix_IsCurrent");
            DropIndex("public.CodeSystemIxUri", new[] { "ResourceId" });
            DropIndex("public.CodeSystemIxUri", "ix_SearchParamId");
            DropIndex("public.CodeSystemIxUri", "ix_Uri");
            DropIndex("public.CodeSystemIxTok", new[] { "ResourceId" });
            DropIndex("public.CodeSystemIxTok", "ix_SearchParamId");
            DropIndex("public.CodeSystemIxTok", "ix_System");
            DropIndex("public.CodeSystemIxTok", "ix_Code");
            DropIndex("public.CodeSystemIxStr", new[] { "ResourceId" });
            DropIndex("public.CodeSystemIxStr", "ix_SearchParamId");
            DropIndex("public.CodeSystemIxStr", "ix_String");
            DropIndex("public.CodeSystemIxRef", new[] { "ResourceId" });
            DropIndex("public.CodeSystemIxRef", "ix_SearchParamId");
            DropIndex("public.CodeSystemIxRef", "ix_RefBaseUrlId");
            DropIndex("public.CodeSystemIxRef", "ix_RefFhirId");
            DropIndex("public.CodeSystemIxQty", new[] { "ResourceId" });
            DropIndex("public.CodeSystemIxQty", "ix_SearchParamId");
            DropIndex("public.CodeSystemIxQty", "ix_System");
            DropIndex("public.CodeSystemIxQty", "ix_Code");
            DropIndex("public.CodeSystemIxDT", new[] { "ResourceId" });
            DropIndex("public.CodeSystemIxDT", "ix_SearchParamId");
            DropIndex("public.CodeSystemIxDT", "ix_HighUtcDateTime");
            DropIndex("public.CodeSystemIxDT", "ix_LowUtcDateTime");
            DropIndex("public.CodeSystemRes", new[] { "FhirReleaseId" });
            DropIndex("public.CodeSystemRes", "ix_LastUpdated");
            DropIndex("public.CodeSystemRes", "ix_IsDeleted");
            DropIndex("public.CodeSystemRes", "uq_FhirIdAndVersionId");
            DropIndex("public.CodeSystemRes", "ix_IsCurrent");
            DropIndex("public.ClinicalImpressionIxUri", new[] { "ResourceId" });
            DropIndex("public.ClinicalImpressionIxUri", "ix_SearchParamId");
            DropIndex("public.ClinicalImpressionIxUri", "ix_Uri");
            DropIndex("public.ClinicalImpressionIxTok", new[] { "ResourceId" });
            DropIndex("public.ClinicalImpressionIxTok", "ix_SearchParamId");
            DropIndex("public.ClinicalImpressionIxTok", "ix_System");
            DropIndex("public.ClinicalImpressionIxTok", "ix_Code");
            DropIndex("public.ClinicalImpressionIxStr", new[] { "ResourceId" });
            DropIndex("public.ClinicalImpressionIxStr", "ix_SearchParamId");
            DropIndex("public.ClinicalImpressionIxStr", "ix_String");
            DropIndex("public.ClinicalImpressionIxRef", new[] { "ResourceId" });
            DropIndex("public.ClinicalImpressionIxRef", "ix_SearchParamId");
            DropIndex("public.ClinicalImpressionIxRef", "ix_RefBaseUrlId");
            DropIndex("public.ClinicalImpressionIxRef", "ix_RefFhirId");
            DropIndex("public.ClinicalImpressionIxQty", new[] { "ResourceId" });
            DropIndex("public.ClinicalImpressionIxQty", "ix_SearchParamId");
            DropIndex("public.ClinicalImpressionIxQty", "ix_System");
            DropIndex("public.ClinicalImpressionIxQty", "ix_Code");
            DropIndex("public.ClinicalImpressionIxDT", new[] { "ResourceId" });
            DropIndex("public.ClinicalImpressionIxDT", "ix_SearchParamId");
            DropIndex("public.ClinicalImpressionIxDT", "ix_HighUtcDateTime");
            DropIndex("public.ClinicalImpressionIxDT", "ix_LowUtcDateTime");
            DropIndex("public.ClinicalImpressionRes", new[] { "FhirReleaseId" });
            DropIndex("public.ClinicalImpressionRes", "ix_LastUpdated");
            DropIndex("public.ClinicalImpressionRes", "ix_IsDeleted");
            DropIndex("public.ClinicalImpressionRes", "uq_FhirIdAndVersionId");
            DropIndex("public.ClinicalImpressionRes", "ix_IsCurrent");
            DropIndex("public.ClaimResponseIxUri", new[] { "ResourceId" });
            DropIndex("public.ClaimResponseIxUri", "ix_SearchParamId");
            DropIndex("public.ClaimResponseIxUri", "ix_Uri");
            DropIndex("public.ClaimResponseIxTok", new[] { "ResourceId" });
            DropIndex("public.ClaimResponseIxTok", "ix_SearchParamId");
            DropIndex("public.ClaimResponseIxTok", "ix_System");
            DropIndex("public.ClaimResponseIxTok", "ix_Code");
            DropIndex("public.ClaimResponseIxStr", new[] { "ResourceId" });
            DropIndex("public.ClaimResponseIxStr", "ix_SearchParamId");
            DropIndex("public.ClaimResponseIxStr", "ix_String");
            DropIndex("public.ClaimResponseIxRef", new[] { "ResourceId" });
            DropIndex("public.ClaimResponseIxRef", "ix_SearchParamId");
            DropIndex("public.ClaimResponseIxRef", "ix_RefBaseUrlId");
            DropIndex("public.ClaimResponseIxRef", "ix_RefFhirId");
            DropIndex("public.ClaimResponseIxQty", new[] { "ResourceId" });
            DropIndex("public.ClaimResponseIxQty", "ix_SearchParamId");
            DropIndex("public.ClaimResponseIxQty", "ix_System");
            DropIndex("public.ClaimResponseIxQty", "ix_Code");
            DropIndex("public.ClaimResponseIxDT", new[] { "ResourceId" });
            DropIndex("public.ClaimResponseIxDT", "ix_SearchParamId");
            DropIndex("public.ClaimResponseIxDT", "ix_HighUtcDateTime");
            DropIndex("public.ClaimResponseIxDT", "ix_LowUtcDateTime");
            DropIndex("public.ClaimResponseRes", new[] { "FhirReleaseId" });
            DropIndex("public.ClaimResponseRes", "ix_LastUpdated");
            DropIndex("public.ClaimResponseRes", "ix_IsDeleted");
            DropIndex("public.ClaimResponseRes", "uq_FhirIdAndVersionId");
            DropIndex("public.ClaimResponseRes", "ix_IsCurrent");
            DropIndex("public.ClaimIxUri", new[] { "ResourceId" });
            DropIndex("public.ClaimIxUri", "ix_SearchParamId");
            DropIndex("public.ClaimIxUri", "ix_Uri");
            DropIndex("public.ClaimIxTok", new[] { "ResourceId" });
            DropIndex("public.ClaimIxTok", "ix_SearchParamId");
            DropIndex("public.ClaimIxTok", "ix_System");
            DropIndex("public.ClaimIxTok", "ix_Code");
            DropIndex("public.ClaimIxStr", new[] { "ResourceId" });
            DropIndex("public.ClaimIxStr", "ix_SearchParamId");
            DropIndex("public.ClaimIxStr", "ix_String");
            DropIndex("public.ClaimIxRef", new[] { "ResourceId" });
            DropIndex("public.ClaimIxRef", "ix_SearchParamId");
            DropIndex("public.ClaimIxRef", "ix_RefBaseUrlId");
            DropIndex("public.ClaimIxRef", "ix_RefFhirId");
            DropIndex("public.ClaimIxQty", new[] { "ResourceId" });
            DropIndex("public.ClaimIxQty", "ix_SearchParamId");
            DropIndex("public.ClaimIxQty", "ix_System");
            DropIndex("public.ClaimIxQty", "ix_Code");
            DropIndex("public.ClaimIxDT", new[] { "ResourceId" });
            DropIndex("public.ClaimIxDT", "ix_SearchParamId");
            DropIndex("public.ClaimIxDT", "ix_HighUtcDateTime");
            DropIndex("public.ClaimIxDT", "ix_LowUtcDateTime");
            DropIndex("public.ClaimRes", new[] { "FhirReleaseId" });
            DropIndex("public.ClaimRes", "ix_LastUpdated");
            DropIndex("public.ClaimRes", "ix_IsDeleted");
            DropIndex("public.ClaimRes", "uq_FhirIdAndVersionId");
            DropIndex("public.ClaimRes", "ix_IsCurrent");
            DropIndex("public.ChargeItemIxUri", new[] { "ResourceId" });
            DropIndex("public.ChargeItemIxUri", "ix_SearchParamId");
            DropIndex("public.ChargeItemIxUri", "ix_Uri");
            DropIndex("public.ChargeItemIxTok", new[] { "ResourceId" });
            DropIndex("public.ChargeItemIxTok", "ix_SearchParamId");
            DropIndex("public.ChargeItemIxTok", "ix_System");
            DropIndex("public.ChargeItemIxTok", "ix_Code");
            DropIndex("public.ChargeItemIxStr", new[] { "ResourceId" });
            DropIndex("public.ChargeItemIxStr", "ix_SearchParamId");
            DropIndex("public.ChargeItemIxStr", "ix_String");
            DropIndex("public.ChargeItemIxRef", new[] { "ResourceId" });
            DropIndex("public.ChargeItemIxRef", "ix_SearchParamId");
            DropIndex("public.ChargeItemIxRef", "ix_RefBaseUrlId");
            DropIndex("public.ChargeItemIxRef", "ix_RefFhirId");
            DropIndex("public.ChargeItemIxQty", new[] { "ResourceId" });
            DropIndex("public.ChargeItemIxQty", "ix_SearchParamId");
            DropIndex("public.ChargeItemIxQty", "ix_System");
            DropIndex("public.ChargeItemIxQty", "ix_Code");
            DropIndex("public.ChargeItemIxDT", new[] { "ResourceId" });
            DropIndex("public.ChargeItemIxDT", "ix_SearchParamId");
            DropIndex("public.ChargeItemIxDT", "ix_HighUtcDateTime");
            DropIndex("public.ChargeItemIxDT", "ix_LowUtcDateTime");
            DropIndex("public.ChargeItemRes", new[] { "FhirReleaseId" });
            DropIndex("public.ChargeItemRes", "ix_LastUpdated");
            DropIndex("public.ChargeItemRes", "ix_IsDeleted");
            DropIndex("public.ChargeItemRes", "uq_FhirIdAndVersionId");
            DropIndex("public.ChargeItemRes", "ix_IsCurrent");
            DropIndex("public.ChargeItemDefinitionIxUri", new[] { "ResourceId" });
            DropIndex("public.ChargeItemDefinitionIxUri", "ix_SearchParamId");
            DropIndex("public.ChargeItemDefinitionIxUri", "ix_Uri");
            DropIndex("public.ChargeItemDefinitionIxTok", new[] { "ResourceId" });
            DropIndex("public.ChargeItemDefinitionIxTok", "ix_SearchParamId");
            DropIndex("public.ChargeItemDefinitionIxTok", "ix_System");
            DropIndex("public.ChargeItemDefinitionIxTok", "ix_Code");
            DropIndex("public.ChargeItemDefinitionIxStr", new[] { "ResourceId" });
            DropIndex("public.ChargeItemDefinitionIxStr", "ix_SearchParamId");
            DropIndex("public.ChargeItemDefinitionIxStr", "ix_String");
            DropIndex("public.ChargeItemDefinitionIxRef", new[] { "ResourceId" });
            DropIndex("public.ChargeItemDefinitionIxRef", "ix_SearchParamId");
            DropIndex("public.ChargeItemDefinitionIxRef", "ix_RefBaseUrlId");
            DropIndex("public.ChargeItemDefinitionIxRef", "ix_RefFhirId");
            DropIndex("public.ChargeItemDefinitionIxQty", new[] { "ResourceId" });
            DropIndex("public.ChargeItemDefinitionIxQty", "ix_SearchParamId");
            DropIndex("public.ChargeItemDefinitionIxQty", "ix_System");
            DropIndex("public.ChargeItemDefinitionIxQty", "ix_Code");
            DropIndex("public.ChargeItemDefinitionIxDT", new[] { "ResourceId" });
            DropIndex("public.ChargeItemDefinitionIxDT", "ix_SearchParamId");
            DropIndex("public.ChargeItemDefinitionIxDT", "ix_HighUtcDateTime");
            DropIndex("public.ChargeItemDefinitionIxDT", "ix_LowUtcDateTime");
            DropIndex("public.ChargeItemDefinitionRes", new[] { "FhirReleaseId" });
            DropIndex("public.ChargeItemDefinitionRes", "ix_LastUpdated");
            DropIndex("public.ChargeItemDefinitionRes", "ix_IsDeleted");
            DropIndex("public.ChargeItemDefinitionRes", "uq_FhirIdAndVersionId");
            DropIndex("public.ChargeItemDefinitionRes", "ix_IsCurrent");
            DropIndex("public.CareTeamIxUri", new[] { "ResourceId" });
            DropIndex("public.CareTeamIxUri", "ix_SearchParamId");
            DropIndex("public.CareTeamIxUri", "ix_Uri");
            DropIndex("public.CareTeamIxTok", new[] { "ResourceId" });
            DropIndex("public.CareTeamIxTok", "ix_SearchParamId");
            DropIndex("public.CareTeamIxTok", "ix_System");
            DropIndex("public.CareTeamIxTok", "ix_Code");
            DropIndex("public.CareTeamIxStr", new[] { "ResourceId" });
            DropIndex("public.CareTeamIxStr", "ix_SearchParamId");
            DropIndex("public.CareTeamIxStr", "ix_String");
            DropIndex("public.CareTeamIxRef", new[] { "ResourceId" });
            DropIndex("public.CareTeamIxRef", "ix_SearchParamId");
            DropIndex("public.CareTeamIxRef", "ix_RefBaseUrlId");
            DropIndex("public.CareTeamIxRef", "ix_RefFhirId");
            DropIndex("public.CareTeamIxQty", new[] { "ResourceId" });
            DropIndex("public.CareTeamIxQty", "ix_SearchParamId");
            DropIndex("public.CareTeamIxQty", "ix_System");
            DropIndex("public.CareTeamIxQty", "ix_Code");
            DropIndex("public.CareTeamIxDT", new[] { "ResourceId" });
            DropIndex("public.CareTeamIxDT", "ix_SearchParamId");
            DropIndex("public.CareTeamIxDT", "ix_HighUtcDateTime");
            DropIndex("public.CareTeamIxDT", "ix_LowUtcDateTime");
            DropIndex("public.CareTeamRes", new[] { "FhirReleaseId" });
            DropIndex("public.CareTeamRes", "ix_LastUpdated");
            DropIndex("public.CareTeamRes", "ix_IsDeleted");
            DropIndex("public.CareTeamRes", "uq_FhirIdAndVersionId");
            DropIndex("public.CareTeamRes", "ix_IsCurrent");
            DropIndex("public.CarePlanIxUri", new[] { "ResourceId" });
            DropIndex("public.CarePlanIxUri", "ix_SearchParamId");
            DropIndex("public.CarePlanIxUri", "ix_Uri");
            DropIndex("public.CarePlanIxTok", new[] { "ResourceId" });
            DropIndex("public.CarePlanIxTok", "ix_SearchParamId");
            DropIndex("public.CarePlanIxTok", "ix_System");
            DropIndex("public.CarePlanIxTok", "ix_Code");
            DropIndex("public.CarePlanIxStr", new[] { "ResourceId" });
            DropIndex("public.CarePlanIxStr", "ix_SearchParamId");
            DropIndex("public.CarePlanIxStr", "ix_String");
            DropIndex("public.CarePlanIxRef", new[] { "ResourceId" });
            DropIndex("public.CarePlanIxRef", "ix_SearchParamId");
            DropIndex("public.CarePlanIxRef", "ix_RefBaseUrlId");
            DropIndex("public.CarePlanIxRef", "ix_RefFhirId");
            DropIndex("public.CarePlanIxQty", new[] { "ResourceId" });
            DropIndex("public.CarePlanIxQty", "ix_SearchParamId");
            DropIndex("public.CarePlanIxQty", "ix_System");
            DropIndex("public.CarePlanIxQty", "ix_Code");
            DropIndex("public.CarePlanIxDT", new[] { "ResourceId" });
            DropIndex("public.CarePlanIxDT", "ix_SearchParamId");
            DropIndex("public.CarePlanIxDT", "ix_HighUtcDateTime");
            DropIndex("public.CarePlanIxDT", "ix_LowUtcDateTime");
            DropIndex("public.CarePlanRes", new[] { "FhirReleaseId" });
            DropIndex("public.CarePlanRes", "ix_LastUpdated");
            DropIndex("public.CarePlanRes", "ix_IsDeleted");
            DropIndex("public.CarePlanRes", "uq_FhirIdAndVersionId");
            DropIndex("public.CarePlanRes", "ix_IsCurrent");
            DropIndex("public.CapabilityStatementIxUri", new[] { "ResourceId" });
            DropIndex("public.CapabilityStatementIxUri", "ix_SearchParamId");
            DropIndex("public.CapabilityStatementIxUri", "ix_Uri");
            DropIndex("public.CapabilityStatementIxTok", new[] { "ResourceId" });
            DropIndex("public.CapabilityStatementIxTok", "ix_SearchParamId");
            DropIndex("public.CapabilityStatementIxTok", "ix_System");
            DropIndex("public.CapabilityStatementIxTok", "ix_Code");
            DropIndex("public.CapabilityStatementIxStr", new[] { "ResourceId" });
            DropIndex("public.CapabilityStatementIxStr", "ix_SearchParamId");
            DropIndex("public.CapabilityStatementIxStr", "ix_String");
            DropIndex("public.CapabilityStatementIxRef", new[] { "ResourceId" });
            DropIndex("public.CapabilityStatementIxRef", "ix_SearchParamId");
            DropIndex("public.CapabilityStatementIxRef", "ix_RefBaseUrlId");
            DropIndex("public.CapabilityStatementIxRef", "ix_RefFhirId");
            DropIndex("public.CapabilityStatementIxQty", new[] { "ResourceId" });
            DropIndex("public.CapabilityStatementIxQty", "ix_SearchParamId");
            DropIndex("public.CapabilityStatementIxQty", "ix_System");
            DropIndex("public.CapabilityStatementIxQty", "ix_Code");
            DropIndex("public.CapabilityStatementIxDT", new[] { "ResourceId" });
            DropIndex("public.CapabilityStatementIxDT", "ix_SearchParamId");
            DropIndex("public.CapabilityStatementIxDT", "ix_HighUtcDateTime");
            DropIndex("public.CapabilityStatementIxDT", "ix_LowUtcDateTime");
            DropIndex("public.CapabilityStatementRes", new[] { "FhirReleaseId" });
            DropIndex("public.CapabilityStatementRes", "ix_LastUpdated");
            DropIndex("public.CapabilityStatementRes", "ix_IsDeleted");
            DropIndex("public.CapabilityStatementRes", "uq_FhirIdAndVersionId");
            DropIndex("public.CapabilityStatementRes", "ix_IsCurrent");
            DropIndex("public.BundleIxUri", new[] { "ResourceId" });
            DropIndex("public.BundleIxUri", "ix_SearchParamId");
            DropIndex("public.BundleIxUri", "ix_Uri");
            DropIndex("public.BundleIxTok", new[] { "ResourceId" });
            DropIndex("public.BundleIxTok", "ix_SearchParamId");
            DropIndex("public.BundleIxTok", "ix_System");
            DropIndex("public.BundleIxTok", "ix_Code");
            DropIndex("public.BundleIxStr", new[] { "ResourceId" });
            DropIndex("public.BundleIxStr", "ix_SearchParamId");
            DropIndex("public.BundleIxStr", "ix_String");
            DropIndex("public.BundleIxRef", new[] { "ResourceId" });
            DropIndex("public.BundleIxRef", "ix_SearchParamId");
            DropIndex("public.BundleIxRef", "ix_RefBaseUrlId");
            DropIndex("public.BundleIxRef", "ix_RefFhirId");
            DropIndex("public.BundleIxQty", new[] { "ResourceId" });
            DropIndex("public.BundleIxQty", "ix_SearchParamId");
            DropIndex("public.BundleIxQty", "ix_System");
            DropIndex("public.BundleIxQty", "ix_Code");
            DropIndex("public.BundleIxDT", new[] { "ResourceId" });
            DropIndex("public.BundleIxDT", "ix_SearchParamId");
            DropIndex("public.BundleIxDT", "ix_HighUtcDateTime");
            DropIndex("public.BundleIxDT", "ix_LowUtcDateTime");
            DropIndex("public.BundleRes", new[] { "FhirReleaseId" });
            DropIndex("public.BundleRes", "ix_LastUpdated");
            DropIndex("public.BundleRes", "ix_IsDeleted");
            DropIndex("public.BundleRes", "uq_FhirIdAndVersionId");
            DropIndex("public.BundleRes", "ix_IsCurrent");
            DropIndex("public.BodyStructureIxUri", new[] { "ResourceId" });
            DropIndex("public.BodyStructureIxUri", "ix_SearchParamId");
            DropIndex("public.BodyStructureIxUri", "ix_Uri");
            DropIndex("public.BodyStructureIxTok", new[] { "ResourceId" });
            DropIndex("public.BodyStructureIxTok", "ix_SearchParamId");
            DropIndex("public.BodyStructureIxTok", "ix_System");
            DropIndex("public.BodyStructureIxTok", "ix_Code");
            DropIndex("public.BodyStructureIxStr", new[] { "ResourceId" });
            DropIndex("public.BodyStructureIxStr", "ix_SearchParamId");
            DropIndex("public.BodyStructureIxStr", "ix_String");
            DropIndex("public.BodyStructureIxRef", new[] { "ResourceId" });
            DropIndex("public.BodyStructureIxRef", "ix_SearchParamId");
            DropIndex("public.BodyStructureIxRef", "ix_RefBaseUrlId");
            DropIndex("public.BodyStructureIxRef", "ix_RefFhirId");
            DropIndex("public.BodyStructureIxQty", new[] { "ResourceId" });
            DropIndex("public.BodyStructureIxQty", "ix_SearchParamId");
            DropIndex("public.BodyStructureIxQty", "ix_System");
            DropIndex("public.BodyStructureIxQty", "ix_Code");
            DropIndex("public.BodyStructureIxDT", new[] { "ResourceId" });
            DropIndex("public.BodyStructureIxDT", "ix_SearchParamId");
            DropIndex("public.BodyStructureIxDT", "ix_HighUtcDateTime");
            DropIndex("public.BodyStructureIxDT", "ix_LowUtcDateTime");
            DropIndex("public.BodyStructureRes", new[] { "FhirReleaseId" });
            DropIndex("public.BodyStructureRes", "ix_LastUpdated");
            DropIndex("public.BodyStructureRes", "ix_IsDeleted");
            DropIndex("public.BodyStructureRes", "uq_FhirIdAndVersionId");
            DropIndex("public.BodyStructureRes", "ix_IsCurrent");
            DropIndex("public.BiologicallyDerivedProductIxUri", new[] { "ResourceId" });
            DropIndex("public.BiologicallyDerivedProductIxUri", "ix_SearchParamId");
            DropIndex("public.BiologicallyDerivedProductIxUri", "ix_Uri");
            DropIndex("public.BiologicallyDerivedProductIxTok", new[] { "ResourceId" });
            DropIndex("public.BiologicallyDerivedProductIxTok", "ix_SearchParamId");
            DropIndex("public.BiologicallyDerivedProductIxTok", "ix_System");
            DropIndex("public.BiologicallyDerivedProductIxTok", "ix_Code");
            DropIndex("public.BiologicallyDerivedProductIxStr", new[] { "ResourceId" });
            DropIndex("public.BiologicallyDerivedProductIxStr", "ix_SearchParamId");
            DropIndex("public.BiologicallyDerivedProductIxStr", "ix_String");
            DropIndex("public.BiologicallyDerivedProductIxRef", new[] { "ResourceId" });
            DropIndex("public.BiologicallyDerivedProductIxRef", "ix_SearchParamId");
            DropIndex("public.BiologicallyDerivedProductIxRef", "ix_RefBaseUrlId");
            DropIndex("public.BiologicallyDerivedProductIxRef", "ix_RefFhirId");
            DropIndex("public.BiologicallyDerivedProductIxQty", new[] { "ResourceId" });
            DropIndex("public.BiologicallyDerivedProductIxQty", "ix_SearchParamId");
            DropIndex("public.BiologicallyDerivedProductIxQty", "ix_System");
            DropIndex("public.BiologicallyDerivedProductIxQty", "ix_Code");
            DropIndex("public.BiologicallyDerivedProductIxDT", new[] { "ResourceId" });
            DropIndex("public.BiologicallyDerivedProductIxDT", "ix_SearchParamId");
            DropIndex("public.BiologicallyDerivedProductIxDT", "ix_HighUtcDateTime");
            DropIndex("public.BiologicallyDerivedProductIxDT", "ix_LowUtcDateTime");
            DropIndex("public.BiologicallyDerivedProductRes", new[] { "FhirReleaseId" });
            DropIndex("public.BiologicallyDerivedProductRes", "ix_LastUpdated");
            DropIndex("public.BiologicallyDerivedProductRes", "ix_IsDeleted");
            DropIndex("public.BiologicallyDerivedProductRes", "uq_FhirIdAndVersionId");
            DropIndex("public.BiologicallyDerivedProductRes", "ix_IsCurrent");
            DropIndex("public.BinaryIxUri", new[] { "ResourceId" });
            DropIndex("public.BinaryIxUri", "ix_SearchParamId");
            DropIndex("public.BinaryIxUri", "ix_Uri");
            DropIndex("public.BinaryIxTok", new[] { "ResourceId" });
            DropIndex("public.BinaryIxTok", "ix_SearchParamId");
            DropIndex("public.BinaryIxTok", "ix_System");
            DropIndex("public.BinaryIxTok", "ix_Code");
            DropIndex("public.BinaryIxStr", new[] { "ResourceId" });
            DropIndex("public.BinaryIxStr", "ix_SearchParamId");
            DropIndex("public.BinaryIxStr", "ix_String");
            DropIndex("public.BinaryIxRef", new[] { "ResourceId" });
            DropIndex("public.BinaryIxRef", "ix_SearchParamId");
            DropIndex("public.BinaryIxRef", "ix_RefBaseUrlId");
            DropIndex("public.BinaryIxRef", "ix_RefFhirId");
            DropIndex("public.BinaryIxQty", new[] { "ResourceId" });
            DropIndex("public.BinaryIxQty", "ix_SearchParamId");
            DropIndex("public.BinaryIxQty", "ix_System");
            DropIndex("public.BinaryIxQty", "ix_Code");
            DropIndex("public.BinaryIxDT", new[] { "ResourceId" });
            DropIndex("public.BinaryIxDT", "ix_SearchParamId");
            DropIndex("public.BinaryIxDT", "ix_HighUtcDateTime");
            DropIndex("public.BinaryIxDT", "ix_LowUtcDateTime");
            DropIndex("public.BinaryRes", new[] { "FhirReleaseId" });
            DropIndex("public.BinaryRes", "ix_LastUpdated");
            DropIndex("public.BinaryRes", "ix_IsDeleted");
            DropIndex("public.BinaryRes", "uq_FhirIdAndVersionId");
            DropIndex("public.BinaryRes", "ix_IsCurrent");
            DropIndex("public.BasicIxUri", new[] { "ResourceId" });
            DropIndex("public.BasicIxUri", "ix_SearchParamId");
            DropIndex("public.BasicIxUri", "ix_Uri");
            DropIndex("public.BasicIxTok", new[] { "ResourceId" });
            DropIndex("public.BasicIxTok", "ix_SearchParamId");
            DropIndex("public.BasicIxTok", "ix_System");
            DropIndex("public.BasicIxTok", "ix_Code");
            DropIndex("public.BasicIxStr", new[] { "ResourceId" });
            DropIndex("public.BasicIxStr", "ix_SearchParamId");
            DropIndex("public.BasicIxStr", "ix_String");
            DropIndex("public.BasicIxRef", new[] { "ResourceId" });
            DropIndex("public.BasicIxRef", "ix_SearchParamId");
            DropIndex("public.BasicIxRef", "ix_RefBaseUrlId");
            DropIndex("public.BasicIxRef", "ix_RefFhirId");
            DropIndex("public.BasicIxQty", new[] { "ResourceId" });
            DropIndex("public.BasicIxQty", "ix_SearchParamId");
            DropIndex("public.BasicIxQty", "ix_System");
            DropIndex("public.BasicIxQty", "ix_Code");
            DropIndex("public.BasicIxDT", new[] { "ResourceId" });
            DropIndex("public.BasicIxDT", "ix_SearchParamId");
            DropIndex("public.BasicIxDT", "ix_HighUtcDateTime");
            DropIndex("public.BasicIxDT", "ix_LowUtcDateTime");
            DropIndex("public.BasicRes", new[] { "FhirReleaseId" });
            DropIndex("public.BasicRes", "ix_LastUpdated");
            DropIndex("public.BasicRes", "ix_IsDeleted");
            DropIndex("public.BasicRes", "uq_FhirIdAndVersionId");
            DropIndex("public.BasicRes", "ix_IsCurrent");
            DropIndex("public.AuditEventIxUri", new[] { "ResourceId" });
            DropIndex("public.AuditEventIxUri", "ix_SearchParamId");
            DropIndex("public.AuditEventIxUri", "ix_Uri");
            DropIndex("public.AuditEventIxTok", new[] { "ResourceId" });
            DropIndex("public.AuditEventIxTok", "ix_SearchParamId");
            DropIndex("public.AuditEventIxTok", "ix_System");
            DropIndex("public.AuditEventIxTok", "ix_Code");
            DropIndex("public.AuditEventIxStr", new[] { "ResourceId" });
            DropIndex("public.AuditEventIxStr", "ix_SearchParamId");
            DropIndex("public.AuditEventIxStr", "ix_String");
            DropIndex("public.AuditEventIxRef", new[] { "ResourceId" });
            DropIndex("public.AuditEventIxRef", "ix_SearchParamId");
            DropIndex("public.AuditEventIxRef", "ix_RefBaseUrlId");
            DropIndex("public.AuditEventIxRef", "ix_RefFhirId");
            DropIndex("public.AuditEventIxQty", new[] { "ResourceId" });
            DropIndex("public.AuditEventIxQty", "ix_SearchParamId");
            DropIndex("public.AuditEventIxQty", "ix_System");
            DropIndex("public.AuditEventIxQty", "ix_Code");
            DropIndex("public.AuditEventIxDT", new[] { "ResourceId" });
            DropIndex("public.AuditEventIxDT", "ix_SearchParamId");
            DropIndex("public.AuditEventIxDT", "ix_HighUtcDateTime");
            DropIndex("public.AuditEventIxDT", "ix_LowUtcDateTime");
            DropIndex("public.AuditEventRes", new[] { "FhirReleaseId" });
            DropIndex("public.AuditEventRes", "ix_LastUpdated");
            DropIndex("public.AuditEventRes", "ix_IsDeleted");
            DropIndex("public.AuditEventRes", "uq_FhirIdAndVersionId");
            DropIndex("public.AuditEventRes", "ix_IsCurrent");
            DropIndex("public.AppointmentResponseIxUri", new[] { "ResourceId" });
            DropIndex("public.AppointmentResponseIxUri", "ix_SearchParamId");
            DropIndex("public.AppointmentResponseIxUri", "ix_Uri");
            DropIndex("public.AppointmentResponseIxTok", new[] { "ResourceId" });
            DropIndex("public.AppointmentResponseIxTok", "ix_SearchParamId");
            DropIndex("public.AppointmentResponseIxTok", "ix_System");
            DropIndex("public.AppointmentResponseIxTok", "ix_Code");
            DropIndex("public.AppointmentResponseIxStr", new[] { "ResourceId" });
            DropIndex("public.AppointmentResponseIxStr", "ix_SearchParamId");
            DropIndex("public.AppointmentResponseIxStr", "ix_String");
            DropIndex("public.AppointmentResponseIxRef", new[] { "ResourceId" });
            DropIndex("public.AppointmentResponseIxRef", "ix_SearchParamId");
            DropIndex("public.AppointmentResponseIxRef", "ix_RefBaseUrlId");
            DropIndex("public.AppointmentResponseIxRef", "ix_RefFhirId");
            DropIndex("public.AppointmentResponseIxQty", new[] { "ResourceId" });
            DropIndex("public.AppointmentResponseIxQty", "ix_SearchParamId");
            DropIndex("public.AppointmentResponseIxQty", "ix_System");
            DropIndex("public.AppointmentResponseIxQty", "ix_Code");
            DropIndex("public.AppointmentResponseIxDT", new[] { "ResourceId" });
            DropIndex("public.AppointmentResponseIxDT", "ix_SearchParamId");
            DropIndex("public.AppointmentResponseIxDT", "ix_HighUtcDateTime");
            DropIndex("public.AppointmentResponseIxDT", "ix_LowUtcDateTime");
            DropIndex("public.AppointmentResponseRes", new[] { "FhirReleaseId" });
            DropIndex("public.AppointmentResponseRes", "ix_LastUpdated");
            DropIndex("public.AppointmentResponseRes", "ix_IsDeleted");
            DropIndex("public.AppointmentResponseRes", "uq_FhirIdAndVersionId");
            DropIndex("public.AppointmentResponseRes", "ix_IsCurrent");
            DropIndex("public.AppointmentIxUri", new[] { "ResourceId" });
            DropIndex("public.AppointmentIxUri", "ix_SearchParamId");
            DropIndex("public.AppointmentIxUri", "ix_Uri");
            DropIndex("public.AppointmentIxTok", new[] { "ResourceId" });
            DropIndex("public.AppointmentIxTok", "ix_SearchParamId");
            DropIndex("public.AppointmentIxTok", "ix_System");
            DropIndex("public.AppointmentIxTok", "ix_Code");
            DropIndex("public.AppointmentIxStr", new[] { "ResourceId" });
            DropIndex("public.AppointmentIxStr", "ix_SearchParamId");
            DropIndex("public.AppointmentIxStr", "ix_String");
            DropIndex("public.AppointmentIxRef", new[] { "ResourceId" });
            DropIndex("public.AppointmentIxRef", "ix_SearchParamId");
            DropIndex("public.AppointmentIxRef", "ix_RefBaseUrlId");
            DropIndex("public.AppointmentIxRef", "ix_RefFhirId");
            DropIndex("public.AppointmentIxQty", new[] { "ResourceId" });
            DropIndex("public.AppointmentIxQty", "ix_SearchParamId");
            DropIndex("public.AppointmentIxQty", "ix_System");
            DropIndex("public.AppointmentIxQty", "ix_Code");
            DropIndex("public.AppointmentIxDT", new[] { "ResourceId" });
            DropIndex("public.AppointmentIxDT", "ix_SearchParamId");
            DropIndex("public.AppointmentIxDT", "ix_HighUtcDateTime");
            DropIndex("public.AppointmentIxDT", "ix_LowUtcDateTime");
            DropIndex("public.AppointmentRes", new[] { "FhirReleaseId" });
            DropIndex("public.AppointmentRes", "ix_LastUpdated");
            DropIndex("public.AppointmentRes", "ix_IsDeleted");
            DropIndex("public.AppointmentRes", "uq_FhirIdAndVersionId");
            DropIndex("public.AppointmentRes", "ix_IsCurrent");
            DropIndex("public.AllergyIntoleranceIxUri", new[] { "ResourceId" });
            DropIndex("public.AllergyIntoleranceIxUri", "ix_SearchParamId");
            DropIndex("public.AllergyIntoleranceIxUri", "ix_Uri");
            DropIndex("public.AllergyIntoleranceIxTok", new[] { "ResourceId" });
            DropIndex("public.AllergyIntoleranceIxTok", "ix_SearchParamId");
            DropIndex("public.AllergyIntoleranceIxTok", "ix_System");
            DropIndex("public.AllergyIntoleranceIxTok", "ix_Code");
            DropIndex("public.AllergyIntoleranceIxStr", new[] { "ResourceId" });
            DropIndex("public.AllergyIntoleranceIxStr", "ix_SearchParamId");
            DropIndex("public.AllergyIntoleranceIxStr", "ix_String");
            DropIndex("public.AllergyIntoleranceIxRef", new[] { "ResourceId" });
            DropIndex("public.AllergyIntoleranceIxRef", "ix_SearchParamId");
            DropIndex("public.AllergyIntoleranceIxRef", "ix_RefBaseUrlId");
            DropIndex("public.AllergyIntoleranceIxRef", "ix_RefFhirId");
            DropIndex("public.AllergyIntoleranceIxQty", new[] { "ResourceId" });
            DropIndex("public.AllergyIntoleranceIxQty", "ix_SearchParamId");
            DropIndex("public.AllergyIntoleranceIxQty", "ix_System");
            DropIndex("public.AllergyIntoleranceIxQty", "ix_Code");
            DropIndex("public.AllergyIntoleranceIxDT", new[] { "ResourceId" });
            DropIndex("public.AllergyIntoleranceIxDT", "ix_SearchParamId");
            DropIndex("public.AllergyIntoleranceIxDT", "ix_HighUtcDateTime");
            DropIndex("public.AllergyIntoleranceIxDT", "ix_LowUtcDateTime");
            DropIndex("public.AllergyIntoleranceRes", new[] { "FhirReleaseId" });
            DropIndex("public.AllergyIntoleranceRes", "ix_LastUpdated");
            DropIndex("public.AllergyIntoleranceRes", "ix_IsDeleted");
            DropIndex("public.AllergyIntoleranceRes", "uq_FhirIdAndVersionId");
            DropIndex("public.AllergyIntoleranceRes", "ix_IsCurrent");
            DropIndex("public.AdverseEventIxUri", new[] { "ResourceId" });
            DropIndex("public.AdverseEventIxUri", "ix_SearchParamId");
            DropIndex("public.AdverseEventIxUri", "ix_Uri");
            DropIndex("public.AdverseEventIxTok", new[] { "ResourceId" });
            DropIndex("public.AdverseEventIxTok", "ix_SearchParamId");
            DropIndex("public.AdverseEventIxTok", "ix_System");
            DropIndex("public.AdverseEventIxTok", "ix_Code");
            DropIndex("public.AdverseEventIxStr", new[] { "ResourceId" });
            DropIndex("public.AdverseEventIxStr", "ix_SearchParamId");
            DropIndex("public.AdverseEventIxStr", "ix_String");
            DropIndex("public.AdverseEventIxRef", new[] { "ResourceId" });
            DropIndex("public.AdverseEventIxRef", "ix_SearchParamId");
            DropIndex("public.AdverseEventIxRef", "ix_RefBaseUrlId");
            DropIndex("public.AdverseEventIxRef", "ix_RefFhirId");
            DropIndex("public.AdverseEventIxQty", new[] { "ResourceId" });
            DropIndex("public.AdverseEventIxQty", "ix_SearchParamId");
            DropIndex("public.AdverseEventIxQty", "ix_System");
            DropIndex("public.AdverseEventIxQty", "ix_Code");
            DropIndex("public.AdverseEventIxDT", new[] { "ResourceId" });
            DropIndex("public.AdverseEventIxDT", "ix_SearchParamId");
            DropIndex("public.AdverseEventIxDT", "ix_HighUtcDateTime");
            DropIndex("public.AdverseEventIxDT", "ix_LowUtcDateTime");
            DropIndex("public.AdverseEventRes", new[] { "FhirReleaseId" });
            DropIndex("public.AdverseEventRes", "ix_LastUpdated");
            DropIndex("public.AdverseEventRes", "ix_IsDeleted");
            DropIndex("public.AdverseEventRes", "uq_FhirIdAndVersionId");
            DropIndex("public.AdverseEventRes", "ix_IsCurrent");
            DropIndex("public.ActivityDefinitionIxUri", new[] { "ResourceId" });
            DropIndex("public.ActivityDefinitionIxUri", "ix_SearchParamId");
            DropIndex("public.ActivityDefinitionIxUri", "ix_Uri");
            DropIndex("public.ActivityDefinitionIxTok", new[] { "ResourceId" });
            DropIndex("public.ActivityDefinitionIxTok", "ix_SearchParamId");
            DropIndex("public.ActivityDefinitionIxTok", "ix_System");
            DropIndex("public.ActivityDefinitionIxTok", "ix_Code");
            DropIndex("public.ActivityDefinitionIxStr", new[] { "ResourceId" });
            DropIndex("public.ActivityDefinitionIxStr", "ix_SearchParamId");
            DropIndex("public.ActivityDefinitionIxStr", "ix_String");
            DropIndex("public._BaseUrl", "ix_Url");
            DropIndex("public.ActivityDefinitionIxRef", new[] { "ResourceId" });
            DropIndex("public.ActivityDefinitionIxRef", "ix_SearchParamId");
            DropIndex("public.ActivityDefinitionIxRef", "ix_RefBaseUrlId");
            DropIndex("public.ActivityDefinitionIxRef", "ix_RefFhirId");
            DropIndex("public.ActivityDefinitionIxQty", new[] { "ResourceId" });
            DropIndex("public.ActivityDefinitionIxQty", "ix_SearchParamId");
            DropIndex("public.ActivityDefinitionIxQty", "ix_System");
            DropIndex("public.ActivityDefinitionIxQty", "ix_Code");
            DropIndex("public._SParamResource", "ix_SearchParamId");
            DropIndex("public._SCompositePivot", "ix_ChildParamId");
            DropIndex("public._SCompositePivot", "ix_ParentParamId");
            DropIndex("public._SearchParam", "ix_Status");
            DropIndex("public._SearchParam", "ix_IsIndexed");
            DropIndex("public._SearchParam", "uq_ResourceAndName");
            DropIndex("public.ActivityDefinitionIxDT", new[] { "ResourceId" });
            DropIndex("public.ActivityDefinitionIxDT", "ix_SearchParamId");
            DropIndex("public.ActivityDefinitionIxDT", "ix_HighUtcDateTime");
            DropIndex("public.ActivityDefinitionIxDT", "ix_LowUtcDateTime");
            DropIndex("public.ActivityDefinitionRes", new[] { "FhirReleaseId" });
            DropIndex("public.ActivityDefinitionRes", "ix_LastUpdated");
            DropIndex("public.ActivityDefinitionRes", "ix_IsDeleted");
            DropIndex("public.ActivityDefinitionRes", "uq_FhirIdAndVersionId");
            DropIndex("public.ActivityDefinitionRes", "ix_IsCurrent");
            DropIndex("public.AccountRes", new[] { "FhirReleaseId" });
            DropIndex("public.AccountRes", "ix_LastUpdated");
            DropIndex("public.AccountRes", "ix_IsDeleted");
            DropIndex("public.AccountRes", "uq_FhirIdAndVersionId");
            DropIndex("public.AccountRes", "ix_IsCurrent");
            DropTable("public._ServConfig");
            DropTable("public._CompartmentRes");
            DropTable("public._Compartment");
            DropTable("public.AccountIxUri");
            DropTable("public.AccountIxTok");
            DropTable("public.AccountIxStr");
            DropTable("public.AccountIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.AccountIxQty");
            DropTable("public.AccountIxDT");
            DropTable("public.VisionPrescriptionIxUri");
            DropTable("public.VisionPrescriptionIxTok");
            DropTable("public.VisionPrescriptionIxStr");
            DropTable("public.VisionPrescriptionIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.VisionPrescriptionIxQty");
            DropTable("public.VisionPrescriptionIxDT");
            DropTable("public.VisionPrescriptionRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.VerificationResultIxUri");
            DropTable("public.VerificationResultIxTok");
            DropTable("public.VerificationResultIxStr");
            DropTable("public.VerificationResultIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.VerificationResultIxQty");
            DropTable("public.VerificationResultIxDT");
            DropTable("public.VerificationResultRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ValueSetIxUri");
            DropTable("public.ValueSetIxTok");
            DropTable("public.ValueSetIxStr");
            DropTable("public.ValueSetIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ValueSetIxQty");
            DropTable("public.ValueSetIxDT");
            DropTable("public.ValueSetRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.UserSessionIxUri");
            DropTable("public.UserSessionIxTok");
            DropTable("public.UserSessionIxStr");
            DropTable("public.UserSessionIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.UserSessionIxQty");
            DropTable("public.UserSessionIxDT");
            DropTable("public.UserSessionRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.TestScriptIxUri");
            DropTable("public.TestScriptIxTok");
            DropTable("public.TestScriptIxStr");
            DropTable("public.TestScriptIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.TestScriptIxQty");
            DropTable("public.TestScriptIxDT");
            DropTable("public.TestScriptRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.TestReportIxUri");
            DropTable("public.TestReportIxTok");
            DropTable("public.TestReportIxStr");
            DropTable("public.TestReportIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.TestReportIxQty");
            DropTable("public.TestReportIxDT");
            DropTable("public.TestReportRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.TerminologyCapabilitiesIxUri");
            DropTable("public.TerminologyCapabilitiesIxTok");
            DropTable("public.TerminologyCapabilitiesIxStr");
            DropTable("public.TerminologyCapabilitiesIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.TerminologyCapabilitiesIxQty");
            DropTable("public.TerminologyCapabilitiesIxDT");
            DropTable("public.TerminologyCapabilitiesRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.TaskIxUri");
            DropTable("public.TaskIxTok");
            DropTable("public.TaskIxStr");
            DropTable("public.TaskIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.TaskIxQty");
            DropTable("public.TaskIxDT");
            DropTable("public.TaskRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.SupplyRequestIxUri");
            DropTable("public.SupplyRequestIxTok");
            DropTable("public.SupplyRequestIxStr");
            DropTable("public.SupplyRequestIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.SupplyRequestIxQty");
            DropTable("public.SupplyRequestIxDT");
            DropTable("public.SupplyRequestRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.SupplyDeliveryIxUri");
            DropTable("public.SupplyDeliveryIxTok");
            DropTable("public.SupplyDeliveryIxStr");
            DropTable("public.SupplyDeliveryIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.SupplyDeliveryIxQty");
            DropTable("public.SupplyDeliveryIxDT");
            DropTable("public.SupplyDeliveryRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.SubstanceSpecificationIxUri");
            DropTable("public.SubstanceSpecificationIxTok");
            DropTable("public.SubstanceSpecificationIxStr");
            DropTable("public.SubstanceSpecificationIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.SubstanceSpecificationIxQty");
            DropTable("public.SubstanceSpecificationIxDT");
            DropTable("public.SubstanceSpecificationRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.SubstanceReferenceInformationIxUri");
            DropTable("public.SubstanceReferenceInformationIxTok");
            DropTable("public.SubstanceReferenceInformationIxStr");
            DropTable("public.SubstanceReferenceInformationIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.SubstanceReferenceInformationIxQty");
            DropTable("public.SubstanceReferenceInformationIxDT");
            DropTable("public.SubstanceReferenceInformationRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.SubstancePolymerIxUri");
            DropTable("public.SubstancePolymerIxTok");
            DropTable("public.SubstancePolymerIxStr");
            DropTable("public.SubstancePolymerIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.SubstancePolymerIxQty");
            DropTable("public.SubstancePolymerIxDT");
            DropTable("public.SubstancePolymerRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.SubstanceIxUri");
            DropTable("public.SubstanceIxTok");
            DropTable("public.SubstanceIxStr");
            DropTable("public.SubstanceIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.SubstanceIxQty");
            DropTable("public.SubstanceIxDT");
            DropTable("public.SubstanceRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.SubscriptionIxUri");
            DropTable("public.SubscriptionIxTok");
            DropTable("public.SubscriptionIxStr");
            DropTable("public.SubscriptionIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.SubscriptionIxQty");
            DropTable("public.SubscriptionIxDT");
            DropTable("public.SubscriptionRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.StructureMapIxUri");
            DropTable("public.StructureMapIxTok");
            DropTable("public.StructureMapIxStr");
            DropTable("public.StructureMapIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.StructureMapIxQty");
            DropTable("public.StructureMapIxDT");
            DropTable("public.StructureMapRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.StructureDefinitionIxUri");
            DropTable("public.StructureDefinitionIxTok");
            DropTable("public.StructureDefinitionIxStr");
            DropTable("public.StructureDefinitionIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.StructureDefinitionIxQty");
            DropTable("public.StructureDefinitionIxDT");
            DropTable("public.StructureDefinitionRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.SpecimenIxUri");
            DropTable("public.SpecimenIxTok");
            DropTable("public.SpecimenIxStr");
            DropTable("public.SpecimenIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.SpecimenIxQty");
            DropTable("public.SpecimenIxDT");
            DropTable("public.SpecimenRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.SpecimenDefinitionIxUri");
            DropTable("public.SpecimenDefinitionIxTok");
            DropTable("public.SpecimenDefinitionIxStr");
            DropTable("public.SpecimenDefinitionIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.SpecimenDefinitionIxQty");
            DropTable("public.SpecimenDefinitionIxDT");
            DropTable("public.SpecimenDefinitionRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.SlotIxUri");
            DropTable("public.SlotIxTok");
            DropTable("public.SlotIxStr");
            DropTable("public.SlotIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.SlotIxQty");
            DropTable("public.SlotIxDT");
            DropTable("public.SlotRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ServiceRequestIxUri");
            DropTable("public.ServiceRequestIxTok");
            DropTable("public.ServiceRequestIxStr");
            DropTable("public.ServiceRequestIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ServiceRequestIxQty");
            DropTable("public.ServiceRequestIxDT");
            DropTable("public.ServiceRequestRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.SequenceIxUri");
            DropTable("public.SequenceIxTok");
            DropTable("public.SequenceIxStr");
            DropTable("public.SequenceIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.SequenceIxQty");
            DropTable("public.SequenceIxDT");
            DropTable("public.SequenceRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.SearchParameterIxUri");
            DropTable("public.SearchParameterIxTok");
            DropTable("public.SearchParameterIxStr");
            DropTable("public.SearchParameterIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.SearchParameterIxQty");
            DropTable("public.SearchParameterIxDT");
            DropTable("public.SearchParameterRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ScheduleIxUri");
            DropTable("public.ScheduleIxTok");
            DropTable("public.ScheduleIxStr");
            DropTable("public.ScheduleIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ScheduleIxQty");
            DropTable("public.ScheduleIxDT");
            DropTable("public.ScheduleRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.RiskAssessmentIxUri");
            DropTable("public.RiskAssessmentIxTok");
            DropTable("public.RiskAssessmentIxStr");
            DropTable("public.RiskAssessmentIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.RiskAssessmentIxQty");
            DropTable("public.RiskAssessmentIxDT");
            DropTable("public.RiskAssessmentRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ResearchSubjectIxUri");
            DropTable("public.ResearchSubjectIxTok");
            DropTable("public.ResearchSubjectIxStr");
            DropTable("public.ResearchSubjectIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ResearchSubjectIxQty");
            DropTable("public.ResearchSubjectIxDT");
            DropTable("public.ResearchSubjectRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ResearchStudyIxUri");
            DropTable("public.ResearchStudyIxTok");
            DropTable("public.ResearchStudyIxStr");
            DropTable("public.ResearchStudyIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ResearchStudyIxQty");
            DropTable("public.ResearchStudyIxDT");
            DropTable("public.ResearchStudyRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.RequestGroupIxUri");
            DropTable("public.RequestGroupIxTok");
            DropTable("public.RequestGroupIxStr");
            DropTable("public.RequestGroupIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.RequestGroupIxQty");
            DropTable("public.RequestGroupIxDT");
            DropTable("public.RequestGroupRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.RelatedPersonIxUri");
            DropTable("public.RelatedPersonIxTok");
            DropTable("public.RelatedPersonIxStr");
            DropTable("public.RelatedPersonIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.RelatedPersonIxQty");
            DropTable("public.RelatedPersonIxDT");
            DropTable("public.RelatedPersonRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.QuestionnaireResponseIxUri");
            DropTable("public.QuestionnaireResponseIxTok");
            DropTable("public.QuestionnaireResponseIxStr");
            DropTable("public.QuestionnaireResponseIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.QuestionnaireResponseIxQty");
            DropTable("public.QuestionnaireResponseIxDT");
            DropTable("public.QuestionnaireResponseRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.QuestionnaireIxUri");
            DropTable("public.QuestionnaireIxTok");
            DropTable("public.QuestionnaireIxStr");
            DropTable("public.QuestionnaireIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.QuestionnaireIxQty");
            DropTable("public.QuestionnaireIxDT");
            DropTable("public.QuestionnaireRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ProvenanceIxUri");
            DropTable("public.ProvenanceIxTok");
            DropTable("public.ProvenanceIxStr");
            DropTable("public.ProvenanceIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ProvenanceIxQty");
            DropTable("public.ProvenanceIxDT");
            DropTable("public.ProvenanceRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ProcessResponseIxUri");
            DropTable("public.ProcessResponseIxTok");
            DropTable("public.ProcessResponseIxStr");
            DropTable("public.ProcessResponseIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ProcessResponseIxQty");
            DropTable("public.ProcessResponseIxDT");
            DropTable("public.ProcessResponseRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ProcessRequestIxUri");
            DropTable("public.ProcessRequestIxTok");
            DropTable("public.ProcessRequestIxStr");
            DropTable("public.ProcessRequestIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ProcessRequestIxQty");
            DropTable("public.ProcessRequestIxDT");
            DropTable("public.ProcessRequestRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ProcedureIxUri");
            DropTable("public.ProcedureIxTok");
            DropTable("public.ProcedureIxStr");
            DropTable("public.ProcedureIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ProcedureIxQty");
            DropTable("public.ProcedureIxDT");
            DropTable("public.ProcedureRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.PractitionerRoleIxUri");
            DropTable("public.PractitionerRoleIxTok");
            DropTable("public.PractitionerRoleIxStr");
            DropTable("public.PractitionerRoleIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.PractitionerRoleIxQty");
            DropTable("public.PractitionerRoleIxDT");
            DropTable("public.PractitionerRoleRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.PractitionerIxUri");
            DropTable("public.PractitionerIxTok");
            DropTable("public.PractitionerIxStr");
            DropTable("public.PractitionerIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.PractitionerIxQty");
            DropTable("public.PractitionerIxDT");
            DropTable("public.PractitionerRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.PlanDefinitionIxUri");
            DropTable("public.PlanDefinitionIxTok");
            DropTable("public.PlanDefinitionIxStr");
            DropTable("public.PlanDefinitionIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.PlanDefinitionIxQty");
            DropTable("public.PlanDefinitionIxDT");
            DropTable("public.PlanDefinitionRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.PersonIxUri");
            DropTable("public.PersonIxTok");
            DropTable("public.PersonIxStr");
            DropTable("public.PersonIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.PersonIxQty");
            DropTable("public.PersonIxDT");
            DropTable("public.PersonRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.PaymentReconciliationIxUri");
            DropTable("public.PaymentReconciliationIxTok");
            DropTable("public.PaymentReconciliationIxStr");
            DropTable("public.PaymentReconciliationIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.PaymentReconciliationIxQty");
            DropTable("public.PaymentReconciliationIxDT");
            DropTable("public.PaymentReconciliationRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.PaymentNoticeIxUri");
            DropTable("public.PaymentNoticeIxTok");
            DropTable("public.PaymentNoticeIxStr");
            DropTable("public.PaymentNoticeIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.PaymentNoticeIxQty");
            DropTable("public.PaymentNoticeIxDT");
            DropTable("public.PaymentNoticeRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.PatientIxUri");
            DropTable("public.PatientIxTok");
            DropTable("public.PatientIxStr");
            DropTable("public.PatientIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.PatientIxQty");
            DropTable("public.PatientIxDT");
            DropTable("public.PatientRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ParametersIxUri");
            DropTable("public.ParametersIxTok");
            DropTable("public.ParametersIxStr");
            DropTable("public.ParametersIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ParametersIxQty");
            DropTable("public.ParametersIxDT");
            DropTable("public.ParametersRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.OrganizationIxUri");
            DropTable("public.OrganizationIxTok");
            DropTable("public.OrganizationIxStr");
            DropTable("public.OrganizationIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.OrganizationIxQty");
            DropTable("public.OrganizationIxDT");
            DropTable("public.OrganizationRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.OrganizationAffiliationIxUri");
            DropTable("public.OrganizationAffiliationIxTok");
            DropTable("public.OrganizationAffiliationIxStr");
            DropTable("public.OrganizationAffiliationIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.OrganizationAffiliationIxQty");
            DropTable("public.OrganizationAffiliationIxDT");
            DropTable("public.OrganizationAffiliationRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.OperationOutcomeIxUri");
            DropTable("public.OperationOutcomeIxTok");
            DropTable("public.OperationOutcomeIxStr");
            DropTable("public.OperationOutcomeIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.OperationOutcomeIxQty");
            DropTable("public.OperationOutcomeIxDT");
            DropTable("public.OperationOutcomeRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.OperationDefinitionIxUri");
            DropTable("public.OperationDefinitionIxTok");
            DropTable("public.OperationDefinitionIxStr");
            DropTable("public.OperationDefinitionIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.OperationDefinitionIxQty");
            DropTable("public.OperationDefinitionIxDT");
            DropTable("public.OperationDefinitionRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ObservationIxUri");
            DropTable("public.ObservationIxTok");
            DropTable("public.ObservationIxStr");
            DropTable("public.ObservationIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ObservationIxQty");
            DropTable("public.ObservationIxDT");
            DropTable("public.ObservationRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ObservationDefinitionIxUri");
            DropTable("public.ObservationDefinitionIxTok");
            DropTable("public.ObservationDefinitionIxStr");
            DropTable("public.ObservationDefinitionIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ObservationDefinitionIxQty");
            DropTable("public.ObservationDefinitionIxDT");
            DropTable("public.ObservationDefinitionRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.NutritionOrderIxUri");
            DropTable("public.NutritionOrderIxTok");
            DropTable("public.NutritionOrderIxStr");
            DropTable("public.NutritionOrderIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.NutritionOrderIxQty");
            DropTable("public.NutritionOrderIxDT");
            DropTable("public.NutritionOrderRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.NamingSystemIxUri");
            DropTable("public.NamingSystemIxTok");
            DropTable("public.NamingSystemIxStr");
            DropTable("public.NamingSystemIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.NamingSystemIxQty");
            DropTable("public.NamingSystemIxDT");
            DropTable("public.NamingSystemRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.MessageHeaderIxUri");
            DropTable("public.MessageHeaderIxTok");
            DropTable("public.MessageHeaderIxStr");
            DropTable("public.MessageHeaderIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.MessageHeaderIxQty");
            DropTable("public.MessageHeaderIxDT");
            DropTable("public.MessageHeaderRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.MessageDefinitionIxUri");
            DropTable("public.MessageDefinitionIxTok");
            DropTable("public.MessageDefinitionIxStr");
            DropTable("public.MessageDefinitionIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.MessageDefinitionIxQty");
            DropTable("public.MessageDefinitionIxDT");
            DropTable("public.MessageDefinitionRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.MedicinalProductUndesirableEffectIxUri");
            DropTable("public.MedicinalProductUndesirableEffectIxTok");
            DropTable("public.MedicinalProductUndesirableEffectIxStr");
            DropTable("public.MedicinalProductUndesirableEffectIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.MedicinalProductUndesirableEffectIxQty");
            DropTable("public.MedicinalProductUndesirableEffectIxDT");
            DropTable("public.MedicinalProductUndesirableEffectRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.MedicinalProductPharmaceuticalIxUri");
            DropTable("public.MedicinalProductPharmaceuticalIxTok");
            DropTable("public.MedicinalProductPharmaceuticalIxStr");
            DropTable("public.MedicinalProductPharmaceuticalIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.MedicinalProductPharmaceuticalIxQty");
            DropTable("public.MedicinalProductPharmaceuticalIxDT");
            DropTable("public.MedicinalProductPharmaceuticalRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.MedicinalProductPackagedIxUri");
            DropTable("public.MedicinalProductPackagedIxTok");
            DropTable("public.MedicinalProductPackagedIxStr");
            DropTable("public.MedicinalProductPackagedIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.MedicinalProductPackagedIxQty");
            DropTable("public.MedicinalProductPackagedIxDT");
            DropTable("public.MedicinalProductPackagedRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.MedicinalProductManufacturedIxUri");
            DropTable("public.MedicinalProductManufacturedIxTok");
            DropTable("public.MedicinalProductManufacturedIxStr");
            DropTable("public.MedicinalProductManufacturedIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.MedicinalProductManufacturedIxQty");
            DropTable("public.MedicinalProductManufacturedIxDT");
            DropTable("public.MedicinalProductManufacturedRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.MedicinalProductIxUri");
            DropTable("public.MedicinalProductIxTok");
            DropTable("public.MedicinalProductIxStr");
            DropTable("public.MedicinalProductIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.MedicinalProductIxQty");
            DropTable("public.MedicinalProductIxDT");
            DropTable("public.MedicinalProductRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.MedicinalProductInteractionIxUri");
            DropTable("public.MedicinalProductInteractionIxTok");
            DropTable("public.MedicinalProductInteractionIxStr");
            DropTable("public.MedicinalProductInteractionIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.MedicinalProductInteractionIxQty");
            DropTable("public.MedicinalProductInteractionIxDT");
            DropTable("public.MedicinalProductInteractionRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.MedicinalProductIngredientIxUri");
            DropTable("public.MedicinalProductIngredientIxTok");
            DropTable("public.MedicinalProductIngredientIxStr");
            DropTable("public.MedicinalProductIngredientIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.MedicinalProductIngredientIxQty");
            DropTable("public.MedicinalProductIngredientIxDT");
            DropTable("public.MedicinalProductIngredientRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.MedicinalProductIndicationIxUri");
            DropTable("public.MedicinalProductIndicationIxTok");
            DropTable("public.MedicinalProductIndicationIxStr");
            DropTable("public.MedicinalProductIndicationIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.MedicinalProductIndicationIxQty");
            DropTable("public.MedicinalProductIndicationIxDT");
            DropTable("public.MedicinalProductIndicationRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.MedicinalProductDeviceSpecIxUri");
            DropTable("public.MedicinalProductDeviceSpecIxTok");
            DropTable("public.MedicinalProductDeviceSpecIxStr");
            DropTable("public.MedicinalProductDeviceSpecIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.MedicinalProductDeviceSpecIxQty");
            DropTable("public.MedicinalProductDeviceSpecIxDT");
            DropTable("public.MedicinalProductDeviceSpecRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.MedicinalProductContraindicationIxUri");
            DropTable("public.MedicinalProductContraindicationIxTok");
            DropTable("public.MedicinalProductContraindicationIxStr");
            DropTable("public.MedicinalProductContraindicationIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.MedicinalProductContraindicationIxQty");
            DropTable("public.MedicinalProductContraindicationIxDT");
            DropTable("public.MedicinalProductContraindicationRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.MedicinalProductClinicalsIxUri");
            DropTable("public.MedicinalProductClinicalsIxTok");
            DropTable("public.MedicinalProductClinicalsIxStr");
            DropTable("public.MedicinalProductClinicalsIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.MedicinalProductClinicalsIxQty");
            DropTable("public.MedicinalProductClinicalsIxDT");
            DropTable("public.MedicinalProductClinicalsRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.MedicinalProductAuthorizationIxUri");
            DropTable("public.MedicinalProductAuthorizationIxTok");
            DropTable("public.MedicinalProductAuthorizationIxStr");
            DropTable("public.MedicinalProductAuthorizationIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.MedicinalProductAuthorizationIxQty");
            DropTable("public.MedicinalProductAuthorizationIxDT");
            DropTable("public.MedicinalProductAuthorizationRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.MedicationStatementIxUri");
            DropTable("public.MedicationStatementIxTok");
            DropTable("public.MedicationStatementIxStr");
            DropTable("public.MedicationStatementIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.MedicationStatementIxQty");
            DropTable("public.MedicationStatementIxDT");
            DropTable("public.MedicationStatementRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.MedicationRequestIxUri");
            DropTable("public.MedicationRequestIxTok");
            DropTable("public.MedicationRequestIxStr");
            DropTable("public.MedicationRequestIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.MedicationRequestIxQty");
            DropTable("public.MedicationRequestIxDT");
            DropTable("public.MedicationRequestRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.MedicationIxUri");
            DropTable("public.MedicationIxTok");
            DropTable("public.MedicationIxStr");
            DropTable("public.MedicationIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.MedicationIxQty");
            DropTable("public.MedicationIxDT");
            DropTable("public.MedicationRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.MedicationKnowledgeIxUri");
            DropTable("public.MedicationKnowledgeIxTok");
            DropTable("public.MedicationKnowledgeIxStr");
            DropTable("public.MedicationKnowledgeIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.MedicationKnowledgeIxQty");
            DropTable("public.MedicationKnowledgeIxDT");
            DropTable("public.MedicationKnowledgeRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.MedicationDispenseIxUri");
            DropTable("public.MedicationDispenseIxTok");
            DropTable("public.MedicationDispenseIxStr");
            DropTable("public.MedicationDispenseIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.MedicationDispenseIxQty");
            DropTable("public.MedicationDispenseIxDT");
            DropTable("public.MedicationDispenseRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.MedicationAdministrationIxUri");
            DropTable("public.MedicationAdministrationIxTok");
            DropTable("public.MedicationAdministrationIxStr");
            DropTable("public.MedicationAdministrationIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.MedicationAdministrationIxQty");
            DropTable("public.MedicationAdministrationIxDT");
            DropTable("public.MedicationAdministrationRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.MediaIxUri");
            DropTable("public.MediaIxTok");
            DropTable("public.MediaIxStr");
            DropTable("public.MediaIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.MediaIxQty");
            DropTable("public.MediaIxDT");
            DropTable("public.MediaRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.MeasureReportIxUri");
            DropTable("public.MeasureReportIxTok");
            DropTable("public.MeasureReportIxStr");
            DropTable("public.MeasureReportIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.MeasureReportIxQty");
            DropTable("public.MeasureReportIxDT");
            DropTable("public.MeasureReportRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.MeasureIxUri");
            DropTable("public.MeasureIxTok");
            DropTable("public.MeasureIxStr");
            DropTable("public.MeasureIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.MeasureIxQty");
            DropTable("public.MeasureIxDT");
            DropTable("public.MeasureRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.LocationIxUri");
            DropTable("public.LocationIxTok");
            DropTable("public.LocationIxStr");
            DropTable("public.LocationIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.LocationIxQty");
            DropTable("public.LocationIxDT");
            DropTable("public.LocationRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ListIxUri");
            DropTable("public.ListIxTok");
            DropTable("public.ListIxStr");
            DropTable("public.ListIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ListIxQty");
            DropTable("public.ListIxDT");
            DropTable("public.ListRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.LinkageIxUri");
            DropTable("public.LinkageIxTok");
            DropTable("public.LinkageIxStr");
            DropTable("public.LinkageIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.LinkageIxQty");
            DropTable("public.LinkageIxDT");
            DropTable("public.LinkageRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.LibraryIxUri");
            DropTable("public.LibraryIxTok");
            DropTable("public.LibraryIxStr");
            DropTable("public.LibraryIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.LibraryIxQty");
            DropTable("public.LibraryIxDT");
            DropTable("public.LibraryRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ItemInstanceIxUri");
            DropTable("public.ItemInstanceIxTok");
            DropTable("public.ItemInstanceIxStr");
            DropTable("public.ItemInstanceIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ItemInstanceIxQty");
            DropTable("public.ItemInstanceIxDT");
            DropTable("public.ItemInstanceRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.InvoiceIxUri");
            DropTable("public.InvoiceIxTok");
            DropTable("public.InvoiceIxStr");
            DropTable("public.InvoiceIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.InvoiceIxQty");
            DropTable("public.InvoiceIxDT");
            DropTable("public.InvoiceRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.InsurancePlanIxUri");
            DropTable("public.InsurancePlanIxTok");
            DropTable("public.InsurancePlanIxStr");
            DropTable("public.InsurancePlanIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.InsurancePlanIxQty");
            DropTable("public.InsurancePlanIxDT");
            DropTable("public.InsurancePlanRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ImplementationGuideIxUri");
            DropTable("public.ImplementationGuideIxTok");
            DropTable("public.ImplementationGuideIxStr");
            DropTable("public.ImplementationGuideIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ImplementationGuideIxQty");
            DropTable("public.ImplementationGuideIxDT");
            DropTable("public.ImplementationGuideRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ImmunizationRecommendationIxUri");
            DropTable("public.ImmunizationRecommendationIxTok");
            DropTable("public.ImmunizationRecommendationIxStr");
            DropTable("public.ImmunizationRecommendationIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ImmunizationRecommendationIxQty");
            DropTable("public.ImmunizationRecommendationIxDT");
            DropTable("public.ImmunizationRecommendationRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ImmunizationIxUri");
            DropTable("public.ImmunizationIxTok");
            DropTable("public.ImmunizationIxStr");
            DropTable("public.ImmunizationIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ImmunizationIxQty");
            DropTable("public.ImmunizationIxDT");
            DropTable("public.ImmunizationRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ImmunizationEvaluationIxUri");
            DropTable("public.ImmunizationEvaluationIxTok");
            DropTable("public.ImmunizationEvaluationIxStr");
            DropTable("public.ImmunizationEvaluationIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ImmunizationEvaluationIxQty");
            DropTable("public.ImmunizationEvaluationIxDT");
            DropTable("public.ImmunizationEvaluationRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ImagingStudyIxUri");
            DropTable("public.ImagingStudyIxTok");
            DropTable("public.ImagingStudyIxStr");
            DropTable("public.ImagingStudyIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ImagingStudyIxQty");
            DropTable("public.ImagingStudyIxDT");
            DropTable("public.ImagingStudyRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.HealthcareServiceIxUri");
            DropTable("public.HealthcareServiceIxTok");
            DropTable("public.HealthcareServiceIxStr");
            DropTable("public.HealthcareServiceIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.HealthcareServiceIxQty");
            DropTable("public.HealthcareServiceIxDT");
            DropTable("public.HealthcareServiceRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.GuidanceResponseIxUri");
            DropTable("public.GuidanceResponseIxTok");
            DropTable("public.GuidanceResponseIxStr");
            DropTable("public.GuidanceResponseIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.GuidanceResponseIxQty");
            DropTable("public.GuidanceResponseIxDT");
            DropTable("public.GuidanceResponseRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.GroupIxUri");
            DropTable("public.GroupIxTok");
            DropTable("public.GroupIxStr");
            DropTable("public.GroupIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.GroupIxQty");
            DropTable("public.GroupIxDT");
            DropTable("public.GroupRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.GraphDefinitionIxUri");
            DropTable("public.GraphDefinitionIxTok");
            DropTable("public.GraphDefinitionIxStr");
            DropTable("public.GraphDefinitionIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.GraphDefinitionIxQty");
            DropTable("public.GraphDefinitionIxDT");
            DropTable("public.GraphDefinitionRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.GoalIxUri");
            DropTable("public.GoalIxTok");
            DropTable("public.GoalIxStr");
            DropTable("public.GoalIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.GoalIxQty");
            DropTable("public.GoalIxDT");
            DropTable("public.GoalRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.FlagIxUri");
            DropTable("public.FlagIxTok");
            DropTable("public.FlagIxStr");
            DropTable("public.FlagIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.FlagIxQty");
            DropTable("public.FlagIxDT");
            DropTable("public.FlagRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.FamilyMemberHistoryIxUri");
            DropTable("public.FamilyMemberHistoryIxTok");
            DropTable("public.FamilyMemberHistoryIxStr");
            DropTable("public.FamilyMemberHistoryIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.FamilyMemberHistoryIxQty");
            DropTable("public.FamilyMemberHistoryIxDT");
            DropTable("public.FamilyMemberHistoryRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ExplanationOfBenefitIxUri");
            DropTable("public.ExplanationOfBenefitIxTok");
            DropTable("public.ExplanationOfBenefitIxStr");
            DropTable("public.ExplanationOfBenefitIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ExplanationOfBenefitIxQty");
            DropTable("public.ExplanationOfBenefitIxDT");
            DropTable("public.ExplanationOfBenefitRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ExampleScenarioIxUri");
            DropTable("public.ExampleScenarioIxTok");
            DropTable("public.ExampleScenarioIxStr");
            DropTable("public.ExampleScenarioIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ExampleScenarioIxQty");
            DropTable("public.ExampleScenarioIxDT");
            DropTable("public.ExampleScenarioRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.EventDefinitionIxUri");
            DropTable("public.EventDefinitionIxTok");
            DropTable("public.EventDefinitionIxStr");
            DropTable("public.EventDefinitionIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.EventDefinitionIxQty");
            DropTable("public.EventDefinitionIxDT");
            DropTable("public.EventDefinitionRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.EpisodeOfCareIxUri");
            DropTable("public.EpisodeOfCareIxTok");
            DropTable("public.EpisodeOfCareIxStr");
            DropTable("public.EpisodeOfCareIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.EpisodeOfCareIxQty");
            DropTable("public.EpisodeOfCareIxDT");
            DropTable("public.EpisodeOfCareRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.EntryDefinitionIxUri");
            DropTable("public.EntryDefinitionIxTok");
            DropTable("public.EntryDefinitionIxStr");
            DropTable("public.EntryDefinitionIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.EntryDefinitionIxQty");
            DropTable("public.EntryDefinitionIxDT");
            DropTable("public.EntryDefinitionRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.EnrollmentResponseIxUri");
            DropTable("public.EnrollmentResponseIxTok");
            DropTable("public.EnrollmentResponseIxStr");
            DropTable("public.EnrollmentResponseIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.EnrollmentResponseIxQty");
            DropTable("public.EnrollmentResponseIxDT");
            DropTable("public.EnrollmentResponseRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.EnrollmentRequestIxUri");
            DropTable("public.EnrollmentRequestIxTok");
            DropTable("public.EnrollmentRequestIxStr");
            DropTable("public.EnrollmentRequestIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.EnrollmentRequestIxQty");
            DropTable("public.EnrollmentRequestIxDT");
            DropTable("public.EnrollmentRequestRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.EndpointIxUri");
            DropTable("public.EndpointIxTok");
            DropTable("public.EndpointIxStr");
            DropTable("public.EndpointIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.EndpointIxQty");
            DropTable("public.EndpointIxDT");
            DropTable("public.EndpointRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.EncounterIxUri");
            DropTable("public.EncounterIxTok");
            DropTable("public.EncounterIxStr");
            DropTable("public.EncounterIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.EncounterIxQty");
            DropTable("public.EncounterIxDT");
            DropTable("public.EncounterRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.DocumentReferenceIxUri");
            DropTable("public.DocumentReferenceIxTok");
            DropTable("public.DocumentReferenceIxStr");
            DropTable("public.DocumentReferenceIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.DocumentReferenceIxQty");
            DropTable("public.DocumentReferenceIxDT");
            DropTable("public.DocumentReferenceRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.DocumentManifestIxUri");
            DropTable("public.DocumentManifestIxTok");
            DropTable("public.DocumentManifestIxStr");
            DropTable("public.DocumentManifestIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.DocumentManifestIxQty");
            DropTable("public.DocumentManifestIxDT");
            DropTable("public.DocumentManifestRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.DiagnosticReportIxUri");
            DropTable("public.DiagnosticReportIxTok");
            DropTable("public.DiagnosticReportIxStr");
            DropTable("public.DiagnosticReportIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.DiagnosticReportIxQty");
            DropTable("public.DiagnosticReportIxDT");
            DropTable("public.DiagnosticReportRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.DeviceUseStatementIxUri");
            DropTable("public.DeviceUseStatementIxTok");
            DropTable("public.DeviceUseStatementIxStr");
            DropTable("public.DeviceUseStatementIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.DeviceUseStatementIxQty");
            DropTable("public.DeviceUseStatementIxDT");
            DropTable("public.DeviceUseStatementRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.DeviceRequestIxUri");
            DropTable("public.DeviceRequestIxTok");
            DropTable("public.DeviceRequestIxStr");
            DropTable("public.DeviceRequestIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.DeviceRequestIxQty");
            DropTable("public.DeviceRequestIxDT");
            DropTable("public.DeviceRequestRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.DeviceMetricIxUri");
            DropTable("public.DeviceMetricIxTok");
            DropTable("public.DeviceMetricIxStr");
            DropTable("public.DeviceMetricIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.DeviceMetricIxQty");
            DropTable("public.DeviceMetricIxDT");
            DropTable("public.DeviceMetricRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.DeviceIxUri");
            DropTable("public.DeviceIxTok");
            DropTable("public.DeviceIxStr");
            DropTable("public.DeviceIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.DeviceIxQty");
            DropTable("public.DeviceIxDT");
            DropTable("public.DeviceRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.DeviceDefinitionIxUri");
            DropTable("public.DeviceDefinitionIxTok");
            DropTable("public.DeviceDefinitionIxStr");
            DropTable("public.DeviceDefinitionIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.DeviceDefinitionIxQty");
            DropTable("public.DeviceDefinitionIxDT");
            DropTable("public.DeviceDefinitionRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.DetectedIssueIxUri");
            DropTable("public.DetectedIssueIxTok");
            DropTable("public.DetectedIssueIxStr");
            DropTable("public.DetectedIssueIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.DetectedIssueIxQty");
            DropTable("public.DetectedIssueIxDT");
            DropTable("public.DetectedIssueRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.CoverageIxUri");
            DropTable("public.CoverageIxTok");
            DropTable("public.CoverageIxStr");
            DropTable("public.CoverageIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.CoverageIxQty");
            DropTable("public.CoverageIxDT");
            DropTable("public.CoverageRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.CoverageEligibilityResponseIxUri");
            DropTable("public.CoverageEligibilityResponseIxTok");
            DropTable("public.CoverageEligibilityResponseIxStr");
            DropTable("public.CoverageEligibilityResponseIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.CoverageEligibilityResponseIxQty");
            DropTable("public.CoverageEligibilityResponseIxDT");
            DropTable("public.CoverageEligibilityResponseRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.CoverageEligibilityRequestIxUri");
            DropTable("public.CoverageEligibilityRequestIxTok");
            DropTable("public.CoverageEligibilityRequestIxStr");
            DropTable("public.CoverageEligibilityRequestIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.CoverageEligibilityRequestIxQty");
            DropTable("public.CoverageEligibilityRequestIxDT");
            DropTable("public.CoverageEligibilityRequestRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ContractIxUri");
            DropTable("public.ContractIxTok");
            DropTable("public.ContractIxStr");
            DropTable("public.ContractIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ContractIxQty");
            DropTable("public.ContractIxDT");
            DropTable("public.ContractRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ConsentIxUri");
            DropTable("public.ConsentIxTok");
            DropTable("public.ConsentIxStr");
            DropTable("public.ConsentIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ConsentIxQty");
            DropTable("public.ConsentIxDT");
            DropTable("public.ConsentRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ConditionIxUri");
            DropTable("public.ConditionIxTok");
            DropTable("public.ConditionIxStr");
            DropTable("public.ConditionIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ConditionIxQty");
            DropTable("public.ConditionIxDT");
            DropTable("public.ConditionRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ConceptMapIxUri");
            DropTable("public.ConceptMapIxTok");
            DropTable("public.ConceptMapIxStr");
            DropTable("public.ConceptMapIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ConceptMapIxQty");
            DropTable("public.ConceptMapIxDT");
            DropTable("public.ConceptMapRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.CompositionIxUri");
            DropTable("public.CompositionIxTok");
            DropTable("public.CompositionIxStr");
            DropTable("public.CompositionIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.CompositionIxQty");
            DropTable("public.CompositionIxDT");
            DropTable("public.CompositionRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.CompartmentDefinitionIxUri");
            DropTable("public.CompartmentDefinitionIxTok");
            DropTable("public.CompartmentDefinitionIxStr");
            DropTable("public.CompartmentDefinitionIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.CompartmentDefinitionIxQty");
            DropTable("public.CompartmentDefinitionIxDT");
            DropTable("public.CompartmentDefinitionRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.CommunicationRequestIxUri");
            DropTable("public.CommunicationRequestIxTok");
            DropTable("public.CommunicationRequestIxStr");
            DropTable("public.CommunicationRequestIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.CommunicationRequestIxQty");
            DropTable("public.CommunicationRequestIxDT");
            DropTable("public.CommunicationRequestRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.CommunicationIxUri");
            DropTable("public.CommunicationIxTok");
            DropTable("public.CommunicationIxStr");
            DropTable("public.CommunicationIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.CommunicationIxQty");
            DropTable("public.CommunicationIxDT");
            DropTable("public.CommunicationRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.CodeSystemIxUri");
            DropTable("public.CodeSystemIxTok");
            DropTable("public.CodeSystemIxStr");
            DropTable("public.CodeSystemIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.CodeSystemIxQty");
            DropTable("public.CodeSystemIxDT");
            DropTable("public.CodeSystemRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ClinicalImpressionIxUri");
            DropTable("public.ClinicalImpressionIxTok");
            DropTable("public.ClinicalImpressionIxStr");
            DropTable("public.ClinicalImpressionIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ClinicalImpressionIxQty");
            DropTable("public.ClinicalImpressionIxDT");
            DropTable("public.ClinicalImpressionRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ClaimResponseIxUri");
            DropTable("public.ClaimResponseIxTok");
            DropTable("public.ClaimResponseIxStr");
            DropTable("public.ClaimResponseIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ClaimResponseIxQty");
            DropTable("public.ClaimResponseIxDT");
            DropTable("public.ClaimResponseRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ClaimIxUri");
            DropTable("public.ClaimIxTok");
            DropTable("public.ClaimIxStr");
            DropTable("public.ClaimIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ClaimIxQty");
            DropTable("public.ClaimIxDT");
            DropTable("public.ClaimRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ChargeItemIxUri");
            DropTable("public.ChargeItemIxTok");
            DropTable("public.ChargeItemIxStr");
            DropTable("public.ChargeItemIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ChargeItemIxQty");
            DropTable("public.ChargeItemIxDT");
            DropTable("public.ChargeItemRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ChargeItemDefinitionIxUri");
            DropTable("public.ChargeItemDefinitionIxTok");
            DropTable("public.ChargeItemDefinitionIxStr");
            DropTable("public.ChargeItemDefinitionIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ChargeItemDefinitionIxQty");
            DropTable("public.ChargeItemDefinitionIxDT");
            DropTable("public.ChargeItemDefinitionRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.CareTeamIxUri");
            DropTable("public.CareTeamIxTok");
            DropTable("public.CareTeamIxStr");
            DropTable("public.CareTeamIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.CareTeamIxQty");
            DropTable("public.CareTeamIxDT");
            DropTable("public.CareTeamRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.CarePlanIxUri");
            DropTable("public.CarePlanIxTok");
            DropTable("public.CarePlanIxStr");
            DropTable("public.CarePlanIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.CarePlanIxQty");
            DropTable("public.CarePlanIxDT");
            DropTable("public.CarePlanRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.CapabilityStatementIxUri");
            DropTable("public.CapabilityStatementIxTok");
            DropTable("public.CapabilityStatementIxStr");
            DropTable("public.CapabilityStatementIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.CapabilityStatementIxQty");
            DropTable("public.CapabilityStatementIxDT");
            DropTable("public.CapabilityStatementRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.BundleIxUri");
            DropTable("public.BundleIxTok");
            DropTable("public.BundleIxStr");
            DropTable("public.BundleIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.BundleIxQty");
            DropTable("public.BundleIxDT");
            DropTable("public.BundleRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.BodyStructureIxUri");
            DropTable("public.BodyStructureIxTok");
            DropTable("public.BodyStructureIxStr");
            DropTable("public.BodyStructureIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.BodyStructureIxQty");
            DropTable("public.BodyStructureIxDT");
            DropTable("public.BodyStructureRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.BiologicallyDerivedProductIxUri");
            DropTable("public.BiologicallyDerivedProductIxTok");
            DropTable("public.BiologicallyDerivedProductIxStr");
            DropTable("public.BiologicallyDerivedProductIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.BiologicallyDerivedProductIxQty");
            DropTable("public.BiologicallyDerivedProductIxDT");
            DropTable("public.BiologicallyDerivedProductRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.BinaryIxUri");
            DropTable("public.BinaryIxTok");
            DropTable("public.BinaryIxStr");
            DropTable("public.BinaryIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.BinaryIxQty");
            DropTable("public.BinaryIxDT");
            DropTable("public.BinaryRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.BasicIxUri");
            DropTable("public.BasicIxTok");
            DropTable("public.BasicIxStr");
            DropTable("public.BasicIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.BasicIxQty");
            DropTable("public.BasicIxDT");
            DropTable("public.BasicRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.AuditEventIxUri");
            DropTable("public.AuditEventIxTok");
            DropTable("public.AuditEventIxStr");
            DropTable("public.AuditEventIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.AuditEventIxQty");
            DropTable("public.AuditEventIxDT");
            DropTable("public.AuditEventRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.AppointmentResponseIxUri");
            DropTable("public.AppointmentResponseIxTok");
            DropTable("public.AppointmentResponseIxStr");
            DropTable("public.AppointmentResponseIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.AppointmentResponseIxQty");
            DropTable("public.AppointmentResponseIxDT");
            DropTable("public.AppointmentResponseRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.AppointmentIxUri");
            DropTable("public.AppointmentIxTok");
            DropTable("public.AppointmentIxStr");
            DropTable("public.AppointmentIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.AppointmentIxQty");
            DropTable("public.AppointmentIxDT");
            DropTable("public.AppointmentRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.AllergyIntoleranceIxUri");
            DropTable("public.AllergyIntoleranceIxTok");
            DropTable("public.AllergyIntoleranceIxStr");
            DropTable("public.AllergyIntoleranceIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.AllergyIntoleranceIxQty");
            DropTable("public.AllergyIntoleranceIxDT");
            DropTable("public.AllergyIntoleranceRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.AdverseEventIxUri");
            DropTable("public.AdverseEventIxTok");
            DropTable("public.AdverseEventIxStr");
            DropTable("public.AdverseEventIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.AdverseEventIxQty");
            DropTable("public.AdverseEventIxDT");
            DropTable("public.AdverseEventRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ActivityDefinitionIxUri");
            DropTable("public.ActivityDefinitionIxTok");
            DropTable("public.ActivityDefinitionIxStr");
            DropTable("public._BaseUrl");
            DropTable("public.ActivityDefinitionIxRef",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ActivityDefinitionIxQty");
            DropTable("public._SParamResource");
            DropTable("public._SCompositePivot");
            DropTable("public._SearchParam");
            DropTable("public.ActivityDefinitionIxDT");
            DropTable("public.ActivityDefinitionRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public._FhirRelease");
            DropTable("public.AccountRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
        }
    }
}
