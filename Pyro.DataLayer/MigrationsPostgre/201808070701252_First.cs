namespace Pyro.DataLayer.MigrationsPostgre
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity.Infrastructure.Annotations;
    using System.Data.Entity.Migrations;
    
    public partial class First : DbMigration
    {
        public override void Up()
        {
            CreateTable(
                "public.AccountRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public._FhirRelease",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        FhirVersion = c.String(),
                        Date = c.DateTime(nullable: false),
                        Description = c.String(),
                        CreatedDate = c.DateTimeOffset(nullable: false, precision: 7),
                        CreatedUser = c.String(),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 7),
                        LastUpdatedUser = c.String(),
                    })
                .PrimaryKey(t => t.Id);
            
            CreateTable(
                "public.ActivityDefinitionRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.ActivityDefinitionResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ActivityDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public._SearchParam",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Resource = c.String(nullable: false, maxLength: 256),
                        Name = c.String(nullable: false, maxLength: 128),
                        Url = c.String(maxLength: 450),
                        Description = c.String(),
                        Type = c.Int(nullable: false),
                        XPath = c.String(),
                        Expression = c.String(nullable: false),
                        IsIndexed = c.Boolean(nullable: false),
                        Status = c.Int(nullable: false),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 7),
                        SearchParameterResourceId = c.String(maxLength: 128),
                        SearchParameterResourceVersion = c.String(maxLength: 128),
                    })
                .PrimaryKey(t => t.Id)
                .Index(t => new { t.Resource, t.Name }, unique: true, name: "uq_ResourceAndName")
                .Index(t => t.IsIndexed, name: "ix_IsIndexed")
                .Index(t => t.Status, name: "ix_Status");
            
            CreateTable(
                "public._SParamResource",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceType = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId");
            
            CreateTable(
                "public.ActivityDefinitionResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ActivityDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ActivityDefinitionResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ActivityDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public._BaseUrl",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Url = c.String(nullable: false, maxLength: 450),
                        IsServersPrimaryUrlRoot = c.Boolean(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .Index(t => t.Url, unique: true, name: "ix_Url");
            
            CreateTable(
                "public.ActivityDefinitionResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ActivityDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ActivityDefinitionResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ActivityDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ActivityDefinitionResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ActivityDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.AdverseEventRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.AdverseEventResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.AdverseEventRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.AdverseEventResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.AdverseEventRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.AdverseEventResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.AdverseEventRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.AdverseEventResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.AdverseEventRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.AdverseEventResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.AdverseEventRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.AdverseEventResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.AdverseEventRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.AllergyIntoleranceRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.AllergyIntoleranceResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.AllergyIntoleranceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.AllergyIntoleranceResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.AllergyIntoleranceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.AllergyIntoleranceResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.AllergyIntoleranceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.AllergyIntoleranceResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.AllergyIntoleranceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.AllergyIntoleranceResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.AllergyIntoleranceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.AllergyIntoleranceResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.AllergyIntoleranceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.AppointmentRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.AppointmentResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.AppointmentRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.AppointmentResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.AppointmentRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.AppointmentResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.AppointmentRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.AppointmentResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.AppointmentRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.AppointmentResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.AppointmentRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.AppointmentResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.AppointmentRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.AppointmentResponseRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.AppointmentResponseResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.AppointmentResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.AppointmentResponseResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.AppointmentResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.AppointmentResponseResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.AppointmentResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.AppointmentResponseResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.AppointmentResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.AppointmentResponseResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.AppointmentResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.AppointmentResponseResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.AppointmentResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.AuditEventRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.AuditEventResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.AuditEventRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.AuditEventResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.AuditEventRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.AuditEventResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.AuditEventRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.AuditEventResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.AuditEventRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.AuditEventResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.AuditEventRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.AuditEventResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.AuditEventRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.BasicRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.BasicResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.BasicRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.BasicResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.BasicRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.BasicResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.BasicRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.BasicResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.BasicRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.BasicResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.BasicRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.BasicResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.BasicRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.BinaryRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.BinaryResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.BinaryRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.BinaryResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.BinaryRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.BinaryResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.BinaryRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.BinaryResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.BinaryRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.BinaryResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.BinaryRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.BinaryResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.BinaryRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.BodySiteRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.BodySiteResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.BodySiteRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.BodySiteResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.BodySiteRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.BodySiteResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.BodySiteRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.BodySiteResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.BodySiteRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.BodySiteResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.BodySiteRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.BodySiteResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.BodySiteRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.BundleRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.BundleResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.BundleRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.BundleResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.BundleRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.BundleResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.BundleRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.BundleResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.BundleRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.BundleResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.BundleRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.BundleResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.BundleRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CapabilityStatementRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.CapabilityStatementResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CapabilityStatementRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CapabilityStatementResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CapabilityStatementRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CapabilityStatementResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CapabilityStatementRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CapabilityStatementResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CapabilityStatementRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CapabilityStatementResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CapabilityStatementRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CapabilityStatementResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CapabilityStatementRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CarePlanRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.CarePlanResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CarePlanRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CarePlanResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CarePlanRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CarePlanResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CarePlanRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CarePlanResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CarePlanRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CarePlanResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CarePlanRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CarePlanResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CarePlanRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CareTeamRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.CareTeamResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CareTeamRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CareTeamResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CareTeamRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CareTeamResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CareTeamRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CareTeamResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CareTeamRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CareTeamResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CareTeamRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CareTeamResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CareTeamRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ChargeItemRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.ChargeItemResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ChargeItemRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ChargeItemResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ChargeItemRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ChargeItemResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ChargeItemRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ChargeItemResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ChargeItemRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ChargeItemResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ChargeItemRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ChargeItemResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ChargeItemRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ClaimRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.ClaimResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ClaimRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ClaimResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ClaimRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ClaimResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ClaimRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ClaimResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ClaimRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ClaimResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ClaimRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ClaimResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ClaimRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ClaimResponseRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.ClaimResponseResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ClaimResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ClaimResponseResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ClaimResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ClaimResponseResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ClaimResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ClaimResponseResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ClaimResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ClaimResponseResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ClaimResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ClaimResponseResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ClaimResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ClinicalImpressionRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.ClinicalImpressionResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ClinicalImpressionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ClinicalImpressionResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ClinicalImpressionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ClinicalImpressionResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ClinicalImpressionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ClinicalImpressionResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ClinicalImpressionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ClinicalImpressionResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ClinicalImpressionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ClinicalImpressionResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ClinicalImpressionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CodeSystemRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.CodeSystemResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CodeSystemRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CodeSystemResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CodeSystemRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CodeSystemResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CodeSystemRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CodeSystemResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CodeSystemRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CodeSystemResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CodeSystemRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CodeSystemResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CodeSystemRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CommunicationRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.CommunicationResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CommunicationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CommunicationResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CommunicationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CommunicationResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CommunicationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CommunicationResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CommunicationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CommunicationResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CommunicationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CommunicationResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CommunicationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CommunicationRequestRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.CommunicationRequestResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CommunicationRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CommunicationRequestResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CommunicationRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CommunicationRequestResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CommunicationRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CommunicationRequestResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CommunicationRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CommunicationRequestResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CommunicationRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CommunicationRequestResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CommunicationRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CompartmentDefinitionRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.CompartmentDefinitionResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CompartmentDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CompartmentDefinitionResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CompartmentDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CompartmentDefinitionResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CompartmentDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CompartmentDefinitionResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CompartmentDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CompartmentDefinitionResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CompartmentDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CompartmentDefinitionResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CompartmentDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CompositionRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.CompositionResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CompositionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CompositionResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CompositionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CompositionResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CompositionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CompositionResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CompositionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CompositionResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CompositionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CompositionResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CompositionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ConceptMapRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.ConceptMapResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ConceptMapRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ConceptMapResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ConceptMapRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ConceptMapResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ConceptMapRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ConceptMapResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ConceptMapRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ConceptMapResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ConceptMapRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ConceptMapResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ConceptMapRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ConditionRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.ConditionResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ConditionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ConditionResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ConditionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ConditionResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ConditionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ConditionResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ConditionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ConditionResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ConditionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ConditionResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ConditionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ConsentRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.ConsentResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ConsentRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ConsentResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ConsentRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ConsentResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ConsentRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ConsentResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ConsentRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ConsentResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ConsentRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ConsentResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ConsentRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ContractRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.ContractResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ContractRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ContractResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ContractRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ContractResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ContractRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ContractResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ContractRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ContractResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ContractRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ContractResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ContractRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CoverageRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.CoverageResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CoverageRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CoverageResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CoverageRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CoverageResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CoverageRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CoverageResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CoverageRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CoverageResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CoverageRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.CoverageResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.CoverageRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DataElementRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.DataElementResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DataElementRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DataElementResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DataElementRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DataElementResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DataElementRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DataElementResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DataElementRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DataElementResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DataElementRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DataElementResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DataElementRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DetectedIssueRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.DetectedIssueResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DetectedIssueRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DetectedIssueResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DetectedIssueRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DetectedIssueResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DetectedIssueRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DetectedIssueResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DetectedIssueRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DetectedIssueResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DetectedIssueRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DetectedIssueResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DetectedIssueRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DeviceComponentRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.DeviceComponentResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DeviceComponentRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DeviceComponentResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DeviceComponentRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DeviceComponentResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DeviceComponentRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DeviceComponentResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DeviceComponentRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DeviceComponentResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DeviceComponentRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DeviceComponentResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DeviceComponentRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DeviceRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.DeviceResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DeviceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DeviceResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DeviceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DeviceResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DeviceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DeviceResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DeviceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DeviceResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DeviceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DeviceResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DeviceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DeviceMetricRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.DeviceMetricResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DeviceMetricRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DeviceMetricResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DeviceMetricRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DeviceMetricResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DeviceMetricRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DeviceMetricResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DeviceMetricRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DeviceMetricResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DeviceMetricRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DeviceMetricResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DeviceMetricRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DeviceRequestRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.DeviceRequestResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DeviceRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DeviceRequestResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DeviceRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DeviceRequestResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DeviceRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DeviceRequestResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DeviceRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DeviceRequestResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DeviceRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DeviceRequestResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DeviceRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DeviceUseStatementRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.DeviceUseStatementResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DeviceUseStatementRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DeviceUseStatementResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DeviceUseStatementRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DeviceUseStatementResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DeviceUseStatementRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DeviceUseStatementResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DeviceUseStatementRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DeviceUseStatementResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DeviceUseStatementRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DeviceUseStatementResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DeviceUseStatementRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DiagnosticReportRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.DiagnosticReportResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DiagnosticReportRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DiagnosticReportResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DiagnosticReportRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DiagnosticReportResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DiagnosticReportRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DiagnosticReportResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DiagnosticReportRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DiagnosticReportResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DiagnosticReportRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DiagnosticReportResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DiagnosticReportRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DocumentManifestRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.DocumentManifestResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DocumentManifestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DocumentManifestResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DocumentManifestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DocumentManifestResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DocumentManifestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DocumentManifestResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DocumentManifestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DocumentManifestResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DocumentManifestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DocumentManifestResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DocumentManifestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DocumentReferenceRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.DocumentReferenceResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DocumentReferenceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DocumentReferenceResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DocumentReferenceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DocumentReferenceResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DocumentReferenceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DocumentReferenceResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DocumentReferenceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DocumentReferenceResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DocumentReferenceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.DocumentReferenceResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.DocumentReferenceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EligibilityRequestRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.EligibilityRequestResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EligibilityRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EligibilityRequestResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EligibilityRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EligibilityRequestResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EligibilityRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EligibilityRequestResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EligibilityRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EligibilityRequestResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EligibilityRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EligibilityRequestResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EligibilityRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EligibilityResponseRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.EligibilityResponseResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EligibilityResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EligibilityResponseResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EligibilityResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EligibilityResponseResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EligibilityResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EligibilityResponseResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EligibilityResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EligibilityResponseResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EligibilityResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EligibilityResponseResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EligibilityResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EncounterRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.EncounterResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EncounterRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EncounterResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EncounterRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EncounterResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EncounterRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EncounterResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EncounterRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EncounterResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EncounterRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EncounterResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EncounterRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EndpointRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.EndpointResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EndpointRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EndpointResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EndpointRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EndpointResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EndpointRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EndpointResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EndpointRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EndpointResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EndpointRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EndpointResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EndpointRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EnrollmentRequestRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.EnrollmentRequestResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EnrollmentRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EnrollmentRequestResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EnrollmentRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EnrollmentRequestResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EnrollmentRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EnrollmentRequestResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EnrollmentRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EnrollmentRequestResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EnrollmentRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EnrollmentRequestResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EnrollmentRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EnrollmentResponseRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.EnrollmentResponseResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EnrollmentResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EnrollmentResponseResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EnrollmentResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EnrollmentResponseResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EnrollmentResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EnrollmentResponseResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EnrollmentResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EnrollmentResponseResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EnrollmentResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EnrollmentResponseResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EnrollmentResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EpisodeOfCareRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.EpisodeOfCareResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EpisodeOfCareRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EpisodeOfCareResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EpisodeOfCareRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EpisodeOfCareResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EpisodeOfCareRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EpisodeOfCareResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EpisodeOfCareRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EpisodeOfCareResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EpisodeOfCareRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.EpisodeOfCareResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.EpisodeOfCareRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ExpansionProfileRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.ExpansionProfileResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ExpansionProfileRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ExpansionProfileResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ExpansionProfileRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ExpansionProfileResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ExpansionProfileRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ExpansionProfileResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ExpansionProfileRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ExpansionProfileResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ExpansionProfileRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ExpansionProfileResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ExpansionProfileRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ExplanationOfBenefitRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.ExplanationOfBenefitResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ExplanationOfBenefitRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ExplanationOfBenefitResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ExplanationOfBenefitRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ExplanationOfBenefitResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ExplanationOfBenefitRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ExplanationOfBenefitResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ExplanationOfBenefitRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ExplanationOfBenefitResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ExplanationOfBenefitRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ExplanationOfBenefitResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ExplanationOfBenefitRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.FamilyMemberHistoryRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.FamilyMemberHistoryResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.FamilyMemberHistoryRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.FamilyMemberHistoryResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.FamilyMemberHistoryRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.FamilyMemberHistoryResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.FamilyMemberHistoryRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.FamilyMemberHistoryResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.FamilyMemberHistoryRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.FamilyMemberHistoryResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.FamilyMemberHistoryRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.FamilyMemberHistoryResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.FamilyMemberHistoryRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.FlagRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.FlagResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.FlagRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.FlagResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.FlagRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.FlagResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.FlagRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.FlagResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.FlagRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.FlagResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.FlagRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.FlagResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.FlagRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.GoalRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.GoalResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.GoalRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.GoalResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.GoalRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.GoalResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.GoalRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.GoalResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.GoalRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.GoalResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.GoalRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.GoalResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.GoalRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.GraphDefinitionRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.GraphDefinitionResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.GraphDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.GraphDefinitionResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.GraphDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.GraphDefinitionResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.GraphDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.GraphDefinitionResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.GraphDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.GraphDefinitionResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.GraphDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.GraphDefinitionResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.GraphDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.GroupRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.GroupResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.GroupRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.GroupResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.GroupRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.GroupResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.GroupRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.GroupResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.GroupRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.GroupResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.GroupRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.GroupResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.GroupRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.GuidanceResponseRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.GuidanceResponseResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.GuidanceResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.GuidanceResponseResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.GuidanceResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.GuidanceResponseResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.GuidanceResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.GuidanceResponseResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.GuidanceResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.GuidanceResponseResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.GuidanceResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.GuidanceResponseResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.GuidanceResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.HealthcareServiceRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.HealthcareServiceResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.HealthcareServiceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.HealthcareServiceResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.HealthcareServiceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.HealthcareServiceResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.HealthcareServiceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.HealthcareServiceResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.HealthcareServiceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.HealthcareServiceResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.HealthcareServiceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.HealthcareServiceResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.HealthcareServiceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ImagingManifestRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.ImagingManifestResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ImagingManifestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ImagingManifestResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ImagingManifestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ImagingManifestResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ImagingManifestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ImagingManifestResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ImagingManifestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ImagingManifestResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ImagingManifestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ImagingManifestResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ImagingManifestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ImagingStudyRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.ImagingStudyResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ImagingStudyRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ImagingStudyResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ImagingStudyRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ImagingStudyResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ImagingStudyRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ImagingStudyResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ImagingStudyRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ImagingStudyResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ImagingStudyRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ImagingStudyResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ImagingStudyRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ImmunizationRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.ImmunizationResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ImmunizationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ImmunizationResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ImmunizationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ImmunizationResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ImmunizationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ImmunizationResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ImmunizationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ImmunizationResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ImmunizationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ImmunizationResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ImmunizationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ImmunizationRecommendationRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.ImmunizationRecommendationResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ImmunizationRecommendationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ImmunizationRecommendationResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ImmunizationRecommendationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ImmunizationRecommendationResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ImmunizationRecommendationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ImmunizationRecommendationResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ImmunizationRecommendationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ImmunizationRecommendationResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ImmunizationRecommendationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ImmunizationRecommendationResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ImmunizationRecommendationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ImplementationGuideRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.ImplementationGuideResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ImplementationGuideRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ImplementationGuideResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ImplementationGuideRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ImplementationGuideResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ImplementationGuideRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ImplementationGuideResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ImplementationGuideRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ImplementationGuideResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ImplementationGuideRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ImplementationGuideResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ImplementationGuideRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.LibraryRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.LibraryResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.LibraryRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.LibraryResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.LibraryRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.LibraryResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.LibraryRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.LibraryResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.LibraryRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.LibraryResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.LibraryRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.LibraryResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.LibraryRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.LinkageRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.LinkageResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.LinkageRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.LinkageResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.LinkageRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.LinkageResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.LinkageRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.LinkageResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.LinkageRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.LinkageResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.LinkageRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.LinkageResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.LinkageRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ListRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.ListResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ListRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ListResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ListRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ListResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ListRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ListResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ListRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ListResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ListRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ListResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ListRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.LocationRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.LocationResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.LocationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.LocationResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.LocationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.LocationResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.LocationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.LocationResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.LocationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.LocationResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.LocationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.LocationResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.LocationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MeasureRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.MeasureResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MeasureRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MeasureResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MeasureRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MeasureResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MeasureRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MeasureResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MeasureRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MeasureResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MeasureRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MeasureResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MeasureRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MeasureReportRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.MeasureReportResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MeasureReportRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MeasureReportResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MeasureReportRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MeasureReportResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MeasureReportRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MeasureReportResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MeasureReportRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MeasureReportResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MeasureReportRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MeasureReportResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MeasureReportRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MediaRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.MediaResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MediaRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MediaResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MediaRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MediaResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MediaRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MediaResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MediaRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MediaResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MediaRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MediaResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MediaRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicationAdministrationRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.MedicationAdministrationResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicationAdministrationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicationAdministrationResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicationAdministrationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicationAdministrationResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicationAdministrationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicationAdministrationResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicationAdministrationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicationAdministrationResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicationAdministrationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicationAdministrationResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicationAdministrationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicationDispenseRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.MedicationDispenseResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicationDispenseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicationDispenseResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicationDispenseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicationDispenseResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicationDispenseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicationDispenseResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicationDispenseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicationDispenseResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicationDispenseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicationDispenseResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicationDispenseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicationRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.MedicationResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicationResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicationResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicationResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicationResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicationResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicationRequestRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.MedicationRequestResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicationRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicationRequestResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicationRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicationRequestResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicationRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicationRequestResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicationRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicationRequestResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicationRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicationRequestResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicationRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicationStatementRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.MedicationStatementResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicationStatementRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicationStatementResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicationStatementRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicationStatementResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicationStatementRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicationStatementResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicationStatementRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicationStatementResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicationStatementRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MedicationStatementResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MedicationStatementRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MessageDefinitionRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.MessageDefinitionResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MessageDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MessageDefinitionResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MessageDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MessageDefinitionResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MessageDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MessageDefinitionResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MessageDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MessageDefinitionResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MessageDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MessageDefinitionResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MessageDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MessageHeaderRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.MessageHeaderResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MessageHeaderRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MessageHeaderResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MessageHeaderRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MessageHeaderResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MessageHeaderRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MessageHeaderResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MessageHeaderRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MessageHeaderResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MessageHeaderRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.MessageHeaderResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.MessageHeaderRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.NamingSystemRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.NamingSystemResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.NamingSystemRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.NamingSystemResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.NamingSystemRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.NamingSystemResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.NamingSystemRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.NamingSystemResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.NamingSystemRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.NamingSystemResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.NamingSystemRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.NamingSystemResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.NamingSystemRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.NutritionOrderRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.NutritionOrderResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.NutritionOrderRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.NutritionOrderResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.NutritionOrderRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.NutritionOrderResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.NutritionOrderRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.NutritionOrderResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.NutritionOrderRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.NutritionOrderResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.NutritionOrderRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.NutritionOrderResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.NutritionOrderRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ObservationRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.ObservationResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ObservationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ObservationResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ObservationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ObservationResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ObservationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ObservationResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ObservationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ObservationResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ObservationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ObservationResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ObservationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.OperationDefinitionRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.OperationDefinitionResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.OperationDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.OperationDefinitionResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.OperationDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.OperationDefinitionResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.OperationDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.OperationDefinitionResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.OperationDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.OperationDefinitionResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.OperationDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.OperationDefinitionResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.OperationDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.OperationOutcomeRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.OperationOutcomeResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.OperationOutcomeRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.OperationOutcomeResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.OperationOutcomeRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.OperationOutcomeResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.OperationOutcomeRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.OperationOutcomeResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.OperationOutcomeRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.OperationOutcomeResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.OperationOutcomeRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.OperationOutcomeResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.OperationOutcomeRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.OrganizationRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.OrganizationResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.OrganizationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.OrganizationResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.OrganizationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.OrganizationResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.OrganizationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.OrganizationResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.OrganizationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.OrganizationResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.OrganizationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.OrganizationResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.OrganizationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ParametersRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.ParametersResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ParametersRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ParametersResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ParametersRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ParametersResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ParametersRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ParametersResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ParametersRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ParametersResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ParametersRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ParametersResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ParametersRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PatientRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.PatientResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PatientRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PatientResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PatientRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PatientResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PatientRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PatientResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PatientRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PatientResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PatientRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PatientResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PatientRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PaymentNoticeRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.PaymentNoticeResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PaymentNoticeRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PaymentNoticeResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PaymentNoticeRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PaymentNoticeResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PaymentNoticeRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PaymentNoticeResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PaymentNoticeRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PaymentNoticeResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PaymentNoticeRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PaymentNoticeResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PaymentNoticeRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PaymentReconciliationRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.PaymentReconciliationResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PaymentReconciliationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PaymentReconciliationResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PaymentReconciliationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PaymentReconciliationResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PaymentReconciliationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PaymentReconciliationResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PaymentReconciliationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PaymentReconciliationResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PaymentReconciliationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PaymentReconciliationResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PaymentReconciliationRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PersonRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.PersonResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PersonRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PersonResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PersonRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PersonResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PersonRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PersonResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PersonRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PersonResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PersonRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PersonResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PersonRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PlanDefinitionRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.PlanDefinitionResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PlanDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PlanDefinitionResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PlanDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PlanDefinitionResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PlanDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PlanDefinitionResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PlanDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PlanDefinitionResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PlanDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PlanDefinitionResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PlanDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PractitionerRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.PractitionerResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PractitionerRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PractitionerResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PractitionerRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PractitionerResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PractitionerRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PractitionerResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PractitionerRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PractitionerResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PractitionerRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PractitionerResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PractitionerRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PractitionerRoleRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.PractitionerRoleResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PractitionerRoleRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PractitionerRoleResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PractitionerRoleRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PractitionerRoleResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PractitionerRoleRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PractitionerRoleResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PractitionerRoleRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PractitionerRoleResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PractitionerRoleRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.PractitionerRoleResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.PractitionerRoleRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ProcedureRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.ProcedureResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ProcedureRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ProcedureResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ProcedureRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ProcedureResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ProcedureRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ProcedureResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ProcedureRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ProcedureResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ProcedureRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ProcedureResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ProcedureRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ProcedureRequestRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.ProcedureRequestResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ProcedureRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ProcedureRequestResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ProcedureRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ProcedureRequestResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ProcedureRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ProcedureRequestResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ProcedureRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ProcedureRequestResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ProcedureRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ProcedureRequestResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ProcedureRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ProcessRequestRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.ProcessRequestResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ProcessRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ProcessRequestResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ProcessRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ProcessRequestResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ProcessRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ProcessRequestResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ProcessRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ProcessRequestResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ProcessRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ProcessRequestResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ProcessRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ProcessResponseRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.ProcessResponseResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ProcessResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ProcessResponseResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ProcessResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ProcessResponseResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ProcessResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ProcessResponseResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ProcessResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ProcessResponseResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ProcessResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ProcessResponseResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ProcessResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ProvenanceRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.ProvenanceResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ProvenanceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ProvenanceResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ProvenanceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ProvenanceResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ProvenanceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ProvenanceResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ProvenanceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ProvenanceResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ProvenanceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ProvenanceResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ProvenanceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.QuestionnaireRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.QuestionnaireResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.QuestionnaireRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.QuestionnaireResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.QuestionnaireRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.QuestionnaireResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.QuestionnaireRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.QuestionnaireResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.QuestionnaireRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.QuestionnaireResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.QuestionnaireRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.QuestionnaireResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.QuestionnaireRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.QuestionnaireResponseRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.QuestionnaireResponseResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.QuestionnaireResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.QuestionnaireResponseResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.QuestionnaireResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.QuestionnaireResponseResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.QuestionnaireResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.QuestionnaireResponseResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.QuestionnaireResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.QuestionnaireResponseResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.QuestionnaireResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.QuestionnaireResponseResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.QuestionnaireResponseRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ReferralRequestRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.ReferralRequestResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ReferralRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ReferralRequestResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ReferralRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ReferralRequestResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ReferralRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ReferralRequestResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ReferralRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ReferralRequestResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ReferralRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ReferralRequestResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ReferralRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.RelatedPersonRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.RelatedPersonResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.RelatedPersonRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.RelatedPersonResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.RelatedPersonRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.RelatedPersonResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.RelatedPersonRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.RelatedPersonResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.RelatedPersonRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.RelatedPersonResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.RelatedPersonRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.RelatedPersonResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.RelatedPersonRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.RequestGroupRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.RequestGroupResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.RequestGroupRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.RequestGroupResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.RequestGroupRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.RequestGroupResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.RequestGroupRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.RequestGroupResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.RequestGroupRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.RequestGroupResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.RequestGroupRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.RequestGroupResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.RequestGroupRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ResearchStudyRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.ResearchStudyResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ResearchStudyRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ResearchStudyResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ResearchStudyRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ResearchStudyResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ResearchStudyRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ResearchStudyResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ResearchStudyRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ResearchStudyResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ResearchStudyRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ResearchStudyResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ResearchStudyRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ResearchSubjectRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.ResearchSubjectResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ResearchSubjectRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ResearchSubjectResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ResearchSubjectRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ResearchSubjectResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ResearchSubjectRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ResearchSubjectResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ResearchSubjectRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ResearchSubjectResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ResearchSubjectRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ResearchSubjectResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ResearchSubjectRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.RiskAssessmentRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.RiskAssessmentResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.RiskAssessmentRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.RiskAssessmentResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.RiskAssessmentRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.RiskAssessmentResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.RiskAssessmentRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.RiskAssessmentResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.RiskAssessmentRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.RiskAssessmentResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.RiskAssessmentRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.RiskAssessmentResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.RiskAssessmentRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ScheduleRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.ScheduleResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ScheduleRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ScheduleResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ScheduleRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ScheduleResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ScheduleRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ScheduleResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ScheduleRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ScheduleResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ScheduleRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ScheduleResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ScheduleRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SearchParameterRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.SearchParameterResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SearchParameterRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SearchParameterResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SearchParameterRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SearchParameterResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SearchParameterRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SearchParameterResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SearchParameterRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SearchParameterResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SearchParameterRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SearchParameterResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SearchParameterRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SequenceRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.SequenceResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SequenceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SequenceResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SequenceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SequenceResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SequenceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SequenceResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SequenceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SequenceResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SequenceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SequenceResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SequenceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ServiceDefinitionRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.ServiceDefinitionResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ServiceDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ServiceDefinitionResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ServiceDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ServiceDefinitionResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ServiceDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ServiceDefinitionResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ServiceDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ServiceDefinitionResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ServiceDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ServiceDefinitionResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ServiceDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SlotRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.SlotResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SlotRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SlotResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SlotRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SlotResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SlotRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SlotResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SlotRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SlotResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SlotRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SlotResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SlotRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SpecimenRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.SpecimenResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SpecimenRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SpecimenResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SpecimenRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SpecimenResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SpecimenRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SpecimenResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SpecimenRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SpecimenResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SpecimenRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SpecimenResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SpecimenRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.StructureDefinitionRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.StructureDefinitionResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.StructureDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.StructureDefinitionResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.StructureDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.StructureDefinitionResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.StructureDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.StructureDefinitionResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.StructureDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.StructureDefinitionResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.StructureDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.StructureDefinitionResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.StructureDefinitionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.StructureMapRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.StructureMapResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.StructureMapRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.StructureMapResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.StructureMapRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.StructureMapResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.StructureMapRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.StructureMapResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.StructureMapRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.StructureMapResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.StructureMapRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.StructureMapResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.StructureMapRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SubscriptionRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.SubscriptionResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SubscriptionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SubscriptionResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SubscriptionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SubscriptionResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SubscriptionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SubscriptionResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SubscriptionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SubscriptionResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SubscriptionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SubscriptionResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SubscriptionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SubstanceRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.SubstanceResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SubstanceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SubstanceResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SubstanceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SubstanceResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SubstanceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SubstanceResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SubstanceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SubstanceResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SubstanceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SubstanceResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SubstanceRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SupplyDeliveryRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.SupplyDeliveryResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SupplyDeliveryRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SupplyDeliveryResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SupplyDeliveryRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SupplyDeliveryResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SupplyDeliveryRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SupplyDeliveryResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SupplyDeliveryRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SupplyDeliveryResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SupplyDeliveryRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SupplyDeliveryResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SupplyDeliveryRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SupplyRequestRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.SupplyRequestResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SupplyRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SupplyRequestResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SupplyRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SupplyRequestResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SupplyRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SupplyRequestResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SupplyRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SupplyRequestResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SupplyRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.SupplyRequestResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.SupplyRequestRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.TaskRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.TaskResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.TaskRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.TaskResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.TaskRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.TaskResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.TaskRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.TaskResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.TaskRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.TaskResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.TaskRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.TaskResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.TaskRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.TestReportRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.TestReportResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.TestReportRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.TestReportResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.TestReportRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.TestReportResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.TestReportRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.TestReportResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.TestReportRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.TestReportResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.TestReportRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.TestReportResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.TestReportRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.TestScriptRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.TestScriptResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.TestScriptRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.TestScriptResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.TestScriptRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.TestScriptResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.TestScriptRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.TestScriptResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.TestScriptRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.TestScriptResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.TestScriptRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.TestScriptResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.TestScriptRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ValueSetRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.ValueSetResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ValueSetRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ValueSetResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ValueSetRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ValueSetResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ValueSetRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ValueSetResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ValueSetRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ValueSetResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ValueSetRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.ValueSetResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.ValueSetRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.VisionPrescriptionRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        IsCurrent = c.Boolean(nullable: false),
                        FhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        IsDeleted = c.Boolean(nullable: false),
                        VersionId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        XmlBlob = c.String(),
                        Resource = c.Binary(),
                        Method = c.Int(nullable: false),
                        FhirReleaseId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._FhirRelease", t => t.FhirReleaseId, cascadeDelete: true)
                .Index(t => t.IsCurrent, name: "ix_IsCurrent")
                .Index(t => new { t.FhirId, t.VersionId }, unique: true, name: "uq_FhirIdAndVersionId")
                .Index(t => t.IsDeleted, name: "ix_IsDeleted")
                .Index(t => t.LastUpdated, name: "ix_LastUpdated")
                .Index(t => t.FhirReleaseId);
            
            CreateTable(
                "public.VisionPrescriptionResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.VisionPrescriptionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.VisionPrescriptionResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.VisionPrescriptionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.VisionPrescriptionResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.VisionPrescriptionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.VisionPrescriptionResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.VisionPrescriptionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.VisionPrescriptionResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.VisionPrescriptionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.VisionPrescriptionResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.VisionPrescriptionRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.AccountResIndexDateTime",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        LowUtcDateTime = c.DateTime(),
                        HighUtcDateTime = c.DateTime(),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.AccountRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.LowUtcDateTime, name: "ix_LowUtcDateTime")
                .Index(t => t.HighUtcDateTime, name: "ix_HighUtcDateTime")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.AccountResIndexQuantity",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Comparator = c.Int(),
                        Quantity = c.Decimal(precision: 28, scale: 14),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        Unit = c.String(maxLength: 450),
                        ComparatorHigh = c.Int(),
                        QuantityHigh = c.Decimal(precision: 28, scale: 14),
                        CodeHigh = c.String(maxLength: 128),
                        SystemHigh = c.String(maxLength: 450),
                        UnitHigh = c.String(maxLength: 64),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.AccountRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.AccountResIndexReference",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        ReferenceFhirId = c.String(nullable: false, maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ReferenceResourceType = c.String(nullable: false, maxLength: 50),
                        ReferenceServiceBaseUrlId = c.Int(),
                        ReferenceVersionId = c.String(maxLength: 128,
                            annotations: new Dictionary<string, AnnotationValues>
                            {
                                { 
                                    "CaseSensitive",
                                    new AnnotationValues(oldValue: null, newValue: "True")
                                },
                            }),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._BaseUrl", t => t.ReferenceServiceBaseUrlId)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.AccountRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.ReferenceFhirId, name: "ix_RefFhirId")
                .Index(t => t.ReferenceServiceBaseUrlId, name: "ix_RefBaseUrlId")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.AccountResIndexString",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        String = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.AccountRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.String, name: "ix_String")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.AccountResIndexToken",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(maxLength: 128),
                        System = c.String(maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.AccountRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Code, name: "ix_Code")
                .Index(t => t.System, name: "ix_System")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public.AccountResIndexUri",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Uri = c.String(nullable: false, maxLength: 450),
                        ServiceSearchParameterId = c.Int(nullable: false),
                        ResourceId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._SearchParam", t => t.ServiceSearchParameterId, cascadeDelete: true)
                .ForeignKey("public.AccountRes", t => t.ResourceId, cascadeDelete: true)
                .Index(t => t.Uri, name: "ix_Uri")
                .Index(t => t.ServiceSearchParameterId, name: "ix_SearchParamId")
                .Index(t => t.ResourceId);
            
            CreateTable(
                "public._Compartment",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Url = c.String(nullable: false, maxLength: 450),
                        CompartmentDefinitionResourceId = c.String(nullable: false, maxLength: 128),
                        CompartmentDefinitionResourceVersion = c.String(nullable: false, maxLength: 128),
                        Name = c.String(nullable: false, maxLength: 128),
                        Title = c.String(maxLength: 256),
                        Code = c.String(nullable: false, maxLength: 50),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                    })
                .PrimaryKey(t => t.Id)
                .Index(t => t.Code, unique: true, name: "ix_CompartmentCode");
            
            CreateTable(
                "public._CompartmentRes",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Code = c.String(nullable: false, maxLength: 50),
                        Param = c.String(),
                        _ServiceCompartmentId = c.Int(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("public._Compartment", t => t._ServiceCompartmentId, cascadeDelete: true)
                .Index(t => t._ServiceCompartmentId, name: "ix_CompartmentId");
            
            CreateTable(
                "public._ServConfig",
                c => new
                    {
                        Id = c.Int(nullable: false, identity: true),
                        Parameter = c.String(nullable: false, maxLength: 450),
                        Value = c.String(nullable: false, maxLength: 450),
                        CreatedDate = c.DateTimeOffset(nullable: false, precision: 3),
                        CreatedUser = c.String(nullable: false),
                        LastUpdated = c.DateTimeOffset(nullable: false, precision: 3),
                        LastUpdatedUser = c.String(nullable: false),
                    })
                .PrimaryKey(t => t.Id);
            
        }
        
        public override void Down()
        {
            DropForeignKey("public._CompartmentRes", "_ServiceCompartmentId", "public._Compartment");
            DropForeignKey("public.AccountResIndexUri", "ResourceId", "public.AccountRes");
            DropForeignKey("public.AccountResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.AccountResIndexToken", "ResourceId", "public.AccountRes");
            DropForeignKey("public.AccountResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.AccountResIndexString", "ResourceId", "public.AccountRes");
            DropForeignKey("public.AccountResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.AccountResIndexReference", "ResourceId", "public.AccountRes");
            DropForeignKey("public.AccountResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.AccountResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.AccountResIndexQuantity", "ResourceId", "public.AccountRes");
            DropForeignKey("public.AccountResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.AccountResIndexDateTime", "ResourceId", "public.AccountRes");
            DropForeignKey("public.AccountResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.VisionPrescriptionResIndexUri", "ResourceId", "public.VisionPrescriptionRes");
            DropForeignKey("public.VisionPrescriptionResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.VisionPrescriptionResIndexToken", "ResourceId", "public.VisionPrescriptionRes");
            DropForeignKey("public.VisionPrescriptionResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.VisionPrescriptionResIndexString", "ResourceId", "public.VisionPrescriptionRes");
            DropForeignKey("public.VisionPrescriptionResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.VisionPrescriptionResIndexReference", "ResourceId", "public.VisionPrescriptionRes");
            DropForeignKey("public.VisionPrescriptionResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.VisionPrescriptionResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.VisionPrescriptionResIndexQuantity", "ResourceId", "public.VisionPrescriptionRes");
            DropForeignKey("public.VisionPrescriptionResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.VisionPrescriptionResIndexDateTime", "ResourceId", "public.VisionPrescriptionRes");
            DropForeignKey("public.VisionPrescriptionResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.VisionPrescriptionRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.ValueSetResIndexUri", "ResourceId", "public.ValueSetRes");
            DropForeignKey("public.ValueSetResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ValueSetResIndexToken", "ResourceId", "public.ValueSetRes");
            DropForeignKey("public.ValueSetResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ValueSetResIndexString", "ResourceId", "public.ValueSetRes");
            DropForeignKey("public.ValueSetResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ValueSetResIndexReference", "ResourceId", "public.ValueSetRes");
            DropForeignKey("public.ValueSetResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ValueSetResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.ValueSetResIndexQuantity", "ResourceId", "public.ValueSetRes");
            DropForeignKey("public.ValueSetResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ValueSetResIndexDateTime", "ResourceId", "public.ValueSetRes");
            DropForeignKey("public.ValueSetResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ValueSetRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.TestScriptResIndexUri", "ResourceId", "public.TestScriptRes");
            DropForeignKey("public.TestScriptResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.TestScriptResIndexToken", "ResourceId", "public.TestScriptRes");
            DropForeignKey("public.TestScriptResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.TestScriptResIndexString", "ResourceId", "public.TestScriptRes");
            DropForeignKey("public.TestScriptResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.TestScriptResIndexReference", "ResourceId", "public.TestScriptRes");
            DropForeignKey("public.TestScriptResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.TestScriptResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.TestScriptResIndexQuantity", "ResourceId", "public.TestScriptRes");
            DropForeignKey("public.TestScriptResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.TestScriptResIndexDateTime", "ResourceId", "public.TestScriptRes");
            DropForeignKey("public.TestScriptResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.TestScriptRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.TestReportResIndexUri", "ResourceId", "public.TestReportRes");
            DropForeignKey("public.TestReportResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.TestReportResIndexToken", "ResourceId", "public.TestReportRes");
            DropForeignKey("public.TestReportResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.TestReportResIndexString", "ResourceId", "public.TestReportRes");
            DropForeignKey("public.TestReportResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.TestReportResIndexReference", "ResourceId", "public.TestReportRes");
            DropForeignKey("public.TestReportResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.TestReportResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.TestReportResIndexQuantity", "ResourceId", "public.TestReportRes");
            DropForeignKey("public.TestReportResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.TestReportResIndexDateTime", "ResourceId", "public.TestReportRes");
            DropForeignKey("public.TestReportResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.TestReportRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.TaskResIndexUri", "ResourceId", "public.TaskRes");
            DropForeignKey("public.TaskResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.TaskResIndexToken", "ResourceId", "public.TaskRes");
            DropForeignKey("public.TaskResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.TaskResIndexString", "ResourceId", "public.TaskRes");
            DropForeignKey("public.TaskResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.TaskResIndexReference", "ResourceId", "public.TaskRes");
            DropForeignKey("public.TaskResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.TaskResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.TaskResIndexQuantity", "ResourceId", "public.TaskRes");
            DropForeignKey("public.TaskResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.TaskResIndexDateTime", "ResourceId", "public.TaskRes");
            DropForeignKey("public.TaskResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.TaskRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.SupplyRequestResIndexUri", "ResourceId", "public.SupplyRequestRes");
            DropForeignKey("public.SupplyRequestResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SupplyRequestResIndexToken", "ResourceId", "public.SupplyRequestRes");
            DropForeignKey("public.SupplyRequestResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SupplyRequestResIndexString", "ResourceId", "public.SupplyRequestRes");
            DropForeignKey("public.SupplyRequestResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SupplyRequestResIndexReference", "ResourceId", "public.SupplyRequestRes");
            DropForeignKey("public.SupplyRequestResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SupplyRequestResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.SupplyRequestResIndexQuantity", "ResourceId", "public.SupplyRequestRes");
            DropForeignKey("public.SupplyRequestResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SupplyRequestResIndexDateTime", "ResourceId", "public.SupplyRequestRes");
            DropForeignKey("public.SupplyRequestResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SupplyRequestRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.SupplyDeliveryResIndexUri", "ResourceId", "public.SupplyDeliveryRes");
            DropForeignKey("public.SupplyDeliveryResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SupplyDeliveryResIndexToken", "ResourceId", "public.SupplyDeliveryRes");
            DropForeignKey("public.SupplyDeliveryResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SupplyDeliveryResIndexString", "ResourceId", "public.SupplyDeliveryRes");
            DropForeignKey("public.SupplyDeliveryResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SupplyDeliveryResIndexReference", "ResourceId", "public.SupplyDeliveryRes");
            DropForeignKey("public.SupplyDeliveryResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SupplyDeliveryResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.SupplyDeliveryResIndexQuantity", "ResourceId", "public.SupplyDeliveryRes");
            DropForeignKey("public.SupplyDeliveryResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SupplyDeliveryResIndexDateTime", "ResourceId", "public.SupplyDeliveryRes");
            DropForeignKey("public.SupplyDeliveryResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SupplyDeliveryRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.SubstanceResIndexUri", "ResourceId", "public.SubstanceRes");
            DropForeignKey("public.SubstanceResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SubstanceResIndexToken", "ResourceId", "public.SubstanceRes");
            DropForeignKey("public.SubstanceResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SubstanceResIndexString", "ResourceId", "public.SubstanceRes");
            DropForeignKey("public.SubstanceResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SubstanceResIndexReference", "ResourceId", "public.SubstanceRes");
            DropForeignKey("public.SubstanceResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SubstanceResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.SubstanceResIndexQuantity", "ResourceId", "public.SubstanceRes");
            DropForeignKey("public.SubstanceResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SubstanceResIndexDateTime", "ResourceId", "public.SubstanceRes");
            DropForeignKey("public.SubstanceResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SubstanceRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.SubscriptionResIndexUri", "ResourceId", "public.SubscriptionRes");
            DropForeignKey("public.SubscriptionResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SubscriptionResIndexToken", "ResourceId", "public.SubscriptionRes");
            DropForeignKey("public.SubscriptionResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SubscriptionResIndexString", "ResourceId", "public.SubscriptionRes");
            DropForeignKey("public.SubscriptionResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SubscriptionResIndexReference", "ResourceId", "public.SubscriptionRes");
            DropForeignKey("public.SubscriptionResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SubscriptionResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.SubscriptionResIndexQuantity", "ResourceId", "public.SubscriptionRes");
            DropForeignKey("public.SubscriptionResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SubscriptionResIndexDateTime", "ResourceId", "public.SubscriptionRes");
            DropForeignKey("public.SubscriptionResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SubscriptionRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.StructureMapResIndexUri", "ResourceId", "public.StructureMapRes");
            DropForeignKey("public.StructureMapResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.StructureMapResIndexToken", "ResourceId", "public.StructureMapRes");
            DropForeignKey("public.StructureMapResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.StructureMapResIndexString", "ResourceId", "public.StructureMapRes");
            DropForeignKey("public.StructureMapResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.StructureMapResIndexReference", "ResourceId", "public.StructureMapRes");
            DropForeignKey("public.StructureMapResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.StructureMapResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.StructureMapResIndexQuantity", "ResourceId", "public.StructureMapRes");
            DropForeignKey("public.StructureMapResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.StructureMapResIndexDateTime", "ResourceId", "public.StructureMapRes");
            DropForeignKey("public.StructureMapResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.StructureMapRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.StructureDefinitionResIndexUri", "ResourceId", "public.StructureDefinitionRes");
            DropForeignKey("public.StructureDefinitionResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.StructureDefinitionResIndexToken", "ResourceId", "public.StructureDefinitionRes");
            DropForeignKey("public.StructureDefinitionResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.StructureDefinitionResIndexString", "ResourceId", "public.StructureDefinitionRes");
            DropForeignKey("public.StructureDefinitionResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.StructureDefinitionResIndexReference", "ResourceId", "public.StructureDefinitionRes");
            DropForeignKey("public.StructureDefinitionResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.StructureDefinitionResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.StructureDefinitionResIndexQuantity", "ResourceId", "public.StructureDefinitionRes");
            DropForeignKey("public.StructureDefinitionResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.StructureDefinitionResIndexDateTime", "ResourceId", "public.StructureDefinitionRes");
            DropForeignKey("public.StructureDefinitionResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.StructureDefinitionRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.SpecimenResIndexUri", "ResourceId", "public.SpecimenRes");
            DropForeignKey("public.SpecimenResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SpecimenResIndexToken", "ResourceId", "public.SpecimenRes");
            DropForeignKey("public.SpecimenResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SpecimenResIndexString", "ResourceId", "public.SpecimenRes");
            DropForeignKey("public.SpecimenResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SpecimenResIndexReference", "ResourceId", "public.SpecimenRes");
            DropForeignKey("public.SpecimenResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SpecimenResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.SpecimenResIndexQuantity", "ResourceId", "public.SpecimenRes");
            DropForeignKey("public.SpecimenResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SpecimenResIndexDateTime", "ResourceId", "public.SpecimenRes");
            DropForeignKey("public.SpecimenResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SpecimenRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.SlotResIndexUri", "ResourceId", "public.SlotRes");
            DropForeignKey("public.SlotResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SlotResIndexToken", "ResourceId", "public.SlotRes");
            DropForeignKey("public.SlotResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SlotResIndexString", "ResourceId", "public.SlotRes");
            DropForeignKey("public.SlotResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SlotResIndexReference", "ResourceId", "public.SlotRes");
            DropForeignKey("public.SlotResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SlotResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.SlotResIndexQuantity", "ResourceId", "public.SlotRes");
            DropForeignKey("public.SlotResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SlotResIndexDateTime", "ResourceId", "public.SlotRes");
            DropForeignKey("public.SlotResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SlotRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.ServiceDefinitionResIndexUri", "ResourceId", "public.ServiceDefinitionRes");
            DropForeignKey("public.ServiceDefinitionResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ServiceDefinitionResIndexToken", "ResourceId", "public.ServiceDefinitionRes");
            DropForeignKey("public.ServiceDefinitionResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ServiceDefinitionResIndexString", "ResourceId", "public.ServiceDefinitionRes");
            DropForeignKey("public.ServiceDefinitionResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ServiceDefinitionResIndexReference", "ResourceId", "public.ServiceDefinitionRes");
            DropForeignKey("public.ServiceDefinitionResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ServiceDefinitionResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.ServiceDefinitionResIndexQuantity", "ResourceId", "public.ServiceDefinitionRes");
            DropForeignKey("public.ServiceDefinitionResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ServiceDefinitionResIndexDateTime", "ResourceId", "public.ServiceDefinitionRes");
            DropForeignKey("public.ServiceDefinitionResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ServiceDefinitionRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.SequenceResIndexUri", "ResourceId", "public.SequenceRes");
            DropForeignKey("public.SequenceResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SequenceResIndexToken", "ResourceId", "public.SequenceRes");
            DropForeignKey("public.SequenceResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SequenceResIndexString", "ResourceId", "public.SequenceRes");
            DropForeignKey("public.SequenceResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SequenceResIndexReference", "ResourceId", "public.SequenceRes");
            DropForeignKey("public.SequenceResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SequenceResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.SequenceResIndexQuantity", "ResourceId", "public.SequenceRes");
            DropForeignKey("public.SequenceResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SequenceResIndexDateTime", "ResourceId", "public.SequenceRes");
            DropForeignKey("public.SequenceResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SequenceRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.SearchParameterResIndexUri", "ResourceId", "public.SearchParameterRes");
            DropForeignKey("public.SearchParameterResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SearchParameterResIndexToken", "ResourceId", "public.SearchParameterRes");
            DropForeignKey("public.SearchParameterResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SearchParameterResIndexString", "ResourceId", "public.SearchParameterRes");
            DropForeignKey("public.SearchParameterResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SearchParameterResIndexReference", "ResourceId", "public.SearchParameterRes");
            DropForeignKey("public.SearchParameterResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SearchParameterResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.SearchParameterResIndexQuantity", "ResourceId", "public.SearchParameterRes");
            DropForeignKey("public.SearchParameterResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SearchParameterResIndexDateTime", "ResourceId", "public.SearchParameterRes");
            DropForeignKey("public.SearchParameterResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.SearchParameterRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.ScheduleResIndexUri", "ResourceId", "public.ScheduleRes");
            DropForeignKey("public.ScheduleResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ScheduleResIndexToken", "ResourceId", "public.ScheduleRes");
            DropForeignKey("public.ScheduleResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ScheduleResIndexString", "ResourceId", "public.ScheduleRes");
            DropForeignKey("public.ScheduleResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ScheduleResIndexReference", "ResourceId", "public.ScheduleRes");
            DropForeignKey("public.ScheduleResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ScheduleResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.ScheduleResIndexQuantity", "ResourceId", "public.ScheduleRes");
            DropForeignKey("public.ScheduleResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ScheduleResIndexDateTime", "ResourceId", "public.ScheduleRes");
            DropForeignKey("public.ScheduleResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ScheduleRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.RiskAssessmentResIndexUri", "ResourceId", "public.RiskAssessmentRes");
            DropForeignKey("public.RiskAssessmentResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.RiskAssessmentResIndexToken", "ResourceId", "public.RiskAssessmentRes");
            DropForeignKey("public.RiskAssessmentResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.RiskAssessmentResIndexString", "ResourceId", "public.RiskAssessmentRes");
            DropForeignKey("public.RiskAssessmentResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.RiskAssessmentResIndexReference", "ResourceId", "public.RiskAssessmentRes");
            DropForeignKey("public.RiskAssessmentResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.RiskAssessmentResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.RiskAssessmentResIndexQuantity", "ResourceId", "public.RiskAssessmentRes");
            DropForeignKey("public.RiskAssessmentResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.RiskAssessmentResIndexDateTime", "ResourceId", "public.RiskAssessmentRes");
            DropForeignKey("public.RiskAssessmentResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.RiskAssessmentRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.ResearchSubjectResIndexUri", "ResourceId", "public.ResearchSubjectRes");
            DropForeignKey("public.ResearchSubjectResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ResearchSubjectResIndexToken", "ResourceId", "public.ResearchSubjectRes");
            DropForeignKey("public.ResearchSubjectResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ResearchSubjectResIndexString", "ResourceId", "public.ResearchSubjectRes");
            DropForeignKey("public.ResearchSubjectResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ResearchSubjectResIndexReference", "ResourceId", "public.ResearchSubjectRes");
            DropForeignKey("public.ResearchSubjectResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ResearchSubjectResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.ResearchSubjectResIndexQuantity", "ResourceId", "public.ResearchSubjectRes");
            DropForeignKey("public.ResearchSubjectResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ResearchSubjectResIndexDateTime", "ResourceId", "public.ResearchSubjectRes");
            DropForeignKey("public.ResearchSubjectResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ResearchSubjectRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.ResearchStudyResIndexUri", "ResourceId", "public.ResearchStudyRes");
            DropForeignKey("public.ResearchStudyResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ResearchStudyResIndexToken", "ResourceId", "public.ResearchStudyRes");
            DropForeignKey("public.ResearchStudyResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ResearchStudyResIndexString", "ResourceId", "public.ResearchStudyRes");
            DropForeignKey("public.ResearchStudyResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ResearchStudyResIndexReference", "ResourceId", "public.ResearchStudyRes");
            DropForeignKey("public.ResearchStudyResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ResearchStudyResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.ResearchStudyResIndexQuantity", "ResourceId", "public.ResearchStudyRes");
            DropForeignKey("public.ResearchStudyResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ResearchStudyResIndexDateTime", "ResourceId", "public.ResearchStudyRes");
            DropForeignKey("public.ResearchStudyResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ResearchStudyRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.RequestGroupResIndexUri", "ResourceId", "public.RequestGroupRes");
            DropForeignKey("public.RequestGroupResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.RequestGroupResIndexToken", "ResourceId", "public.RequestGroupRes");
            DropForeignKey("public.RequestGroupResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.RequestGroupResIndexString", "ResourceId", "public.RequestGroupRes");
            DropForeignKey("public.RequestGroupResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.RequestGroupResIndexReference", "ResourceId", "public.RequestGroupRes");
            DropForeignKey("public.RequestGroupResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.RequestGroupResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.RequestGroupResIndexQuantity", "ResourceId", "public.RequestGroupRes");
            DropForeignKey("public.RequestGroupResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.RequestGroupResIndexDateTime", "ResourceId", "public.RequestGroupRes");
            DropForeignKey("public.RequestGroupResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.RequestGroupRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.RelatedPersonResIndexUri", "ResourceId", "public.RelatedPersonRes");
            DropForeignKey("public.RelatedPersonResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.RelatedPersonResIndexToken", "ResourceId", "public.RelatedPersonRes");
            DropForeignKey("public.RelatedPersonResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.RelatedPersonResIndexString", "ResourceId", "public.RelatedPersonRes");
            DropForeignKey("public.RelatedPersonResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.RelatedPersonResIndexReference", "ResourceId", "public.RelatedPersonRes");
            DropForeignKey("public.RelatedPersonResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.RelatedPersonResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.RelatedPersonResIndexQuantity", "ResourceId", "public.RelatedPersonRes");
            DropForeignKey("public.RelatedPersonResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.RelatedPersonResIndexDateTime", "ResourceId", "public.RelatedPersonRes");
            DropForeignKey("public.RelatedPersonResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.RelatedPersonRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.ReferralRequestResIndexUri", "ResourceId", "public.ReferralRequestRes");
            DropForeignKey("public.ReferralRequestResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ReferralRequestResIndexToken", "ResourceId", "public.ReferralRequestRes");
            DropForeignKey("public.ReferralRequestResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ReferralRequestResIndexString", "ResourceId", "public.ReferralRequestRes");
            DropForeignKey("public.ReferralRequestResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ReferralRequestResIndexReference", "ResourceId", "public.ReferralRequestRes");
            DropForeignKey("public.ReferralRequestResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ReferralRequestResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.ReferralRequestResIndexQuantity", "ResourceId", "public.ReferralRequestRes");
            DropForeignKey("public.ReferralRequestResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ReferralRequestResIndexDateTime", "ResourceId", "public.ReferralRequestRes");
            DropForeignKey("public.ReferralRequestResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ReferralRequestRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.QuestionnaireResponseResIndexUri", "ResourceId", "public.QuestionnaireResponseRes");
            DropForeignKey("public.QuestionnaireResponseResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.QuestionnaireResponseResIndexToken", "ResourceId", "public.QuestionnaireResponseRes");
            DropForeignKey("public.QuestionnaireResponseResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.QuestionnaireResponseResIndexString", "ResourceId", "public.QuestionnaireResponseRes");
            DropForeignKey("public.QuestionnaireResponseResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.QuestionnaireResponseResIndexReference", "ResourceId", "public.QuestionnaireResponseRes");
            DropForeignKey("public.QuestionnaireResponseResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.QuestionnaireResponseResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.QuestionnaireResponseResIndexQuantity", "ResourceId", "public.QuestionnaireResponseRes");
            DropForeignKey("public.QuestionnaireResponseResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.QuestionnaireResponseResIndexDateTime", "ResourceId", "public.QuestionnaireResponseRes");
            DropForeignKey("public.QuestionnaireResponseResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.QuestionnaireResponseRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.QuestionnaireResIndexUri", "ResourceId", "public.QuestionnaireRes");
            DropForeignKey("public.QuestionnaireResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.QuestionnaireResIndexToken", "ResourceId", "public.QuestionnaireRes");
            DropForeignKey("public.QuestionnaireResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.QuestionnaireResIndexString", "ResourceId", "public.QuestionnaireRes");
            DropForeignKey("public.QuestionnaireResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.QuestionnaireResIndexReference", "ResourceId", "public.QuestionnaireRes");
            DropForeignKey("public.QuestionnaireResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.QuestionnaireResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.QuestionnaireResIndexQuantity", "ResourceId", "public.QuestionnaireRes");
            DropForeignKey("public.QuestionnaireResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.QuestionnaireResIndexDateTime", "ResourceId", "public.QuestionnaireRes");
            DropForeignKey("public.QuestionnaireResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.QuestionnaireRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.ProvenanceResIndexUri", "ResourceId", "public.ProvenanceRes");
            DropForeignKey("public.ProvenanceResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ProvenanceResIndexToken", "ResourceId", "public.ProvenanceRes");
            DropForeignKey("public.ProvenanceResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ProvenanceResIndexString", "ResourceId", "public.ProvenanceRes");
            DropForeignKey("public.ProvenanceResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ProvenanceResIndexReference", "ResourceId", "public.ProvenanceRes");
            DropForeignKey("public.ProvenanceResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ProvenanceResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.ProvenanceResIndexQuantity", "ResourceId", "public.ProvenanceRes");
            DropForeignKey("public.ProvenanceResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ProvenanceResIndexDateTime", "ResourceId", "public.ProvenanceRes");
            DropForeignKey("public.ProvenanceResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ProvenanceRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.ProcessResponseResIndexUri", "ResourceId", "public.ProcessResponseRes");
            DropForeignKey("public.ProcessResponseResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ProcessResponseResIndexToken", "ResourceId", "public.ProcessResponseRes");
            DropForeignKey("public.ProcessResponseResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ProcessResponseResIndexString", "ResourceId", "public.ProcessResponseRes");
            DropForeignKey("public.ProcessResponseResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ProcessResponseResIndexReference", "ResourceId", "public.ProcessResponseRes");
            DropForeignKey("public.ProcessResponseResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ProcessResponseResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.ProcessResponseResIndexQuantity", "ResourceId", "public.ProcessResponseRes");
            DropForeignKey("public.ProcessResponseResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ProcessResponseResIndexDateTime", "ResourceId", "public.ProcessResponseRes");
            DropForeignKey("public.ProcessResponseResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ProcessResponseRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.ProcessRequestResIndexUri", "ResourceId", "public.ProcessRequestRes");
            DropForeignKey("public.ProcessRequestResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ProcessRequestResIndexToken", "ResourceId", "public.ProcessRequestRes");
            DropForeignKey("public.ProcessRequestResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ProcessRequestResIndexString", "ResourceId", "public.ProcessRequestRes");
            DropForeignKey("public.ProcessRequestResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ProcessRequestResIndexReference", "ResourceId", "public.ProcessRequestRes");
            DropForeignKey("public.ProcessRequestResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ProcessRequestResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.ProcessRequestResIndexQuantity", "ResourceId", "public.ProcessRequestRes");
            DropForeignKey("public.ProcessRequestResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ProcessRequestResIndexDateTime", "ResourceId", "public.ProcessRequestRes");
            DropForeignKey("public.ProcessRequestResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ProcessRequestRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.ProcedureRequestResIndexUri", "ResourceId", "public.ProcedureRequestRes");
            DropForeignKey("public.ProcedureRequestResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ProcedureRequestResIndexToken", "ResourceId", "public.ProcedureRequestRes");
            DropForeignKey("public.ProcedureRequestResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ProcedureRequestResIndexString", "ResourceId", "public.ProcedureRequestRes");
            DropForeignKey("public.ProcedureRequestResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ProcedureRequestResIndexReference", "ResourceId", "public.ProcedureRequestRes");
            DropForeignKey("public.ProcedureRequestResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ProcedureRequestResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.ProcedureRequestResIndexQuantity", "ResourceId", "public.ProcedureRequestRes");
            DropForeignKey("public.ProcedureRequestResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ProcedureRequestResIndexDateTime", "ResourceId", "public.ProcedureRequestRes");
            DropForeignKey("public.ProcedureRequestResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ProcedureRequestRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.ProcedureResIndexUri", "ResourceId", "public.ProcedureRes");
            DropForeignKey("public.ProcedureResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ProcedureResIndexToken", "ResourceId", "public.ProcedureRes");
            DropForeignKey("public.ProcedureResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ProcedureResIndexString", "ResourceId", "public.ProcedureRes");
            DropForeignKey("public.ProcedureResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ProcedureResIndexReference", "ResourceId", "public.ProcedureRes");
            DropForeignKey("public.ProcedureResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ProcedureResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.ProcedureResIndexQuantity", "ResourceId", "public.ProcedureRes");
            DropForeignKey("public.ProcedureResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ProcedureResIndexDateTime", "ResourceId", "public.ProcedureRes");
            DropForeignKey("public.ProcedureResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ProcedureRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.PractitionerRoleResIndexUri", "ResourceId", "public.PractitionerRoleRes");
            DropForeignKey("public.PractitionerRoleResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PractitionerRoleResIndexToken", "ResourceId", "public.PractitionerRoleRes");
            DropForeignKey("public.PractitionerRoleResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PractitionerRoleResIndexString", "ResourceId", "public.PractitionerRoleRes");
            DropForeignKey("public.PractitionerRoleResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PractitionerRoleResIndexReference", "ResourceId", "public.PractitionerRoleRes");
            DropForeignKey("public.PractitionerRoleResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PractitionerRoleResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.PractitionerRoleResIndexQuantity", "ResourceId", "public.PractitionerRoleRes");
            DropForeignKey("public.PractitionerRoleResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PractitionerRoleResIndexDateTime", "ResourceId", "public.PractitionerRoleRes");
            DropForeignKey("public.PractitionerRoleResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PractitionerRoleRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.PractitionerResIndexUri", "ResourceId", "public.PractitionerRes");
            DropForeignKey("public.PractitionerResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PractitionerResIndexToken", "ResourceId", "public.PractitionerRes");
            DropForeignKey("public.PractitionerResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PractitionerResIndexString", "ResourceId", "public.PractitionerRes");
            DropForeignKey("public.PractitionerResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PractitionerResIndexReference", "ResourceId", "public.PractitionerRes");
            DropForeignKey("public.PractitionerResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PractitionerResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.PractitionerResIndexQuantity", "ResourceId", "public.PractitionerRes");
            DropForeignKey("public.PractitionerResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PractitionerResIndexDateTime", "ResourceId", "public.PractitionerRes");
            DropForeignKey("public.PractitionerResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PractitionerRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.PlanDefinitionResIndexUri", "ResourceId", "public.PlanDefinitionRes");
            DropForeignKey("public.PlanDefinitionResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PlanDefinitionResIndexToken", "ResourceId", "public.PlanDefinitionRes");
            DropForeignKey("public.PlanDefinitionResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PlanDefinitionResIndexString", "ResourceId", "public.PlanDefinitionRes");
            DropForeignKey("public.PlanDefinitionResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PlanDefinitionResIndexReference", "ResourceId", "public.PlanDefinitionRes");
            DropForeignKey("public.PlanDefinitionResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PlanDefinitionResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.PlanDefinitionResIndexQuantity", "ResourceId", "public.PlanDefinitionRes");
            DropForeignKey("public.PlanDefinitionResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PlanDefinitionResIndexDateTime", "ResourceId", "public.PlanDefinitionRes");
            DropForeignKey("public.PlanDefinitionResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PlanDefinitionRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.PersonResIndexUri", "ResourceId", "public.PersonRes");
            DropForeignKey("public.PersonResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PersonResIndexToken", "ResourceId", "public.PersonRes");
            DropForeignKey("public.PersonResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PersonResIndexString", "ResourceId", "public.PersonRes");
            DropForeignKey("public.PersonResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PersonResIndexReference", "ResourceId", "public.PersonRes");
            DropForeignKey("public.PersonResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PersonResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.PersonResIndexQuantity", "ResourceId", "public.PersonRes");
            DropForeignKey("public.PersonResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PersonResIndexDateTime", "ResourceId", "public.PersonRes");
            DropForeignKey("public.PersonResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PersonRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.PaymentReconciliationResIndexUri", "ResourceId", "public.PaymentReconciliationRes");
            DropForeignKey("public.PaymentReconciliationResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PaymentReconciliationResIndexToken", "ResourceId", "public.PaymentReconciliationRes");
            DropForeignKey("public.PaymentReconciliationResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PaymentReconciliationResIndexString", "ResourceId", "public.PaymentReconciliationRes");
            DropForeignKey("public.PaymentReconciliationResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PaymentReconciliationResIndexReference", "ResourceId", "public.PaymentReconciliationRes");
            DropForeignKey("public.PaymentReconciliationResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PaymentReconciliationResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.PaymentReconciliationResIndexQuantity", "ResourceId", "public.PaymentReconciliationRes");
            DropForeignKey("public.PaymentReconciliationResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PaymentReconciliationResIndexDateTime", "ResourceId", "public.PaymentReconciliationRes");
            DropForeignKey("public.PaymentReconciliationResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PaymentReconciliationRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.PaymentNoticeResIndexUri", "ResourceId", "public.PaymentNoticeRes");
            DropForeignKey("public.PaymentNoticeResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PaymentNoticeResIndexToken", "ResourceId", "public.PaymentNoticeRes");
            DropForeignKey("public.PaymentNoticeResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PaymentNoticeResIndexString", "ResourceId", "public.PaymentNoticeRes");
            DropForeignKey("public.PaymentNoticeResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PaymentNoticeResIndexReference", "ResourceId", "public.PaymentNoticeRes");
            DropForeignKey("public.PaymentNoticeResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PaymentNoticeResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.PaymentNoticeResIndexQuantity", "ResourceId", "public.PaymentNoticeRes");
            DropForeignKey("public.PaymentNoticeResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PaymentNoticeResIndexDateTime", "ResourceId", "public.PaymentNoticeRes");
            DropForeignKey("public.PaymentNoticeResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PaymentNoticeRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.PatientResIndexUri", "ResourceId", "public.PatientRes");
            DropForeignKey("public.PatientResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PatientResIndexToken", "ResourceId", "public.PatientRes");
            DropForeignKey("public.PatientResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PatientResIndexString", "ResourceId", "public.PatientRes");
            DropForeignKey("public.PatientResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PatientResIndexReference", "ResourceId", "public.PatientRes");
            DropForeignKey("public.PatientResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PatientResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.PatientResIndexQuantity", "ResourceId", "public.PatientRes");
            DropForeignKey("public.PatientResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PatientResIndexDateTime", "ResourceId", "public.PatientRes");
            DropForeignKey("public.PatientResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.PatientRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.ParametersResIndexUri", "ResourceId", "public.ParametersRes");
            DropForeignKey("public.ParametersResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ParametersResIndexToken", "ResourceId", "public.ParametersRes");
            DropForeignKey("public.ParametersResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ParametersResIndexString", "ResourceId", "public.ParametersRes");
            DropForeignKey("public.ParametersResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ParametersResIndexReference", "ResourceId", "public.ParametersRes");
            DropForeignKey("public.ParametersResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ParametersResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.ParametersResIndexQuantity", "ResourceId", "public.ParametersRes");
            DropForeignKey("public.ParametersResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ParametersResIndexDateTime", "ResourceId", "public.ParametersRes");
            DropForeignKey("public.ParametersResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ParametersRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.OrganizationResIndexUri", "ResourceId", "public.OrganizationRes");
            DropForeignKey("public.OrganizationResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.OrganizationResIndexToken", "ResourceId", "public.OrganizationRes");
            DropForeignKey("public.OrganizationResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.OrganizationResIndexString", "ResourceId", "public.OrganizationRes");
            DropForeignKey("public.OrganizationResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.OrganizationResIndexReference", "ResourceId", "public.OrganizationRes");
            DropForeignKey("public.OrganizationResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.OrganizationResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.OrganizationResIndexQuantity", "ResourceId", "public.OrganizationRes");
            DropForeignKey("public.OrganizationResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.OrganizationResIndexDateTime", "ResourceId", "public.OrganizationRes");
            DropForeignKey("public.OrganizationResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.OrganizationRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.OperationOutcomeResIndexUri", "ResourceId", "public.OperationOutcomeRes");
            DropForeignKey("public.OperationOutcomeResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.OperationOutcomeResIndexToken", "ResourceId", "public.OperationOutcomeRes");
            DropForeignKey("public.OperationOutcomeResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.OperationOutcomeResIndexString", "ResourceId", "public.OperationOutcomeRes");
            DropForeignKey("public.OperationOutcomeResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.OperationOutcomeResIndexReference", "ResourceId", "public.OperationOutcomeRes");
            DropForeignKey("public.OperationOutcomeResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.OperationOutcomeResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.OperationOutcomeResIndexQuantity", "ResourceId", "public.OperationOutcomeRes");
            DropForeignKey("public.OperationOutcomeResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.OperationOutcomeResIndexDateTime", "ResourceId", "public.OperationOutcomeRes");
            DropForeignKey("public.OperationOutcomeResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.OperationOutcomeRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.OperationDefinitionResIndexUri", "ResourceId", "public.OperationDefinitionRes");
            DropForeignKey("public.OperationDefinitionResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.OperationDefinitionResIndexToken", "ResourceId", "public.OperationDefinitionRes");
            DropForeignKey("public.OperationDefinitionResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.OperationDefinitionResIndexString", "ResourceId", "public.OperationDefinitionRes");
            DropForeignKey("public.OperationDefinitionResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.OperationDefinitionResIndexReference", "ResourceId", "public.OperationDefinitionRes");
            DropForeignKey("public.OperationDefinitionResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.OperationDefinitionResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.OperationDefinitionResIndexQuantity", "ResourceId", "public.OperationDefinitionRes");
            DropForeignKey("public.OperationDefinitionResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.OperationDefinitionResIndexDateTime", "ResourceId", "public.OperationDefinitionRes");
            DropForeignKey("public.OperationDefinitionResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.OperationDefinitionRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.ObservationResIndexUri", "ResourceId", "public.ObservationRes");
            DropForeignKey("public.ObservationResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ObservationResIndexToken", "ResourceId", "public.ObservationRes");
            DropForeignKey("public.ObservationResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ObservationResIndexString", "ResourceId", "public.ObservationRes");
            DropForeignKey("public.ObservationResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ObservationResIndexReference", "ResourceId", "public.ObservationRes");
            DropForeignKey("public.ObservationResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ObservationResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.ObservationResIndexQuantity", "ResourceId", "public.ObservationRes");
            DropForeignKey("public.ObservationResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ObservationResIndexDateTime", "ResourceId", "public.ObservationRes");
            DropForeignKey("public.ObservationResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ObservationRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.NutritionOrderResIndexUri", "ResourceId", "public.NutritionOrderRes");
            DropForeignKey("public.NutritionOrderResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.NutritionOrderResIndexToken", "ResourceId", "public.NutritionOrderRes");
            DropForeignKey("public.NutritionOrderResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.NutritionOrderResIndexString", "ResourceId", "public.NutritionOrderRes");
            DropForeignKey("public.NutritionOrderResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.NutritionOrderResIndexReference", "ResourceId", "public.NutritionOrderRes");
            DropForeignKey("public.NutritionOrderResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.NutritionOrderResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.NutritionOrderResIndexQuantity", "ResourceId", "public.NutritionOrderRes");
            DropForeignKey("public.NutritionOrderResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.NutritionOrderResIndexDateTime", "ResourceId", "public.NutritionOrderRes");
            DropForeignKey("public.NutritionOrderResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.NutritionOrderRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.NamingSystemResIndexUri", "ResourceId", "public.NamingSystemRes");
            DropForeignKey("public.NamingSystemResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.NamingSystemResIndexToken", "ResourceId", "public.NamingSystemRes");
            DropForeignKey("public.NamingSystemResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.NamingSystemResIndexString", "ResourceId", "public.NamingSystemRes");
            DropForeignKey("public.NamingSystemResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.NamingSystemResIndexReference", "ResourceId", "public.NamingSystemRes");
            DropForeignKey("public.NamingSystemResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.NamingSystemResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.NamingSystemResIndexQuantity", "ResourceId", "public.NamingSystemRes");
            DropForeignKey("public.NamingSystemResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.NamingSystemResIndexDateTime", "ResourceId", "public.NamingSystemRes");
            DropForeignKey("public.NamingSystemResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.NamingSystemRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.MessageHeaderResIndexUri", "ResourceId", "public.MessageHeaderRes");
            DropForeignKey("public.MessageHeaderResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MessageHeaderResIndexToken", "ResourceId", "public.MessageHeaderRes");
            DropForeignKey("public.MessageHeaderResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MessageHeaderResIndexString", "ResourceId", "public.MessageHeaderRes");
            DropForeignKey("public.MessageHeaderResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MessageHeaderResIndexReference", "ResourceId", "public.MessageHeaderRes");
            DropForeignKey("public.MessageHeaderResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MessageHeaderResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.MessageHeaderResIndexQuantity", "ResourceId", "public.MessageHeaderRes");
            DropForeignKey("public.MessageHeaderResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MessageHeaderResIndexDateTime", "ResourceId", "public.MessageHeaderRes");
            DropForeignKey("public.MessageHeaderResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MessageHeaderRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.MessageDefinitionResIndexUri", "ResourceId", "public.MessageDefinitionRes");
            DropForeignKey("public.MessageDefinitionResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MessageDefinitionResIndexToken", "ResourceId", "public.MessageDefinitionRes");
            DropForeignKey("public.MessageDefinitionResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MessageDefinitionResIndexString", "ResourceId", "public.MessageDefinitionRes");
            DropForeignKey("public.MessageDefinitionResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MessageDefinitionResIndexReference", "ResourceId", "public.MessageDefinitionRes");
            DropForeignKey("public.MessageDefinitionResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MessageDefinitionResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.MessageDefinitionResIndexQuantity", "ResourceId", "public.MessageDefinitionRes");
            DropForeignKey("public.MessageDefinitionResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MessageDefinitionResIndexDateTime", "ResourceId", "public.MessageDefinitionRes");
            DropForeignKey("public.MessageDefinitionResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MessageDefinitionRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.MedicationStatementResIndexUri", "ResourceId", "public.MedicationStatementRes");
            DropForeignKey("public.MedicationStatementResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicationStatementResIndexToken", "ResourceId", "public.MedicationStatementRes");
            DropForeignKey("public.MedicationStatementResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicationStatementResIndexString", "ResourceId", "public.MedicationStatementRes");
            DropForeignKey("public.MedicationStatementResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicationStatementResIndexReference", "ResourceId", "public.MedicationStatementRes");
            DropForeignKey("public.MedicationStatementResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicationStatementResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.MedicationStatementResIndexQuantity", "ResourceId", "public.MedicationStatementRes");
            DropForeignKey("public.MedicationStatementResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicationStatementResIndexDateTime", "ResourceId", "public.MedicationStatementRes");
            DropForeignKey("public.MedicationStatementResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicationStatementRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.MedicationRequestResIndexUri", "ResourceId", "public.MedicationRequestRes");
            DropForeignKey("public.MedicationRequestResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicationRequestResIndexToken", "ResourceId", "public.MedicationRequestRes");
            DropForeignKey("public.MedicationRequestResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicationRequestResIndexString", "ResourceId", "public.MedicationRequestRes");
            DropForeignKey("public.MedicationRequestResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicationRequestResIndexReference", "ResourceId", "public.MedicationRequestRes");
            DropForeignKey("public.MedicationRequestResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicationRequestResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.MedicationRequestResIndexQuantity", "ResourceId", "public.MedicationRequestRes");
            DropForeignKey("public.MedicationRequestResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicationRequestResIndexDateTime", "ResourceId", "public.MedicationRequestRes");
            DropForeignKey("public.MedicationRequestResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicationRequestRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.MedicationResIndexUri", "ResourceId", "public.MedicationRes");
            DropForeignKey("public.MedicationResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicationResIndexToken", "ResourceId", "public.MedicationRes");
            DropForeignKey("public.MedicationResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicationResIndexString", "ResourceId", "public.MedicationRes");
            DropForeignKey("public.MedicationResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicationResIndexReference", "ResourceId", "public.MedicationRes");
            DropForeignKey("public.MedicationResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicationResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.MedicationResIndexQuantity", "ResourceId", "public.MedicationRes");
            DropForeignKey("public.MedicationResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicationResIndexDateTime", "ResourceId", "public.MedicationRes");
            DropForeignKey("public.MedicationResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicationRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.MedicationDispenseResIndexUri", "ResourceId", "public.MedicationDispenseRes");
            DropForeignKey("public.MedicationDispenseResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicationDispenseResIndexToken", "ResourceId", "public.MedicationDispenseRes");
            DropForeignKey("public.MedicationDispenseResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicationDispenseResIndexString", "ResourceId", "public.MedicationDispenseRes");
            DropForeignKey("public.MedicationDispenseResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicationDispenseResIndexReference", "ResourceId", "public.MedicationDispenseRes");
            DropForeignKey("public.MedicationDispenseResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicationDispenseResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.MedicationDispenseResIndexQuantity", "ResourceId", "public.MedicationDispenseRes");
            DropForeignKey("public.MedicationDispenseResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicationDispenseResIndexDateTime", "ResourceId", "public.MedicationDispenseRes");
            DropForeignKey("public.MedicationDispenseResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicationDispenseRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.MedicationAdministrationResIndexUri", "ResourceId", "public.MedicationAdministrationRes");
            DropForeignKey("public.MedicationAdministrationResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicationAdministrationResIndexToken", "ResourceId", "public.MedicationAdministrationRes");
            DropForeignKey("public.MedicationAdministrationResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicationAdministrationResIndexString", "ResourceId", "public.MedicationAdministrationRes");
            DropForeignKey("public.MedicationAdministrationResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicationAdministrationResIndexReference", "ResourceId", "public.MedicationAdministrationRes");
            DropForeignKey("public.MedicationAdministrationResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicationAdministrationResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.MedicationAdministrationResIndexQuantity", "ResourceId", "public.MedicationAdministrationRes");
            DropForeignKey("public.MedicationAdministrationResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicationAdministrationResIndexDateTime", "ResourceId", "public.MedicationAdministrationRes");
            DropForeignKey("public.MedicationAdministrationResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MedicationAdministrationRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.MediaResIndexUri", "ResourceId", "public.MediaRes");
            DropForeignKey("public.MediaResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MediaResIndexToken", "ResourceId", "public.MediaRes");
            DropForeignKey("public.MediaResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MediaResIndexString", "ResourceId", "public.MediaRes");
            DropForeignKey("public.MediaResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MediaResIndexReference", "ResourceId", "public.MediaRes");
            DropForeignKey("public.MediaResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MediaResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.MediaResIndexQuantity", "ResourceId", "public.MediaRes");
            DropForeignKey("public.MediaResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MediaResIndexDateTime", "ResourceId", "public.MediaRes");
            DropForeignKey("public.MediaResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MediaRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.MeasureReportResIndexUri", "ResourceId", "public.MeasureReportRes");
            DropForeignKey("public.MeasureReportResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MeasureReportResIndexToken", "ResourceId", "public.MeasureReportRes");
            DropForeignKey("public.MeasureReportResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MeasureReportResIndexString", "ResourceId", "public.MeasureReportRes");
            DropForeignKey("public.MeasureReportResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MeasureReportResIndexReference", "ResourceId", "public.MeasureReportRes");
            DropForeignKey("public.MeasureReportResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MeasureReportResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.MeasureReportResIndexQuantity", "ResourceId", "public.MeasureReportRes");
            DropForeignKey("public.MeasureReportResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MeasureReportResIndexDateTime", "ResourceId", "public.MeasureReportRes");
            DropForeignKey("public.MeasureReportResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MeasureReportRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.MeasureResIndexUri", "ResourceId", "public.MeasureRes");
            DropForeignKey("public.MeasureResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MeasureResIndexToken", "ResourceId", "public.MeasureRes");
            DropForeignKey("public.MeasureResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MeasureResIndexString", "ResourceId", "public.MeasureRes");
            DropForeignKey("public.MeasureResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MeasureResIndexReference", "ResourceId", "public.MeasureRes");
            DropForeignKey("public.MeasureResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MeasureResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.MeasureResIndexQuantity", "ResourceId", "public.MeasureRes");
            DropForeignKey("public.MeasureResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MeasureResIndexDateTime", "ResourceId", "public.MeasureRes");
            DropForeignKey("public.MeasureResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.MeasureRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.LocationResIndexUri", "ResourceId", "public.LocationRes");
            DropForeignKey("public.LocationResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.LocationResIndexToken", "ResourceId", "public.LocationRes");
            DropForeignKey("public.LocationResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.LocationResIndexString", "ResourceId", "public.LocationRes");
            DropForeignKey("public.LocationResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.LocationResIndexReference", "ResourceId", "public.LocationRes");
            DropForeignKey("public.LocationResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.LocationResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.LocationResIndexQuantity", "ResourceId", "public.LocationRes");
            DropForeignKey("public.LocationResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.LocationResIndexDateTime", "ResourceId", "public.LocationRes");
            DropForeignKey("public.LocationResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.LocationRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.ListResIndexUri", "ResourceId", "public.ListRes");
            DropForeignKey("public.ListResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ListResIndexToken", "ResourceId", "public.ListRes");
            DropForeignKey("public.ListResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ListResIndexString", "ResourceId", "public.ListRes");
            DropForeignKey("public.ListResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ListResIndexReference", "ResourceId", "public.ListRes");
            DropForeignKey("public.ListResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ListResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.ListResIndexQuantity", "ResourceId", "public.ListRes");
            DropForeignKey("public.ListResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ListResIndexDateTime", "ResourceId", "public.ListRes");
            DropForeignKey("public.ListResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ListRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.LinkageResIndexUri", "ResourceId", "public.LinkageRes");
            DropForeignKey("public.LinkageResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.LinkageResIndexToken", "ResourceId", "public.LinkageRes");
            DropForeignKey("public.LinkageResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.LinkageResIndexString", "ResourceId", "public.LinkageRes");
            DropForeignKey("public.LinkageResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.LinkageResIndexReference", "ResourceId", "public.LinkageRes");
            DropForeignKey("public.LinkageResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.LinkageResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.LinkageResIndexQuantity", "ResourceId", "public.LinkageRes");
            DropForeignKey("public.LinkageResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.LinkageResIndexDateTime", "ResourceId", "public.LinkageRes");
            DropForeignKey("public.LinkageResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.LinkageRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.LibraryResIndexUri", "ResourceId", "public.LibraryRes");
            DropForeignKey("public.LibraryResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.LibraryResIndexToken", "ResourceId", "public.LibraryRes");
            DropForeignKey("public.LibraryResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.LibraryResIndexString", "ResourceId", "public.LibraryRes");
            DropForeignKey("public.LibraryResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.LibraryResIndexReference", "ResourceId", "public.LibraryRes");
            DropForeignKey("public.LibraryResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.LibraryResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.LibraryResIndexQuantity", "ResourceId", "public.LibraryRes");
            DropForeignKey("public.LibraryResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.LibraryResIndexDateTime", "ResourceId", "public.LibraryRes");
            DropForeignKey("public.LibraryResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.LibraryRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.ImplementationGuideResIndexUri", "ResourceId", "public.ImplementationGuideRes");
            DropForeignKey("public.ImplementationGuideResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ImplementationGuideResIndexToken", "ResourceId", "public.ImplementationGuideRes");
            DropForeignKey("public.ImplementationGuideResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ImplementationGuideResIndexString", "ResourceId", "public.ImplementationGuideRes");
            DropForeignKey("public.ImplementationGuideResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ImplementationGuideResIndexReference", "ResourceId", "public.ImplementationGuideRes");
            DropForeignKey("public.ImplementationGuideResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ImplementationGuideResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.ImplementationGuideResIndexQuantity", "ResourceId", "public.ImplementationGuideRes");
            DropForeignKey("public.ImplementationGuideResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ImplementationGuideResIndexDateTime", "ResourceId", "public.ImplementationGuideRes");
            DropForeignKey("public.ImplementationGuideResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ImplementationGuideRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.ImmunizationRecommendationResIndexUri", "ResourceId", "public.ImmunizationRecommendationRes");
            DropForeignKey("public.ImmunizationRecommendationResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ImmunizationRecommendationResIndexToken", "ResourceId", "public.ImmunizationRecommendationRes");
            DropForeignKey("public.ImmunizationRecommendationResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ImmunizationRecommendationResIndexString", "ResourceId", "public.ImmunizationRecommendationRes");
            DropForeignKey("public.ImmunizationRecommendationResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ImmunizationRecommendationResIndexReference", "ResourceId", "public.ImmunizationRecommendationRes");
            DropForeignKey("public.ImmunizationRecommendationResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ImmunizationRecommendationResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.ImmunizationRecommendationResIndexQuantity", "ResourceId", "public.ImmunizationRecommendationRes");
            DropForeignKey("public.ImmunizationRecommendationResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ImmunizationRecommendationResIndexDateTime", "ResourceId", "public.ImmunizationRecommendationRes");
            DropForeignKey("public.ImmunizationRecommendationResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ImmunizationRecommendationRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.ImmunizationResIndexUri", "ResourceId", "public.ImmunizationRes");
            DropForeignKey("public.ImmunizationResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ImmunizationResIndexToken", "ResourceId", "public.ImmunizationRes");
            DropForeignKey("public.ImmunizationResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ImmunizationResIndexString", "ResourceId", "public.ImmunizationRes");
            DropForeignKey("public.ImmunizationResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ImmunizationResIndexReference", "ResourceId", "public.ImmunizationRes");
            DropForeignKey("public.ImmunizationResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ImmunizationResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.ImmunizationResIndexQuantity", "ResourceId", "public.ImmunizationRes");
            DropForeignKey("public.ImmunizationResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ImmunizationResIndexDateTime", "ResourceId", "public.ImmunizationRes");
            DropForeignKey("public.ImmunizationResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ImmunizationRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.ImagingStudyResIndexUri", "ResourceId", "public.ImagingStudyRes");
            DropForeignKey("public.ImagingStudyResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ImagingStudyResIndexToken", "ResourceId", "public.ImagingStudyRes");
            DropForeignKey("public.ImagingStudyResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ImagingStudyResIndexString", "ResourceId", "public.ImagingStudyRes");
            DropForeignKey("public.ImagingStudyResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ImagingStudyResIndexReference", "ResourceId", "public.ImagingStudyRes");
            DropForeignKey("public.ImagingStudyResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ImagingStudyResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.ImagingStudyResIndexQuantity", "ResourceId", "public.ImagingStudyRes");
            DropForeignKey("public.ImagingStudyResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ImagingStudyResIndexDateTime", "ResourceId", "public.ImagingStudyRes");
            DropForeignKey("public.ImagingStudyResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ImagingStudyRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.ImagingManifestResIndexUri", "ResourceId", "public.ImagingManifestRes");
            DropForeignKey("public.ImagingManifestResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ImagingManifestResIndexToken", "ResourceId", "public.ImagingManifestRes");
            DropForeignKey("public.ImagingManifestResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ImagingManifestResIndexString", "ResourceId", "public.ImagingManifestRes");
            DropForeignKey("public.ImagingManifestResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ImagingManifestResIndexReference", "ResourceId", "public.ImagingManifestRes");
            DropForeignKey("public.ImagingManifestResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ImagingManifestResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.ImagingManifestResIndexQuantity", "ResourceId", "public.ImagingManifestRes");
            DropForeignKey("public.ImagingManifestResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ImagingManifestResIndexDateTime", "ResourceId", "public.ImagingManifestRes");
            DropForeignKey("public.ImagingManifestResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ImagingManifestRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.HealthcareServiceResIndexUri", "ResourceId", "public.HealthcareServiceRes");
            DropForeignKey("public.HealthcareServiceResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.HealthcareServiceResIndexToken", "ResourceId", "public.HealthcareServiceRes");
            DropForeignKey("public.HealthcareServiceResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.HealthcareServiceResIndexString", "ResourceId", "public.HealthcareServiceRes");
            DropForeignKey("public.HealthcareServiceResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.HealthcareServiceResIndexReference", "ResourceId", "public.HealthcareServiceRes");
            DropForeignKey("public.HealthcareServiceResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.HealthcareServiceResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.HealthcareServiceResIndexQuantity", "ResourceId", "public.HealthcareServiceRes");
            DropForeignKey("public.HealthcareServiceResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.HealthcareServiceResIndexDateTime", "ResourceId", "public.HealthcareServiceRes");
            DropForeignKey("public.HealthcareServiceResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.HealthcareServiceRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.GuidanceResponseResIndexUri", "ResourceId", "public.GuidanceResponseRes");
            DropForeignKey("public.GuidanceResponseResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.GuidanceResponseResIndexToken", "ResourceId", "public.GuidanceResponseRes");
            DropForeignKey("public.GuidanceResponseResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.GuidanceResponseResIndexString", "ResourceId", "public.GuidanceResponseRes");
            DropForeignKey("public.GuidanceResponseResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.GuidanceResponseResIndexReference", "ResourceId", "public.GuidanceResponseRes");
            DropForeignKey("public.GuidanceResponseResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.GuidanceResponseResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.GuidanceResponseResIndexQuantity", "ResourceId", "public.GuidanceResponseRes");
            DropForeignKey("public.GuidanceResponseResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.GuidanceResponseResIndexDateTime", "ResourceId", "public.GuidanceResponseRes");
            DropForeignKey("public.GuidanceResponseResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.GuidanceResponseRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.GroupResIndexUri", "ResourceId", "public.GroupRes");
            DropForeignKey("public.GroupResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.GroupResIndexToken", "ResourceId", "public.GroupRes");
            DropForeignKey("public.GroupResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.GroupResIndexString", "ResourceId", "public.GroupRes");
            DropForeignKey("public.GroupResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.GroupResIndexReference", "ResourceId", "public.GroupRes");
            DropForeignKey("public.GroupResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.GroupResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.GroupResIndexQuantity", "ResourceId", "public.GroupRes");
            DropForeignKey("public.GroupResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.GroupResIndexDateTime", "ResourceId", "public.GroupRes");
            DropForeignKey("public.GroupResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.GroupRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.GraphDefinitionResIndexUri", "ResourceId", "public.GraphDefinitionRes");
            DropForeignKey("public.GraphDefinitionResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.GraphDefinitionResIndexToken", "ResourceId", "public.GraphDefinitionRes");
            DropForeignKey("public.GraphDefinitionResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.GraphDefinitionResIndexString", "ResourceId", "public.GraphDefinitionRes");
            DropForeignKey("public.GraphDefinitionResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.GraphDefinitionResIndexReference", "ResourceId", "public.GraphDefinitionRes");
            DropForeignKey("public.GraphDefinitionResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.GraphDefinitionResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.GraphDefinitionResIndexQuantity", "ResourceId", "public.GraphDefinitionRes");
            DropForeignKey("public.GraphDefinitionResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.GraphDefinitionResIndexDateTime", "ResourceId", "public.GraphDefinitionRes");
            DropForeignKey("public.GraphDefinitionResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.GraphDefinitionRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.GoalResIndexUri", "ResourceId", "public.GoalRes");
            DropForeignKey("public.GoalResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.GoalResIndexToken", "ResourceId", "public.GoalRes");
            DropForeignKey("public.GoalResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.GoalResIndexString", "ResourceId", "public.GoalRes");
            DropForeignKey("public.GoalResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.GoalResIndexReference", "ResourceId", "public.GoalRes");
            DropForeignKey("public.GoalResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.GoalResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.GoalResIndexQuantity", "ResourceId", "public.GoalRes");
            DropForeignKey("public.GoalResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.GoalResIndexDateTime", "ResourceId", "public.GoalRes");
            DropForeignKey("public.GoalResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.GoalRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.FlagResIndexUri", "ResourceId", "public.FlagRes");
            DropForeignKey("public.FlagResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.FlagResIndexToken", "ResourceId", "public.FlagRes");
            DropForeignKey("public.FlagResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.FlagResIndexString", "ResourceId", "public.FlagRes");
            DropForeignKey("public.FlagResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.FlagResIndexReference", "ResourceId", "public.FlagRes");
            DropForeignKey("public.FlagResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.FlagResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.FlagResIndexQuantity", "ResourceId", "public.FlagRes");
            DropForeignKey("public.FlagResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.FlagResIndexDateTime", "ResourceId", "public.FlagRes");
            DropForeignKey("public.FlagResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.FlagRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.FamilyMemberHistoryResIndexUri", "ResourceId", "public.FamilyMemberHistoryRes");
            DropForeignKey("public.FamilyMemberHistoryResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.FamilyMemberHistoryResIndexToken", "ResourceId", "public.FamilyMemberHistoryRes");
            DropForeignKey("public.FamilyMemberHistoryResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.FamilyMemberHistoryResIndexString", "ResourceId", "public.FamilyMemberHistoryRes");
            DropForeignKey("public.FamilyMemberHistoryResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.FamilyMemberHistoryResIndexReference", "ResourceId", "public.FamilyMemberHistoryRes");
            DropForeignKey("public.FamilyMemberHistoryResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.FamilyMemberHistoryResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.FamilyMemberHistoryResIndexQuantity", "ResourceId", "public.FamilyMemberHistoryRes");
            DropForeignKey("public.FamilyMemberHistoryResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.FamilyMemberHistoryResIndexDateTime", "ResourceId", "public.FamilyMemberHistoryRes");
            DropForeignKey("public.FamilyMemberHistoryResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.FamilyMemberHistoryRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.ExplanationOfBenefitResIndexUri", "ResourceId", "public.ExplanationOfBenefitRes");
            DropForeignKey("public.ExplanationOfBenefitResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ExplanationOfBenefitResIndexToken", "ResourceId", "public.ExplanationOfBenefitRes");
            DropForeignKey("public.ExplanationOfBenefitResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ExplanationOfBenefitResIndexString", "ResourceId", "public.ExplanationOfBenefitRes");
            DropForeignKey("public.ExplanationOfBenefitResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ExplanationOfBenefitResIndexReference", "ResourceId", "public.ExplanationOfBenefitRes");
            DropForeignKey("public.ExplanationOfBenefitResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ExplanationOfBenefitResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.ExplanationOfBenefitResIndexQuantity", "ResourceId", "public.ExplanationOfBenefitRes");
            DropForeignKey("public.ExplanationOfBenefitResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ExplanationOfBenefitResIndexDateTime", "ResourceId", "public.ExplanationOfBenefitRes");
            DropForeignKey("public.ExplanationOfBenefitResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ExplanationOfBenefitRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.ExpansionProfileResIndexUri", "ResourceId", "public.ExpansionProfileRes");
            DropForeignKey("public.ExpansionProfileResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ExpansionProfileResIndexToken", "ResourceId", "public.ExpansionProfileRes");
            DropForeignKey("public.ExpansionProfileResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ExpansionProfileResIndexString", "ResourceId", "public.ExpansionProfileRes");
            DropForeignKey("public.ExpansionProfileResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ExpansionProfileResIndexReference", "ResourceId", "public.ExpansionProfileRes");
            DropForeignKey("public.ExpansionProfileResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ExpansionProfileResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.ExpansionProfileResIndexQuantity", "ResourceId", "public.ExpansionProfileRes");
            DropForeignKey("public.ExpansionProfileResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ExpansionProfileResIndexDateTime", "ResourceId", "public.ExpansionProfileRes");
            DropForeignKey("public.ExpansionProfileResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ExpansionProfileRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.EpisodeOfCareResIndexUri", "ResourceId", "public.EpisodeOfCareRes");
            DropForeignKey("public.EpisodeOfCareResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EpisodeOfCareResIndexToken", "ResourceId", "public.EpisodeOfCareRes");
            DropForeignKey("public.EpisodeOfCareResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EpisodeOfCareResIndexString", "ResourceId", "public.EpisodeOfCareRes");
            DropForeignKey("public.EpisodeOfCareResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EpisodeOfCareResIndexReference", "ResourceId", "public.EpisodeOfCareRes");
            DropForeignKey("public.EpisodeOfCareResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EpisodeOfCareResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.EpisodeOfCareResIndexQuantity", "ResourceId", "public.EpisodeOfCareRes");
            DropForeignKey("public.EpisodeOfCareResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EpisodeOfCareResIndexDateTime", "ResourceId", "public.EpisodeOfCareRes");
            DropForeignKey("public.EpisodeOfCareResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EpisodeOfCareRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.EnrollmentResponseResIndexUri", "ResourceId", "public.EnrollmentResponseRes");
            DropForeignKey("public.EnrollmentResponseResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EnrollmentResponseResIndexToken", "ResourceId", "public.EnrollmentResponseRes");
            DropForeignKey("public.EnrollmentResponseResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EnrollmentResponseResIndexString", "ResourceId", "public.EnrollmentResponseRes");
            DropForeignKey("public.EnrollmentResponseResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EnrollmentResponseResIndexReference", "ResourceId", "public.EnrollmentResponseRes");
            DropForeignKey("public.EnrollmentResponseResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EnrollmentResponseResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.EnrollmentResponseResIndexQuantity", "ResourceId", "public.EnrollmentResponseRes");
            DropForeignKey("public.EnrollmentResponseResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EnrollmentResponseResIndexDateTime", "ResourceId", "public.EnrollmentResponseRes");
            DropForeignKey("public.EnrollmentResponseResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EnrollmentResponseRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.EnrollmentRequestResIndexUri", "ResourceId", "public.EnrollmentRequestRes");
            DropForeignKey("public.EnrollmentRequestResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EnrollmentRequestResIndexToken", "ResourceId", "public.EnrollmentRequestRes");
            DropForeignKey("public.EnrollmentRequestResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EnrollmentRequestResIndexString", "ResourceId", "public.EnrollmentRequestRes");
            DropForeignKey("public.EnrollmentRequestResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EnrollmentRequestResIndexReference", "ResourceId", "public.EnrollmentRequestRes");
            DropForeignKey("public.EnrollmentRequestResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EnrollmentRequestResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.EnrollmentRequestResIndexQuantity", "ResourceId", "public.EnrollmentRequestRes");
            DropForeignKey("public.EnrollmentRequestResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EnrollmentRequestResIndexDateTime", "ResourceId", "public.EnrollmentRequestRes");
            DropForeignKey("public.EnrollmentRequestResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EnrollmentRequestRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.EndpointResIndexUri", "ResourceId", "public.EndpointRes");
            DropForeignKey("public.EndpointResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EndpointResIndexToken", "ResourceId", "public.EndpointRes");
            DropForeignKey("public.EndpointResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EndpointResIndexString", "ResourceId", "public.EndpointRes");
            DropForeignKey("public.EndpointResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EndpointResIndexReference", "ResourceId", "public.EndpointRes");
            DropForeignKey("public.EndpointResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EndpointResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.EndpointResIndexQuantity", "ResourceId", "public.EndpointRes");
            DropForeignKey("public.EndpointResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EndpointResIndexDateTime", "ResourceId", "public.EndpointRes");
            DropForeignKey("public.EndpointResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EndpointRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.EncounterResIndexUri", "ResourceId", "public.EncounterRes");
            DropForeignKey("public.EncounterResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EncounterResIndexToken", "ResourceId", "public.EncounterRes");
            DropForeignKey("public.EncounterResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EncounterResIndexString", "ResourceId", "public.EncounterRes");
            DropForeignKey("public.EncounterResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EncounterResIndexReference", "ResourceId", "public.EncounterRes");
            DropForeignKey("public.EncounterResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EncounterResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.EncounterResIndexQuantity", "ResourceId", "public.EncounterRes");
            DropForeignKey("public.EncounterResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EncounterResIndexDateTime", "ResourceId", "public.EncounterRes");
            DropForeignKey("public.EncounterResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EncounterRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.EligibilityResponseResIndexUri", "ResourceId", "public.EligibilityResponseRes");
            DropForeignKey("public.EligibilityResponseResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EligibilityResponseResIndexToken", "ResourceId", "public.EligibilityResponseRes");
            DropForeignKey("public.EligibilityResponseResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EligibilityResponseResIndexString", "ResourceId", "public.EligibilityResponseRes");
            DropForeignKey("public.EligibilityResponseResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EligibilityResponseResIndexReference", "ResourceId", "public.EligibilityResponseRes");
            DropForeignKey("public.EligibilityResponseResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EligibilityResponseResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.EligibilityResponseResIndexQuantity", "ResourceId", "public.EligibilityResponseRes");
            DropForeignKey("public.EligibilityResponseResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EligibilityResponseResIndexDateTime", "ResourceId", "public.EligibilityResponseRes");
            DropForeignKey("public.EligibilityResponseResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EligibilityResponseRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.EligibilityRequestResIndexUri", "ResourceId", "public.EligibilityRequestRes");
            DropForeignKey("public.EligibilityRequestResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EligibilityRequestResIndexToken", "ResourceId", "public.EligibilityRequestRes");
            DropForeignKey("public.EligibilityRequestResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EligibilityRequestResIndexString", "ResourceId", "public.EligibilityRequestRes");
            DropForeignKey("public.EligibilityRequestResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EligibilityRequestResIndexReference", "ResourceId", "public.EligibilityRequestRes");
            DropForeignKey("public.EligibilityRequestResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EligibilityRequestResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.EligibilityRequestResIndexQuantity", "ResourceId", "public.EligibilityRequestRes");
            DropForeignKey("public.EligibilityRequestResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EligibilityRequestResIndexDateTime", "ResourceId", "public.EligibilityRequestRes");
            DropForeignKey("public.EligibilityRequestResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.EligibilityRequestRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.DocumentReferenceResIndexUri", "ResourceId", "public.DocumentReferenceRes");
            DropForeignKey("public.DocumentReferenceResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DocumentReferenceResIndexToken", "ResourceId", "public.DocumentReferenceRes");
            DropForeignKey("public.DocumentReferenceResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DocumentReferenceResIndexString", "ResourceId", "public.DocumentReferenceRes");
            DropForeignKey("public.DocumentReferenceResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DocumentReferenceResIndexReference", "ResourceId", "public.DocumentReferenceRes");
            DropForeignKey("public.DocumentReferenceResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DocumentReferenceResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.DocumentReferenceResIndexQuantity", "ResourceId", "public.DocumentReferenceRes");
            DropForeignKey("public.DocumentReferenceResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DocumentReferenceResIndexDateTime", "ResourceId", "public.DocumentReferenceRes");
            DropForeignKey("public.DocumentReferenceResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DocumentReferenceRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.DocumentManifestResIndexUri", "ResourceId", "public.DocumentManifestRes");
            DropForeignKey("public.DocumentManifestResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DocumentManifestResIndexToken", "ResourceId", "public.DocumentManifestRes");
            DropForeignKey("public.DocumentManifestResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DocumentManifestResIndexString", "ResourceId", "public.DocumentManifestRes");
            DropForeignKey("public.DocumentManifestResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DocumentManifestResIndexReference", "ResourceId", "public.DocumentManifestRes");
            DropForeignKey("public.DocumentManifestResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DocumentManifestResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.DocumentManifestResIndexQuantity", "ResourceId", "public.DocumentManifestRes");
            DropForeignKey("public.DocumentManifestResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DocumentManifestResIndexDateTime", "ResourceId", "public.DocumentManifestRes");
            DropForeignKey("public.DocumentManifestResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DocumentManifestRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.DiagnosticReportResIndexUri", "ResourceId", "public.DiagnosticReportRes");
            DropForeignKey("public.DiagnosticReportResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DiagnosticReportResIndexToken", "ResourceId", "public.DiagnosticReportRes");
            DropForeignKey("public.DiagnosticReportResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DiagnosticReportResIndexString", "ResourceId", "public.DiagnosticReportRes");
            DropForeignKey("public.DiagnosticReportResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DiagnosticReportResIndexReference", "ResourceId", "public.DiagnosticReportRes");
            DropForeignKey("public.DiagnosticReportResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DiagnosticReportResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.DiagnosticReportResIndexQuantity", "ResourceId", "public.DiagnosticReportRes");
            DropForeignKey("public.DiagnosticReportResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DiagnosticReportResIndexDateTime", "ResourceId", "public.DiagnosticReportRes");
            DropForeignKey("public.DiagnosticReportResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DiagnosticReportRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.DeviceUseStatementResIndexUri", "ResourceId", "public.DeviceUseStatementRes");
            DropForeignKey("public.DeviceUseStatementResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DeviceUseStatementResIndexToken", "ResourceId", "public.DeviceUseStatementRes");
            DropForeignKey("public.DeviceUseStatementResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DeviceUseStatementResIndexString", "ResourceId", "public.DeviceUseStatementRes");
            DropForeignKey("public.DeviceUseStatementResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DeviceUseStatementResIndexReference", "ResourceId", "public.DeviceUseStatementRes");
            DropForeignKey("public.DeviceUseStatementResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DeviceUseStatementResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.DeviceUseStatementResIndexQuantity", "ResourceId", "public.DeviceUseStatementRes");
            DropForeignKey("public.DeviceUseStatementResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DeviceUseStatementResIndexDateTime", "ResourceId", "public.DeviceUseStatementRes");
            DropForeignKey("public.DeviceUseStatementResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DeviceUseStatementRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.DeviceRequestResIndexUri", "ResourceId", "public.DeviceRequestRes");
            DropForeignKey("public.DeviceRequestResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DeviceRequestResIndexToken", "ResourceId", "public.DeviceRequestRes");
            DropForeignKey("public.DeviceRequestResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DeviceRequestResIndexString", "ResourceId", "public.DeviceRequestRes");
            DropForeignKey("public.DeviceRequestResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DeviceRequestResIndexReference", "ResourceId", "public.DeviceRequestRes");
            DropForeignKey("public.DeviceRequestResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DeviceRequestResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.DeviceRequestResIndexQuantity", "ResourceId", "public.DeviceRequestRes");
            DropForeignKey("public.DeviceRequestResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DeviceRequestResIndexDateTime", "ResourceId", "public.DeviceRequestRes");
            DropForeignKey("public.DeviceRequestResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DeviceRequestRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.DeviceMetricResIndexUri", "ResourceId", "public.DeviceMetricRes");
            DropForeignKey("public.DeviceMetricResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DeviceMetricResIndexToken", "ResourceId", "public.DeviceMetricRes");
            DropForeignKey("public.DeviceMetricResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DeviceMetricResIndexString", "ResourceId", "public.DeviceMetricRes");
            DropForeignKey("public.DeviceMetricResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DeviceMetricResIndexReference", "ResourceId", "public.DeviceMetricRes");
            DropForeignKey("public.DeviceMetricResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DeviceMetricResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.DeviceMetricResIndexQuantity", "ResourceId", "public.DeviceMetricRes");
            DropForeignKey("public.DeviceMetricResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DeviceMetricResIndexDateTime", "ResourceId", "public.DeviceMetricRes");
            DropForeignKey("public.DeviceMetricResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DeviceMetricRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.DeviceResIndexUri", "ResourceId", "public.DeviceRes");
            DropForeignKey("public.DeviceResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DeviceResIndexToken", "ResourceId", "public.DeviceRes");
            DropForeignKey("public.DeviceResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DeviceResIndexString", "ResourceId", "public.DeviceRes");
            DropForeignKey("public.DeviceResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DeviceResIndexReference", "ResourceId", "public.DeviceRes");
            DropForeignKey("public.DeviceResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DeviceResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.DeviceResIndexQuantity", "ResourceId", "public.DeviceRes");
            DropForeignKey("public.DeviceResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DeviceResIndexDateTime", "ResourceId", "public.DeviceRes");
            DropForeignKey("public.DeviceResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DeviceRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.DeviceComponentResIndexUri", "ResourceId", "public.DeviceComponentRes");
            DropForeignKey("public.DeviceComponentResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DeviceComponentResIndexToken", "ResourceId", "public.DeviceComponentRes");
            DropForeignKey("public.DeviceComponentResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DeviceComponentResIndexString", "ResourceId", "public.DeviceComponentRes");
            DropForeignKey("public.DeviceComponentResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DeviceComponentResIndexReference", "ResourceId", "public.DeviceComponentRes");
            DropForeignKey("public.DeviceComponentResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DeviceComponentResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.DeviceComponentResIndexQuantity", "ResourceId", "public.DeviceComponentRes");
            DropForeignKey("public.DeviceComponentResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DeviceComponentResIndexDateTime", "ResourceId", "public.DeviceComponentRes");
            DropForeignKey("public.DeviceComponentResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DeviceComponentRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.DetectedIssueResIndexUri", "ResourceId", "public.DetectedIssueRes");
            DropForeignKey("public.DetectedIssueResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DetectedIssueResIndexToken", "ResourceId", "public.DetectedIssueRes");
            DropForeignKey("public.DetectedIssueResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DetectedIssueResIndexString", "ResourceId", "public.DetectedIssueRes");
            DropForeignKey("public.DetectedIssueResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DetectedIssueResIndexReference", "ResourceId", "public.DetectedIssueRes");
            DropForeignKey("public.DetectedIssueResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DetectedIssueResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.DetectedIssueResIndexQuantity", "ResourceId", "public.DetectedIssueRes");
            DropForeignKey("public.DetectedIssueResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DetectedIssueResIndexDateTime", "ResourceId", "public.DetectedIssueRes");
            DropForeignKey("public.DetectedIssueResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DetectedIssueRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.DataElementResIndexUri", "ResourceId", "public.DataElementRes");
            DropForeignKey("public.DataElementResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DataElementResIndexToken", "ResourceId", "public.DataElementRes");
            DropForeignKey("public.DataElementResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DataElementResIndexString", "ResourceId", "public.DataElementRes");
            DropForeignKey("public.DataElementResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DataElementResIndexReference", "ResourceId", "public.DataElementRes");
            DropForeignKey("public.DataElementResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DataElementResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.DataElementResIndexQuantity", "ResourceId", "public.DataElementRes");
            DropForeignKey("public.DataElementResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DataElementResIndexDateTime", "ResourceId", "public.DataElementRes");
            DropForeignKey("public.DataElementResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.DataElementRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.CoverageResIndexUri", "ResourceId", "public.CoverageRes");
            DropForeignKey("public.CoverageResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CoverageResIndexToken", "ResourceId", "public.CoverageRes");
            DropForeignKey("public.CoverageResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CoverageResIndexString", "ResourceId", "public.CoverageRes");
            DropForeignKey("public.CoverageResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CoverageResIndexReference", "ResourceId", "public.CoverageRes");
            DropForeignKey("public.CoverageResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CoverageResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.CoverageResIndexQuantity", "ResourceId", "public.CoverageRes");
            DropForeignKey("public.CoverageResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CoverageResIndexDateTime", "ResourceId", "public.CoverageRes");
            DropForeignKey("public.CoverageResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CoverageRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.ContractResIndexUri", "ResourceId", "public.ContractRes");
            DropForeignKey("public.ContractResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ContractResIndexToken", "ResourceId", "public.ContractRes");
            DropForeignKey("public.ContractResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ContractResIndexString", "ResourceId", "public.ContractRes");
            DropForeignKey("public.ContractResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ContractResIndexReference", "ResourceId", "public.ContractRes");
            DropForeignKey("public.ContractResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ContractResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.ContractResIndexQuantity", "ResourceId", "public.ContractRes");
            DropForeignKey("public.ContractResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ContractResIndexDateTime", "ResourceId", "public.ContractRes");
            DropForeignKey("public.ContractResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ContractRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.ConsentResIndexUri", "ResourceId", "public.ConsentRes");
            DropForeignKey("public.ConsentResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ConsentResIndexToken", "ResourceId", "public.ConsentRes");
            DropForeignKey("public.ConsentResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ConsentResIndexString", "ResourceId", "public.ConsentRes");
            DropForeignKey("public.ConsentResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ConsentResIndexReference", "ResourceId", "public.ConsentRes");
            DropForeignKey("public.ConsentResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ConsentResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.ConsentResIndexQuantity", "ResourceId", "public.ConsentRes");
            DropForeignKey("public.ConsentResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ConsentResIndexDateTime", "ResourceId", "public.ConsentRes");
            DropForeignKey("public.ConsentResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ConsentRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.ConditionResIndexUri", "ResourceId", "public.ConditionRes");
            DropForeignKey("public.ConditionResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ConditionResIndexToken", "ResourceId", "public.ConditionRes");
            DropForeignKey("public.ConditionResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ConditionResIndexString", "ResourceId", "public.ConditionRes");
            DropForeignKey("public.ConditionResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ConditionResIndexReference", "ResourceId", "public.ConditionRes");
            DropForeignKey("public.ConditionResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ConditionResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.ConditionResIndexQuantity", "ResourceId", "public.ConditionRes");
            DropForeignKey("public.ConditionResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ConditionResIndexDateTime", "ResourceId", "public.ConditionRes");
            DropForeignKey("public.ConditionResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ConditionRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.ConceptMapResIndexUri", "ResourceId", "public.ConceptMapRes");
            DropForeignKey("public.ConceptMapResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ConceptMapResIndexToken", "ResourceId", "public.ConceptMapRes");
            DropForeignKey("public.ConceptMapResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ConceptMapResIndexString", "ResourceId", "public.ConceptMapRes");
            DropForeignKey("public.ConceptMapResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ConceptMapResIndexReference", "ResourceId", "public.ConceptMapRes");
            DropForeignKey("public.ConceptMapResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ConceptMapResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.ConceptMapResIndexQuantity", "ResourceId", "public.ConceptMapRes");
            DropForeignKey("public.ConceptMapResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ConceptMapResIndexDateTime", "ResourceId", "public.ConceptMapRes");
            DropForeignKey("public.ConceptMapResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ConceptMapRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.CompositionResIndexUri", "ResourceId", "public.CompositionRes");
            DropForeignKey("public.CompositionResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CompositionResIndexToken", "ResourceId", "public.CompositionRes");
            DropForeignKey("public.CompositionResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CompositionResIndexString", "ResourceId", "public.CompositionRes");
            DropForeignKey("public.CompositionResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CompositionResIndexReference", "ResourceId", "public.CompositionRes");
            DropForeignKey("public.CompositionResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CompositionResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.CompositionResIndexQuantity", "ResourceId", "public.CompositionRes");
            DropForeignKey("public.CompositionResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CompositionResIndexDateTime", "ResourceId", "public.CompositionRes");
            DropForeignKey("public.CompositionResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CompositionRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.CompartmentDefinitionResIndexUri", "ResourceId", "public.CompartmentDefinitionRes");
            DropForeignKey("public.CompartmentDefinitionResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CompartmentDefinitionResIndexToken", "ResourceId", "public.CompartmentDefinitionRes");
            DropForeignKey("public.CompartmentDefinitionResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CompartmentDefinitionResIndexString", "ResourceId", "public.CompartmentDefinitionRes");
            DropForeignKey("public.CompartmentDefinitionResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CompartmentDefinitionResIndexReference", "ResourceId", "public.CompartmentDefinitionRes");
            DropForeignKey("public.CompartmentDefinitionResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CompartmentDefinitionResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.CompartmentDefinitionResIndexQuantity", "ResourceId", "public.CompartmentDefinitionRes");
            DropForeignKey("public.CompartmentDefinitionResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CompartmentDefinitionResIndexDateTime", "ResourceId", "public.CompartmentDefinitionRes");
            DropForeignKey("public.CompartmentDefinitionResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CompartmentDefinitionRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.CommunicationRequestResIndexUri", "ResourceId", "public.CommunicationRequestRes");
            DropForeignKey("public.CommunicationRequestResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CommunicationRequestResIndexToken", "ResourceId", "public.CommunicationRequestRes");
            DropForeignKey("public.CommunicationRequestResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CommunicationRequestResIndexString", "ResourceId", "public.CommunicationRequestRes");
            DropForeignKey("public.CommunicationRequestResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CommunicationRequestResIndexReference", "ResourceId", "public.CommunicationRequestRes");
            DropForeignKey("public.CommunicationRequestResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CommunicationRequestResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.CommunicationRequestResIndexQuantity", "ResourceId", "public.CommunicationRequestRes");
            DropForeignKey("public.CommunicationRequestResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CommunicationRequestResIndexDateTime", "ResourceId", "public.CommunicationRequestRes");
            DropForeignKey("public.CommunicationRequestResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CommunicationRequestRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.CommunicationResIndexUri", "ResourceId", "public.CommunicationRes");
            DropForeignKey("public.CommunicationResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CommunicationResIndexToken", "ResourceId", "public.CommunicationRes");
            DropForeignKey("public.CommunicationResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CommunicationResIndexString", "ResourceId", "public.CommunicationRes");
            DropForeignKey("public.CommunicationResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CommunicationResIndexReference", "ResourceId", "public.CommunicationRes");
            DropForeignKey("public.CommunicationResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CommunicationResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.CommunicationResIndexQuantity", "ResourceId", "public.CommunicationRes");
            DropForeignKey("public.CommunicationResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CommunicationResIndexDateTime", "ResourceId", "public.CommunicationRes");
            DropForeignKey("public.CommunicationResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CommunicationRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.CodeSystemResIndexUri", "ResourceId", "public.CodeSystemRes");
            DropForeignKey("public.CodeSystemResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CodeSystemResIndexToken", "ResourceId", "public.CodeSystemRes");
            DropForeignKey("public.CodeSystemResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CodeSystemResIndexString", "ResourceId", "public.CodeSystemRes");
            DropForeignKey("public.CodeSystemResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CodeSystemResIndexReference", "ResourceId", "public.CodeSystemRes");
            DropForeignKey("public.CodeSystemResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CodeSystemResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.CodeSystemResIndexQuantity", "ResourceId", "public.CodeSystemRes");
            DropForeignKey("public.CodeSystemResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CodeSystemResIndexDateTime", "ResourceId", "public.CodeSystemRes");
            DropForeignKey("public.CodeSystemResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CodeSystemRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.ClinicalImpressionResIndexUri", "ResourceId", "public.ClinicalImpressionRes");
            DropForeignKey("public.ClinicalImpressionResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ClinicalImpressionResIndexToken", "ResourceId", "public.ClinicalImpressionRes");
            DropForeignKey("public.ClinicalImpressionResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ClinicalImpressionResIndexString", "ResourceId", "public.ClinicalImpressionRes");
            DropForeignKey("public.ClinicalImpressionResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ClinicalImpressionResIndexReference", "ResourceId", "public.ClinicalImpressionRes");
            DropForeignKey("public.ClinicalImpressionResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ClinicalImpressionResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.ClinicalImpressionResIndexQuantity", "ResourceId", "public.ClinicalImpressionRes");
            DropForeignKey("public.ClinicalImpressionResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ClinicalImpressionResIndexDateTime", "ResourceId", "public.ClinicalImpressionRes");
            DropForeignKey("public.ClinicalImpressionResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ClinicalImpressionRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.ClaimResponseResIndexUri", "ResourceId", "public.ClaimResponseRes");
            DropForeignKey("public.ClaimResponseResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ClaimResponseResIndexToken", "ResourceId", "public.ClaimResponseRes");
            DropForeignKey("public.ClaimResponseResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ClaimResponseResIndexString", "ResourceId", "public.ClaimResponseRes");
            DropForeignKey("public.ClaimResponseResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ClaimResponseResIndexReference", "ResourceId", "public.ClaimResponseRes");
            DropForeignKey("public.ClaimResponseResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ClaimResponseResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.ClaimResponseResIndexQuantity", "ResourceId", "public.ClaimResponseRes");
            DropForeignKey("public.ClaimResponseResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ClaimResponseResIndexDateTime", "ResourceId", "public.ClaimResponseRes");
            DropForeignKey("public.ClaimResponseResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ClaimResponseRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.ClaimResIndexUri", "ResourceId", "public.ClaimRes");
            DropForeignKey("public.ClaimResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ClaimResIndexToken", "ResourceId", "public.ClaimRes");
            DropForeignKey("public.ClaimResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ClaimResIndexString", "ResourceId", "public.ClaimRes");
            DropForeignKey("public.ClaimResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ClaimResIndexReference", "ResourceId", "public.ClaimRes");
            DropForeignKey("public.ClaimResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ClaimResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.ClaimResIndexQuantity", "ResourceId", "public.ClaimRes");
            DropForeignKey("public.ClaimResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ClaimResIndexDateTime", "ResourceId", "public.ClaimRes");
            DropForeignKey("public.ClaimResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ClaimRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.ChargeItemResIndexUri", "ResourceId", "public.ChargeItemRes");
            DropForeignKey("public.ChargeItemResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ChargeItemResIndexToken", "ResourceId", "public.ChargeItemRes");
            DropForeignKey("public.ChargeItemResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ChargeItemResIndexString", "ResourceId", "public.ChargeItemRes");
            DropForeignKey("public.ChargeItemResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ChargeItemResIndexReference", "ResourceId", "public.ChargeItemRes");
            DropForeignKey("public.ChargeItemResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ChargeItemResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.ChargeItemResIndexQuantity", "ResourceId", "public.ChargeItemRes");
            DropForeignKey("public.ChargeItemResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ChargeItemResIndexDateTime", "ResourceId", "public.ChargeItemRes");
            DropForeignKey("public.ChargeItemResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ChargeItemRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.CareTeamResIndexUri", "ResourceId", "public.CareTeamRes");
            DropForeignKey("public.CareTeamResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CareTeamResIndexToken", "ResourceId", "public.CareTeamRes");
            DropForeignKey("public.CareTeamResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CareTeamResIndexString", "ResourceId", "public.CareTeamRes");
            DropForeignKey("public.CareTeamResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CareTeamResIndexReference", "ResourceId", "public.CareTeamRes");
            DropForeignKey("public.CareTeamResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CareTeamResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.CareTeamResIndexQuantity", "ResourceId", "public.CareTeamRes");
            DropForeignKey("public.CareTeamResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CareTeamResIndexDateTime", "ResourceId", "public.CareTeamRes");
            DropForeignKey("public.CareTeamResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CareTeamRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.CarePlanResIndexUri", "ResourceId", "public.CarePlanRes");
            DropForeignKey("public.CarePlanResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CarePlanResIndexToken", "ResourceId", "public.CarePlanRes");
            DropForeignKey("public.CarePlanResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CarePlanResIndexString", "ResourceId", "public.CarePlanRes");
            DropForeignKey("public.CarePlanResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CarePlanResIndexReference", "ResourceId", "public.CarePlanRes");
            DropForeignKey("public.CarePlanResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CarePlanResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.CarePlanResIndexQuantity", "ResourceId", "public.CarePlanRes");
            DropForeignKey("public.CarePlanResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CarePlanResIndexDateTime", "ResourceId", "public.CarePlanRes");
            DropForeignKey("public.CarePlanResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CarePlanRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.CapabilityStatementResIndexUri", "ResourceId", "public.CapabilityStatementRes");
            DropForeignKey("public.CapabilityStatementResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CapabilityStatementResIndexToken", "ResourceId", "public.CapabilityStatementRes");
            DropForeignKey("public.CapabilityStatementResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CapabilityStatementResIndexString", "ResourceId", "public.CapabilityStatementRes");
            DropForeignKey("public.CapabilityStatementResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CapabilityStatementResIndexReference", "ResourceId", "public.CapabilityStatementRes");
            DropForeignKey("public.CapabilityStatementResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CapabilityStatementResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.CapabilityStatementResIndexQuantity", "ResourceId", "public.CapabilityStatementRes");
            DropForeignKey("public.CapabilityStatementResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CapabilityStatementResIndexDateTime", "ResourceId", "public.CapabilityStatementRes");
            DropForeignKey("public.CapabilityStatementResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.CapabilityStatementRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.BundleResIndexUri", "ResourceId", "public.BundleRes");
            DropForeignKey("public.BundleResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.BundleResIndexToken", "ResourceId", "public.BundleRes");
            DropForeignKey("public.BundleResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.BundleResIndexString", "ResourceId", "public.BundleRes");
            DropForeignKey("public.BundleResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.BundleResIndexReference", "ResourceId", "public.BundleRes");
            DropForeignKey("public.BundleResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.BundleResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.BundleResIndexQuantity", "ResourceId", "public.BundleRes");
            DropForeignKey("public.BundleResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.BundleResIndexDateTime", "ResourceId", "public.BundleRes");
            DropForeignKey("public.BundleResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.BundleRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.BodySiteResIndexUri", "ResourceId", "public.BodySiteRes");
            DropForeignKey("public.BodySiteResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.BodySiteResIndexToken", "ResourceId", "public.BodySiteRes");
            DropForeignKey("public.BodySiteResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.BodySiteResIndexString", "ResourceId", "public.BodySiteRes");
            DropForeignKey("public.BodySiteResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.BodySiteResIndexReference", "ResourceId", "public.BodySiteRes");
            DropForeignKey("public.BodySiteResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.BodySiteResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.BodySiteResIndexQuantity", "ResourceId", "public.BodySiteRes");
            DropForeignKey("public.BodySiteResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.BodySiteResIndexDateTime", "ResourceId", "public.BodySiteRes");
            DropForeignKey("public.BodySiteResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.BodySiteRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.BinaryResIndexUri", "ResourceId", "public.BinaryRes");
            DropForeignKey("public.BinaryResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.BinaryResIndexToken", "ResourceId", "public.BinaryRes");
            DropForeignKey("public.BinaryResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.BinaryResIndexString", "ResourceId", "public.BinaryRes");
            DropForeignKey("public.BinaryResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.BinaryResIndexReference", "ResourceId", "public.BinaryRes");
            DropForeignKey("public.BinaryResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.BinaryResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.BinaryResIndexQuantity", "ResourceId", "public.BinaryRes");
            DropForeignKey("public.BinaryResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.BinaryResIndexDateTime", "ResourceId", "public.BinaryRes");
            DropForeignKey("public.BinaryResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.BinaryRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.BasicResIndexUri", "ResourceId", "public.BasicRes");
            DropForeignKey("public.BasicResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.BasicResIndexToken", "ResourceId", "public.BasicRes");
            DropForeignKey("public.BasicResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.BasicResIndexString", "ResourceId", "public.BasicRes");
            DropForeignKey("public.BasicResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.BasicResIndexReference", "ResourceId", "public.BasicRes");
            DropForeignKey("public.BasicResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.BasicResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.BasicResIndexQuantity", "ResourceId", "public.BasicRes");
            DropForeignKey("public.BasicResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.BasicResIndexDateTime", "ResourceId", "public.BasicRes");
            DropForeignKey("public.BasicResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.BasicRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.AuditEventResIndexUri", "ResourceId", "public.AuditEventRes");
            DropForeignKey("public.AuditEventResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.AuditEventResIndexToken", "ResourceId", "public.AuditEventRes");
            DropForeignKey("public.AuditEventResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.AuditEventResIndexString", "ResourceId", "public.AuditEventRes");
            DropForeignKey("public.AuditEventResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.AuditEventResIndexReference", "ResourceId", "public.AuditEventRes");
            DropForeignKey("public.AuditEventResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.AuditEventResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.AuditEventResIndexQuantity", "ResourceId", "public.AuditEventRes");
            DropForeignKey("public.AuditEventResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.AuditEventResIndexDateTime", "ResourceId", "public.AuditEventRes");
            DropForeignKey("public.AuditEventResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.AuditEventRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.AppointmentResponseResIndexUri", "ResourceId", "public.AppointmentResponseRes");
            DropForeignKey("public.AppointmentResponseResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.AppointmentResponseResIndexToken", "ResourceId", "public.AppointmentResponseRes");
            DropForeignKey("public.AppointmentResponseResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.AppointmentResponseResIndexString", "ResourceId", "public.AppointmentResponseRes");
            DropForeignKey("public.AppointmentResponseResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.AppointmentResponseResIndexReference", "ResourceId", "public.AppointmentResponseRes");
            DropForeignKey("public.AppointmentResponseResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.AppointmentResponseResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.AppointmentResponseResIndexQuantity", "ResourceId", "public.AppointmentResponseRes");
            DropForeignKey("public.AppointmentResponseResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.AppointmentResponseResIndexDateTime", "ResourceId", "public.AppointmentResponseRes");
            DropForeignKey("public.AppointmentResponseResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.AppointmentResponseRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.AppointmentResIndexUri", "ResourceId", "public.AppointmentRes");
            DropForeignKey("public.AppointmentResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.AppointmentResIndexToken", "ResourceId", "public.AppointmentRes");
            DropForeignKey("public.AppointmentResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.AppointmentResIndexString", "ResourceId", "public.AppointmentRes");
            DropForeignKey("public.AppointmentResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.AppointmentResIndexReference", "ResourceId", "public.AppointmentRes");
            DropForeignKey("public.AppointmentResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.AppointmentResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.AppointmentResIndexQuantity", "ResourceId", "public.AppointmentRes");
            DropForeignKey("public.AppointmentResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.AppointmentResIndexDateTime", "ResourceId", "public.AppointmentRes");
            DropForeignKey("public.AppointmentResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.AppointmentRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.AllergyIntoleranceResIndexUri", "ResourceId", "public.AllergyIntoleranceRes");
            DropForeignKey("public.AllergyIntoleranceResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.AllergyIntoleranceResIndexToken", "ResourceId", "public.AllergyIntoleranceRes");
            DropForeignKey("public.AllergyIntoleranceResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.AllergyIntoleranceResIndexString", "ResourceId", "public.AllergyIntoleranceRes");
            DropForeignKey("public.AllergyIntoleranceResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.AllergyIntoleranceResIndexReference", "ResourceId", "public.AllergyIntoleranceRes");
            DropForeignKey("public.AllergyIntoleranceResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.AllergyIntoleranceResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.AllergyIntoleranceResIndexQuantity", "ResourceId", "public.AllergyIntoleranceRes");
            DropForeignKey("public.AllergyIntoleranceResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.AllergyIntoleranceResIndexDateTime", "ResourceId", "public.AllergyIntoleranceRes");
            DropForeignKey("public.AllergyIntoleranceResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.AllergyIntoleranceRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.AdverseEventResIndexUri", "ResourceId", "public.AdverseEventRes");
            DropForeignKey("public.AdverseEventResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.AdverseEventResIndexToken", "ResourceId", "public.AdverseEventRes");
            DropForeignKey("public.AdverseEventResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.AdverseEventResIndexString", "ResourceId", "public.AdverseEventRes");
            DropForeignKey("public.AdverseEventResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.AdverseEventResIndexReference", "ResourceId", "public.AdverseEventRes");
            DropForeignKey("public.AdverseEventResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.AdverseEventResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.AdverseEventResIndexQuantity", "ResourceId", "public.AdverseEventRes");
            DropForeignKey("public.AdverseEventResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.AdverseEventResIndexDateTime", "ResourceId", "public.AdverseEventRes");
            DropForeignKey("public.AdverseEventResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.AdverseEventRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.ActivityDefinitionResIndexUri", "ResourceId", "public.ActivityDefinitionRes");
            DropForeignKey("public.ActivityDefinitionResIndexUri", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ActivityDefinitionResIndexToken", "ResourceId", "public.ActivityDefinitionRes");
            DropForeignKey("public.ActivityDefinitionResIndexToken", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ActivityDefinitionResIndexString", "ResourceId", "public.ActivityDefinitionRes");
            DropForeignKey("public.ActivityDefinitionResIndexString", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ActivityDefinitionResIndexReference", "ResourceId", "public.ActivityDefinitionRes");
            DropForeignKey("public.ActivityDefinitionResIndexReference", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ActivityDefinitionResIndexReference", "ReferenceServiceBaseUrlId", "public._BaseUrl");
            DropForeignKey("public.ActivityDefinitionResIndexQuantity", "ResourceId", "public.ActivityDefinitionRes");
            DropForeignKey("public.ActivityDefinitionResIndexQuantity", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ActivityDefinitionResIndexDateTime", "ResourceId", "public.ActivityDefinitionRes");
            DropForeignKey("public.ActivityDefinitionResIndexDateTime", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public._SParamResource", "ServiceSearchParameterId", "public._SearchParam");
            DropForeignKey("public.ActivityDefinitionRes", "FhirReleaseId", "public._FhirRelease");
            DropForeignKey("public.AccountRes", "FhirReleaseId", "public._FhirRelease");
            DropIndex("public._CompartmentRes", "ix_CompartmentId");
            DropIndex("public._Compartment", "ix_CompartmentCode");
            DropIndex("public.AccountResIndexUri", new[] { "ResourceId" });
            DropIndex("public.AccountResIndexUri", "ix_SearchParamId");
            DropIndex("public.AccountResIndexUri", "ix_Uri");
            DropIndex("public.AccountResIndexToken", new[] { "ResourceId" });
            DropIndex("public.AccountResIndexToken", "ix_SearchParamId");
            DropIndex("public.AccountResIndexToken", "ix_System");
            DropIndex("public.AccountResIndexToken", "ix_Code");
            DropIndex("public.AccountResIndexString", new[] { "ResourceId" });
            DropIndex("public.AccountResIndexString", "ix_SearchParamId");
            DropIndex("public.AccountResIndexString", "ix_String");
            DropIndex("public.AccountResIndexReference", new[] { "ResourceId" });
            DropIndex("public.AccountResIndexReference", "ix_SearchParamId");
            DropIndex("public.AccountResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.AccountResIndexReference", "ix_RefFhirId");
            DropIndex("public.AccountResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.AccountResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.AccountResIndexQuantity", "ix_System");
            DropIndex("public.AccountResIndexQuantity", "ix_Code");
            DropIndex("public.AccountResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.AccountResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.AccountResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.AccountResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.VisionPrescriptionResIndexUri", new[] { "ResourceId" });
            DropIndex("public.VisionPrescriptionResIndexUri", "ix_SearchParamId");
            DropIndex("public.VisionPrescriptionResIndexUri", "ix_Uri");
            DropIndex("public.VisionPrescriptionResIndexToken", new[] { "ResourceId" });
            DropIndex("public.VisionPrescriptionResIndexToken", "ix_SearchParamId");
            DropIndex("public.VisionPrescriptionResIndexToken", "ix_System");
            DropIndex("public.VisionPrescriptionResIndexToken", "ix_Code");
            DropIndex("public.VisionPrescriptionResIndexString", new[] { "ResourceId" });
            DropIndex("public.VisionPrescriptionResIndexString", "ix_SearchParamId");
            DropIndex("public.VisionPrescriptionResIndexString", "ix_String");
            DropIndex("public.VisionPrescriptionResIndexReference", new[] { "ResourceId" });
            DropIndex("public.VisionPrescriptionResIndexReference", "ix_SearchParamId");
            DropIndex("public.VisionPrescriptionResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.VisionPrescriptionResIndexReference", "ix_RefFhirId");
            DropIndex("public.VisionPrescriptionResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.VisionPrescriptionResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.VisionPrescriptionResIndexQuantity", "ix_System");
            DropIndex("public.VisionPrescriptionResIndexQuantity", "ix_Code");
            DropIndex("public.VisionPrescriptionResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.VisionPrescriptionResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.VisionPrescriptionResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.VisionPrescriptionResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.VisionPrescriptionRes", new[] { "FhirReleaseId" });
            DropIndex("public.VisionPrescriptionRes", "ix_LastUpdated");
            DropIndex("public.VisionPrescriptionRes", "ix_IsDeleted");
            DropIndex("public.VisionPrescriptionRes", "uq_FhirIdAndVersionId");
            DropIndex("public.VisionPrescriptionRes", "ix_IsCurrent");
            DropIndex("public.ValueSetResIndexUri", new[] { "ResourceId" });
            DropIndex("public.ValueSetResIndexUri", "ix_SearchParamId");
            DropIndex("public.ValueSetResIndexUri", "ix_Uri");
            DropIndex("public.ValueSetResIndexToken", new[] { "ResourceId" });
            DropIndex("public.ValueSetResIndexToken", "ix_SearchParamId");
            DropIndex("public.ValueSetResIndexToken", "ix_System");
            DropIndex("public.ValueSetResIndexToken", "ix_Code");
            DropIndex("public.ValueSetResIndexString", new[] { "ResourceId" });
            DropIndex("public.ValueSetResIndexString", "ix_SearchParamId");
            DropIndex("public.ValueSetResIndexString", "ix_String");
            DropIndex("public.ValueSetResIndexReference", new[] { "ResourceId" });
            DropIndex("public.ValueSetResIndexReference", "ix_SearchParamId");
            DropIndex("public.ValueSetResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.ValueSetResIndexReference", "ix_RefFhirId");
            DropIndex("public.ValueSetResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.ValueSetResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.ValueSetResIndexQuantity", "ix_System");
            DropIndex("public.ValueSetResIndexQuantity", "ix_Code");
            DropIndex("public.ValueSetResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.ValueSetResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.ValueSetResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.ValueSetResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.ValueSetRes", new[] { "FhirReleaseId" });
            DropIndex("public.ValueSetRes", "ix_LastUpdated");
            DropIndex("public.ValueSetRes", "ix_IsDeleted");
            DropIndex("public.ValueSetRes", "uq_FhirIdAndVersionId");
            DropIndex("public.ValueSetRes", "ix_IsCurrent");
            DropIndex("public.TestScriptResIndexUri", new[] { "ResourceId" });
            DropIndex("public.TestScriptResIndexUri", "ix_SearchParamId");
            DropIndex("public.TestScriptResIndexUri", "ix_Uri");
            DropIndex("public.TestScriptResIndexToken", new[] { "ResourceId" });
            DropIndex("public.TestScriptResIndexToken", "ix_SearchParamId");
            DropIndex("public.TestScriptResIndexToken", "ix_System");
            DropIndex("public.TestScriptResIndexToken", "ix_Code");
            DropIndex("public.TestScriptResIndexString", new[] { "ResourceId" });
            DropIndex("public.TestScriptResIndexString", "ix_SearchParamId");
            DropIndex("public.TestScriptResIndexString", "ix_String");
            DropIndex("public.TestScriptResIndexReference", new[] { "ResourceId" });
            DropIndex("public.TestScriptResIndexReference", "ix_SearchParamId");
            DropIndex("public.TestScriptResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.TestScriptResIndexReference", "ix_RefFhirId");
            DropIndex("public.TestScriptResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.TestScriptResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.TestScriptResIndexQuantity", "ix_System");
            DropIndex("public.TestScriptResIndexQuantity", "ix_Code");
            DropIndex("public.TestScriptResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.TestScriptResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.TestScriptResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.TestScriptResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.TestScriptRes", new[] { "FhirReleaseId" });
            DropIndex("public.TestScriptRes", "ix_LastUpdated");
            DropIndex("public.TestScriptRes", "ix_IsDeleted");
            DropIndex("public.TestScriptRes", "uq_FhirIdAndVersionId");
            DropIndex("public.TestScriptRes", "ix_IsCurrent");
            DropIndex("public.TestReportResIndexUri", new[] { "ResourceId" });
            DropIndex("public.TestReportResIndexUri", "ix_SearchParamId");
            DropIndex("public.TestReportResIndexUri", "ix_Uri");
            DropIndex("public.TestReportResIndexToken", new[] { "ResourceId" });
            DropIndex("public.TestReportResIndexToken", "ix_SearchParamId");
            DropIndex("public.TestReportResIndexToken", "ix_System");
            DropIndex("public.TestReportResIndexToken", "ix_Code");
            DropIndex("public.TestReportResIndexString", new[] { "ResourceId" });
            DropIndex("public.TestReportResIndexString", "ix_SearchParamId");
            DropIndex("public.TestReportResIndexString", "ix_String");
            DropIndex("public.TestReportResIndexReference", new[] { "ResourceId" });
            DropIndex("public.TestReportResIndexReference", "ix_SearchParamId");
            DropIndex("public.TestReportResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.TestReportResIndexReference", "ix_RefFhirId");
            DropIndex("public.TestReportResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.TestReportResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.TestReportResIndexQuantity", "ix_System");
            DropIndex("public.TestReportResIndexQuantity", "ix_Code");
            DropIndex("public.TestReportResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.TestReportResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.TestReportResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.TestReportResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.TestReportRes", new[] { "FhirReleaseId" });
            DropIndex("public.TestReportRes", "ix_LastUpdated");
            DropIndex("public.TestReportRes", "ix_IsDeleted");
            DropIndex("public.TestReportRes", "uq_FhirIdAndVersionId");
            DropIndex("public.TestReportRes", "ix_IsCurrent");
            DropIndex("public.TaskResIndexUri", new[] { "ResourceId" });
            DropIndex("public.TaskResIndexUri", "ix_SearchParamId");
            DropIndex("public.TaskResIndexUri", "ix_Uri");
            DropIndex("public.TaskResIndexToken", new[] { "ResourceId" });
            DropIndex("public.TaskResIndexToken", "ix_SearchParamId");
            DropIndex("public.TaskResIndexToken", "ix_System");
            DropIndex("public.TaskResIndexToken", "ix_Code");
            DropIndex("public.TaskResIndexString", new[] { "ResourceId" });
            DropIndex("public.TaskResIndexString", "ix_SearchParamId");
            DropIndex("public.TaskResIndexString", "ix_String");
            DropIndex("public.TaskResIndexReference", new[] { "ResourceId" });
            DropIndex("public.TaskResIndexReference", "ix_SearchParamId");
            DropIndex("public.TaskResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.TaskResIndexReference", "ix_RefFhirId");
            DropIndex("public.TaskResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.TaskResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.TaskResIndexQuantity", "ix_System");
            DropIndex("public.TaskResIndexQuantity", "ix_Code");
            DropIndex("public.TaskResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.TaskResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.TaskResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.TaskResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.TaskRes", new[] { "FhirReleaseId" });
            DropIndex("public.TaskRes", "ix_LastUpdated");
            DropIndex("public.TaskRes", "ix_IsDeleted");
            DropIndex("public.TaskRes", "uq_FhirIdAndVersionId");
            DropIndex("public.TaskRes", "ix_IsCurrent");
            DropIndex("public.SupplyRequestResIndexUri", new[] { "ResourceId" });
            DropIndex("public.SupplyRequestResIndexUri", "ix_SearchParamId");
            DropIndex("public.SupplyRequestResIndexUri", "ix_Uri");
            DropIndex("public.SupplyRequestResIndexToken", new[] { "ResourceId" });
            DropIndex("public.SupplyRequestResIndexToken", "ix_SearchParamId");
            DropIndex("public.SupplyRequestResIndexToken", "ix_System");
            DropIndex("public.SupplyRequestResIndexToken", "ix_Code");
            DropIndex("public.SupplyRequestResIndexString", new[] { "ResourceId" });
            DropIndex("public.SupplyRequestResIndexString", "ix_SearchParamId");
            DropIndex("public.SupplyRequestResIndexString", "ix_String");
            DropIndex("public.SupplyRequestResIndexReference", new[] { "ResourceId" });
            DropIndex("public.SupplyRequestResIndexReference", "ix_SearchParamId");
            DropIndex("public.SupplyRequestResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.SupplyRequestResIndexReference", "ix_RefFhirId");
            DropIndex("public.SupplyRequestResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.SupplyRequestResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.SupplyRequestResIndexQuantity", "ix_System");
            DropIndex("public.SupplyRequestResIndexQuantity", "ix_Code");
            DropIndex("public.SupplyRequestResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.SupplyRequestResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.SupplyRequestResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.SupplyRequestResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.SupplyRequestRes", new[] { "FhirReleaseId" });
            DropIndex("public.SupplyRequestRes", "ix_LastUpdated");
            DropIndex("public.SupplyRequestRes", "ix_IsDeleted");
            DropIndex("public.SupplyRequestRes", "uq_FhirIdAndVersionId");
            DropIndex("public.SupplyRequestRes", "ix_IsCurrent");
            DropIndex("public.SupplyDeliveryResIndexUri", new[] { "ResourceId" });
            DropIndex("public.SupplyDeliveryResIndexUri", "ix_SearchParamId");
            DropIndex("public.SupplyDeliveryResIndexUri", "ix_Uri");
            DropIndex("public.SupplyDeliveryResIndexToken", new[] { "ResourceId" });
            DropIndex("public.SupplyDeliveryResIndexToken", "ix_SearchParamId");
            DropIndex("public.SupplyDeliveryResIndexToken", "ix_System");
            DropIndex("public.SupplyDeliveryResIndexToken", "ix_Code");
            DropIndex("public.SupplyDeliveryResIndexString", new[] { "ResourceId" });
            DropIndex("public.SupplyDeliveryResIndexString", "ix_SearchParamId");
            DropIndex("public.SupplyDeliveryResIndexString", "ix_String");
            DropIndex("public.SupplyDeliveryResIndexReference", new[] { "ResourceId" });
            DropIndex("public.SupplyDeliveryResIndexReference", "ix_SearchParamId");
            DropIndex("public.SupplyDeliveryResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.SupplyDeliveryResIndexReference", "ix_RefFhirId");
            DropIndex("public.SupplyDeliveryResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.SupplyDeliveryResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.SupplyDeliveryResIndexQuantity", "ix_System");
            DropIndex("public.SupplyDeliveryResIndexQuantity", "ix_Code");
            DropIndex("public.SupplyDeliveryResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.SupplyDeliveryResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.SupplyDeliveryResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.SupplyDeliveryResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.SupplyDeliveryRes", new[] { "FhirReleaseId" });
            DropIndex("public.SupplyDeliveryRes", "ix_LastUpdated");
            DropIndex("public.SupplyDeliveryRes", "ix_IsDeleted");
            DropIndex("public.SupplyDeliveryRes", "uq_FhirIdAndVersionId");
            DropIndex("public.SupplyDeliveryRes", "ix_IsCurrent");
            DropIndex("public.SubstanceResIndexUri", new[] { "ResourceId" });
            DropIndex("public.SubstanceResIndexUri", "ix_SearchParamId");
            DropIndex("public.SubstanceResIndexUri", "ix_Uri");
            DropIndex("public.SubstanceResIndexToken", new[] { "ResourceId" });
            DropIndex("public.SubstanceResIndexToken", "ix_SearchParamId");
            DropIndex("public.SubstanceResIndexToken", "ix_System");
            DropIndex("public.SubstanceResIndexToken", "ix_Code");
            DropIndex("public.SubstanceResIndexString", new[] { "ResourceId" });
            DropIndex("public.SubstanceResIndexString", "ix_SearchParamId");
            DropIndex("public.SubstanceResIndexString", "ix_String");
            DropIndex("public.SubstanceResIndexReference", new[] { "ResourceId" });
            DropIndex("public.SubstanceResIndexReference", "ix_SearchParamId");
            DropIndex("public.SubstanceResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.SubstanceResIndexReference", "ix_RefFhirId");
            DropIndex("public.SubstanceResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.SubstanceResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.SubstanceResIndexQuantity", "ix_System");
            DropIndex("public.SubstanceResIndexQuantity", "ix_Code");
            DropIndex("public.SubstanceResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.SubstanceResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.SubstanceResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.SubstanceResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.SubstanceRes", new[] { "FhirReleaseId" });
            DropIndex("public.SubstanceRes", "ix_LastUpdated");
            DropIndex("public.SubstanceRes", "ix_IsDeleted");
            DropIndex("public.SubstanceRes", "uq_FhirIdAndVersionId");
            DropIndex("public.SubstanceRes", "ix_IsCurrent");
            DropIndex("public.SubscriptionResIndexUri", new[] { "ResourceId" });
            DropIndex("public.SubscriptionResIndexUri", "ix_SearchParamId");
            DropIndex("public.SubscriptionResIndexUri", "ix_Uri");
            DropIndex("public.SubscriptionResIndexToken", new[] { "ResourceId" });
            DropIndex("public.SubscriptionResIndexToken", "ix_SearchParamId");
            DropIndex("public.SubscriptionResIndexToken", "ix_System");
            DropIndex("public.SubscriptionResIndexToken", "ix_Code");
            DropIndex("public.SubscriptionResIndexString", new[] { "ResourceId" });
            DropIndex("public.SubscriptionResIndexString", "ix_SearchParamId");
            DropIndex("public.SubscriptionResIndexString", "ix_String");
            DropIndex("public.SubscriptionResIndexReference", new[] { "ResourceId" });
            DropIndex("public.SubscriptionResIndexReference", "ix_SearchParamId");
            DropIndex("public.SubscriptionResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.SubscriptionResIndexReference", "ix_RefFhirId");
            DropIndex("public.SubscriptionResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.SubscriptionResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.SubscriptionResIndexQuantity", "ix_System");
            DropIndex("public.SubscriptionResIndexQuantity", "ix_Code");
            DropIndex("public.SubscriptionResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.SubscriptionResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.SubscriptionResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.SubscriptionResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.SubscriptionRes", new[] { "FhirReleaseId" });
            DropIndex("public.SubscriptionRes", "ix_LastUpdated");
            DropIndex("public.SubscriptionRes", "ix_IsDeleted");
            DropIndex("public.SubscriptionRes", "uq_FhirIdAndVersionId");
            DropIndex("public.SubscriptionRes", "ix_IsCurrent");
            DropIndex("public.StructureMapResIndexUri", new[] { "ResourceId" });
            DropIndex("public.StructureMapResIndexUri", "ix_SearchParamId");
            DropIndex("public.StructureMapResIndexUri", "ix_Uri");
            DropIndex("public.StructureMapResIndexToken", new[] { "ResourceId" });
            DropIndex("public.StructureMapResIndexToken", "ix_SearchParamId");
            DropIndex("public.StructureMapResIndexToken", "ix_System");
            DropIndex("public.StructureMapResIndexToken", "ix_Code");
            DropIndex("public.StructureMapResIndexString", new[] { "ResourceId" });
            DropIndex("public.StructureMapResIndexString", "ix_SearchParamId");
            DropIndex("public.StructureMapResIndexString", "ix_String");
            DropIndex("public.StructureMapResIndexReference", new[] { "ResourceId" });
            DropIndex("public.StructureMapResIndexReference", "ix_SearchParamId");
            DropIndex("public.StructureMapResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.StructureMapResIndexReference", "ix_RefFhirId");
            DropIndex("public.StructureMapResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.StructureMapResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.StructureMapResIndexQuantity", "ix_System");
            DropIndex("public.StructureMapResIndexQuantity", "ix_Code");
            DropIndex("public.StructureMapResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.StructureMapResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.StructureMapResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.StructureMapResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.StructureMapRes", new[] { "FhirReleaseId" });
            DropIndex("public.StructureMapRes", "ix_LastUpdated");
            DropIndex("public.StructureMapRes", "ix_IsDeleted");
            DropIndex("public.StructureMapRes", "uq_FhirIdAndVersionId");
            DropIndex("public.StructureMapRes", "ix_IsCurrent");
            DropIndex("public.StructureDefinitionResIndexUri", new[] { "ResourceId" });
            DropIndex("public.StructureDefinitionResIndexUri", "ix_SearchParamId");
            DropIndex("public.StructureDefinitionResIndexUri", "ix_Uri");
            DropIndex("public.StructureDefinitionResIndexToken", new[] { "ResourceId" });
            DropIndex("public.StructureDefinitionResIndexToken", "ix_SearchParamId");
            DropIndex("public.StructureDefinitionResIndexToken", "ix_System");
            DropIndex("public.StructureDefinitionResIndexToken", "ix_Code");
            DropIndex("public.StructureDefinitionResIndexString", new[] { "ResourceId" });
            DropIndex("public.StructureDefinitionResIndexString", "ix_SearchParamId");
            DropIndex("public.StructureDefinitionResIndexString", "ix_String");
            DropIndex("public.StructureDefinitionResIndexReference", new[] { "ResourceId" });
            DropIndex("public.StructureDefinitionResIndexReference", "ix_SearchParamId");
            DropIndex("public.StructureDefinitionResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.StructureDefinitionResIndexReference", "ix_RefFhirId");
            DropIndex("public.StructureDefinitionResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.StructureDefinitionResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.StructureDefinitionResIndexQuantity", "ix_System");
            DropIndex("public.StructureDefinitionResIndexQuantity", "ix_Code");
            DropIndex("public.StructureDefinitionResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.StructureDefinitionResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.StructureDefinitionResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.StructureDefinitionResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.StructureDefinitionRes", new[] { "FhirReleaseId" });
            DropIndex("public.StructureDefinitionRes", "ix_LastUpdated");
            DropIndex("public.StructureDefinitionRes", "ix_IsDeleted");
            DropIndex("public.StructureDefinitionRes", "uq_FhirIdAndVersionId");
            DropIndex("public.StructureDefinitionRes", "ix_IsCurrent");
            DropIndex("public.SpecimenResIndexUri", new[] { "ResourceId" });
            DropIndex("public.SpecimenResIndexUri", "ix_SearchParamId");
            DropIndex("public.SpecimenResIndexUri", "ix_Uri");
            DropIndex("public.SpecimenResIndexToken", new[] { "ResourceId" });
            DropIndex("public.SpecimenResIndexToken", "ix_SearchParamId");
            DropIndex("public.SpecimenResIndexToken", "ix_System");
            DropIndex("public.SpecimenResIndexToken", "ix_Code");
            DropIndex("public.SpecimenResIndexString", new[] { "ResourceId" });
            DropIndex("public.SpecimenResIndexString", "ix_SearchParamId");
            DropIndex("public.SpecimenResIndexString", "ix_String");
            DropIndex("public.SpecimenResIndexReference", new[] { "ResourceId" });
            DropIndex("public.SpecimenResIndexReference", "ix_SearchParamId");
            DropIndex("public.SpecimenResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.SpecimenResIndexReference", "ix_RefFhirId");
            DropIndex("public.SpecimenResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.SpecimenResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.SpecimenResIndexQuantity", "ix_System");
            DropIndex("public.SpecimenResIndexQuantity", "ix_Code");
            DropIndex("public.SpecimenResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.SpecimenResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.SpecimenResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.SpecimenResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.SpecimenRes", new[] { "FhirReleaseId" });
            DropIndex("public.SpecimenRes", "ix_LastUpdated");
            DropIndex("public.SpecimenRes", "ix_IsDeleted");
            DropIndex("public.SpecimenRes", "uq_FhirIdAndVersionId");
            DropIndex("public.SpecimenRes", "ix_IsCurrent");
            DropIndex("public.SlotResIndexUri", new[] { "ResourceId" });
            DropIndex("public.SlotResIndexUri", "ix_SearchParamId");
            DropIndex("public.SlotResIndexUri", "ix_Uri");
            DropIndex("public.SlotResIndexToken", new[] { "ResourceId" });
            DropIndex("public.SlotResIndexToken", "ix_SearchParamId");
            DropIndex("public.SlotResIndexToken", "ix_System");
            DropIndex("public.SlotResIndexToken", "ix_Code");
            DropIndex("public.SlotResIndexString", new[] { "ResourceId" });
            DropIndex("public.SlotResIndexString", "ix_SearchParamId");
            DropIndex("public.SlotResIndexString", "ix_String");
            DropIndex("public.SlotResIndexReference", new[] { "ResourceId" });
            DropIndex("public.SlotResIndexReference", "ix_SearchParamId");
            DropIndex("public.SlotResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.SlotResIndexReference", "ix_RefFhirId");
            DropIndex("public.SlotResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.SlotResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.SlotResIndexQuantity", "ix_System");
            DropIndex("public.SlotResIndexQuantity", "ix_Code");
            DropIndex("public.SlotResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.SlotResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.SlotResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.SlotResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.SlotRes", new[] { "FhirReleaseId" });
            DropIndex("public.SlotRes", "ix_LastUpdated");
            DropIndex("public.SlotRes", "ix_IsDeleted");
            DropIndex("public.SlotRes", "uq_FhirIdAndVersionId");
            DropIndex("public.SlotRes", "ix_IsCurrent");
            DropIndex("public.ServiceDefinitionResIndexUri", new[] { "ResourceId" });
            DropIndex("public.ServiceDefinitionResIndexUri", "ix_SearchParamId");
            DropIndex("public.ServiceDefinitionResIndexUri", "ix_Uri");
            DropIndex("public.ServiceDefinitionResIndexToken", new[] { "ResourceId" });
            DropIndex("public.ServiceDefinitionResIndexToken", "ix_SearchParamId");
            DropIndex("public.ServiceDefinitionResIndexToken", "ix_System");
            DropIndex("public.ServiceDefinitionResIndexToken", "ix_Code");
            DropIndex("public.ServiceDefinitionResIndexString", new[] { "ResourceId" });
            DropIndex("public.ServiceDefinitionResIndexString", "ix_SearchParamId");
            DropIndex("public.ServiceDefinitionResIndexString", "ix_String");
            DropIndex("public.ServiceDefinitionResIndexReference", new[] { "ResourceId" });
            DropIndex("public.ServiceDefinitionResIndexReference", "ix_SearchParamId");
            DropIndex("public.ServiceDefinitionResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.ServiceDefinitionResIndexReference", "ix_RefFhirId");
            DropIndex("public.ServiceDefinitionResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.ServiceDefinitionResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.ServiceDefinitionResIndexQuantity", "ix_System");
            DropIndex("public.ServiceDefinitionResIndexQuantity", "ix_Code");
            DropIndex("public.ServiceDefinitionResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.ServiceDefinitionResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.ServiceDefinitionResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.ServiceDefinitionResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.ServiceDefinitionRes", new[] { "FhirReleaseId" });
            DropIndex("public.ServiceDefinitionRes", "ix_LastUpdated");
            DropIndex("public.ServiceDefinitionRes", "ix_IsDeleted");
            DropIndex("public.ServiceDefinitionRes", "uq_FhirIdAndVersionId");
            DropIndex("public.ServiceDefinitionRes", "ix_IsCurrent");
            DropIndex("public.SequenceResIndexUri", new[] { "ResourceId" });
            DropIndex("public.SequenceResIndexUri", "ix_SearchParamId");
            DropIndex("public.SequenceResIndexUri", "ix_Uri");
            DropIndex("public.SequenceResIndexToken", new[] { "ResourceId" });
            DropIndex("public.SequenceResIndexToken", "ix_SearchParamId");
            DropIndex("public.SequenceResIndexToken", "ix_System");
            DropIndex("public.SequenceResIndexToken", "ix_Code");
            DropIndex("public.SequenceResIndexString", new[] { "ResourceId" });
            DropIndex("public.SequenceResIndexString", "ix_SearchParamId");
            DropIndex("public.SequenceResIndexString", "ix_String");
            DropIndex("public.SequenceResIndexReference", new[] { "ResourceId" });
            DropIndex("public.SequenceResIndexReference", "ix_SearchParamId");
            DropIndex("public.SequenceResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.SequenceResIndexReference", "ix_RefFhirId");
            DropIndex("public.SequenceResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.SequenceResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.SequenceResIndexQuantity", "ix_System");
            DropIndex("public.SequenceResIndexQuantity", "ix_Code");
            DropIndex("public.SequenceResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.SequenceResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.SequenceResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.SequenceResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.SequenceRes", new[] { "FhirReleaseId" });
            DropIndex("public.SequenceRes", "ix_LastUpdated");
            DropIndex("public.SequenceRes", "ix_IsDeleted");
            DropIndex("public.SequenceRes", "uq_FhirIdAndVersionId");
            DropIndex("public.SequenceRes", "ix_IsCurrent");
            DropIndex("public.SearchParameterResIndexUri", new[] { "ResourceId" });
            DropIndex("public.SearchParameterResIndexUri", "ix_SearchParamId");
            DropIndex("public.SearchParameterResIndexUri", "ix_Uri");
            DropIndex("public.SearchParameterResIndexToken", new[] { "ResourceId" });
            DropIndex("public.SearchParameterResIndexToken", "ix_SearchParamId");
            DropIndex("public.SearchParameterResIndexToken", "ix_System");
            DropIndex("public.SearchParameterResIndexToken", "ix_Code");
            DropIndex("public.SearchParameterResIndexString", new[] { "ResourceId" });
            DropIndex("public.SearchParameterResIndexString", "ix_SearchParamId");
            DropIndex("public.SearchParameterResIndexString", "ix_String");
            DropIndex("public.SearchParameterResIndexReference", new[] { "ResourceId" });
            DropIndex("public.SearchParameterResIndexReference", "ix_SearchParamId");
            DropIndex("public.SearchParameterResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.SearchParameterResIndexReference", "ix_RefFhirId");
            DropIndex("public.SearchParameterResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.SearchParameterResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.SearchParameterResIndexQuantity", "ix_System");
            DropIndex("public.SearchParameterResIndexQuantity", "ix_Code");
            DropIndex("public.SearchParameterResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.SearchParameterResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.SearchParameterResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.SearchParameterResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.SearchParameterRes", new[] { "FhirReleaseId" });
            DropIndex("public.SearchParameterRes", "ix_LastUpdated");
            DropIndex("public.SearchParameterRes", "ix_IsDeleted");
            DropIndex("public.SearchParameterRes", "uq_FhirIdAndVersionId");
            DropIndex("public.SearchParameterRes", "ix_IsCurrent");
            DropIndex("public.ScheduleResIndexUri", new[] { "ResourceId" });
            DropIndex("public.ScheduleResIndexUri", "ix_SearchParamId");
            DropIndex("public.ScheduleResIndexUri", "ix_Uri");
            DropIndex("public.ScheduleResIndexToken", new[] { "ResourceId" });
            DropIndex("public.ScheduleResIndexToken", "ix_SearchParamId");
            DropIndex("public.ScheduleResIndexToken", "ix_System");
            DropIndex("public.ScheduleResIndexToken", "ix_Code");
            DropIndex("public.ScheduleResIndexString", new[] { "ResourceId" });
            DropIndex("public.ScheduleResIndexString", "ix_SearchParamId");
            DropIndex("public.ScheduleResIndexString", "ix_String");
            DropIndex("public.ScheduleResIndexReference", new[] { "ResourceId" });
            DropIndex("public.ScheduleResIndexReference", "ix_SearchParamId");
            DropIndex("public.ScheduleResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.ScheduleResIndexReference", "ix_RefFhirId");
            DropIndex("public.ScheduleResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.ScheduleResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.ScheduleResIndexQuantity", "ix_System");
            DropIndex("public.ScheduleResIndexQuantity", "ix_Code");
            DropIndex("public.ScheduleResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.ScheduleResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.ScheduleResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.ScheduleResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.ScheduleRes", new[] { "FhirReleaseId" });
            DropIndex("public.ScheduleRes", "ix_LastUpdated");
            DropIndex("public.ScheduleRes", "ix_IsDeleted");
            DropIndex("public.ScheduleRes", "uq_FhirIdAndVersionId");
            DropIndex("public.ScheduleRes", "ix_IsCurrent");
            DropIndex("public.RiskAssessmentResIndexUri", new[] { "ResourceId" });
            DropIndex("public.RiskAssessmentResIndexUri", "ix_SearchParamId");
            DropIndex("public.RiskAssessmentResIndexUri", "ix_Uri");
            DropIndex("public.RiskAssessmentResIndexToken", new[] { "ResourceId" });
            DropIndex("public.RiskAssessmentResIndexToken", "ix_SearchParamId");
            DropIndex("public.RiskAssessmentResIndexToken", "ix_System");
            DropIndex("public.RiskAssessmentResIndexToken", "ix_Code");
            DropIndex("public.RiskAssessmentResIndexString", new[] { "ResourceId" });
            DropIndex("public.RiskAssessmentResIndexString", "ix_SearchParamId");
            DropIndex("public.RiskAssessmentResIndexString", "ix_String");
            DropIndex("public.RiskAssessmentResIndexReference", new[] { "ResourceId" });
            DropIndex("public.RiskAssessmentResIndexReference", "ix_SearchParamId");
            DropIndex("public.RiskAssessmentResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.RiskAssessmentResIndexReference", "ix_RefFhirId");
            DropIndex("public.RiskAssessmentResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.RiskAssessmentResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.RiskAssessmentResIndexQuantity", "ix_System");
            DropIndex("public.RiskAssessmentResIndexQuantity", "ix_Code");
            DropIndex("public.RiskAssessmentResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.RiskAssessmentResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.RiskAssessmentResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.RiskAssessmentResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.RiskAssessmentRes", new[] { "FhirReleaseId" });
            DropIndex("public.RiskAssessmentRes", "ix_LastUpdated");
            DropIndex("public.RiskAssessmentRes", "ix_IsDeleted");
            DropIndex("public.RiskAssessmentRes", "uq_FhirIdAndVersionId");
            DropIndex("public.RiskAssessmentRes", "ix_IsCurrent");
            DropIndex("public.ResearchSubjectResIndexUri", new[] { "ResourceId" });
            DropIndex("public.ResearchSubjectResIndexUri", "ix_SearchParamId");
            DropIndex("public.ResearchSubjectResIndexUri", "ix_Uri");
            DropIndex("public.ResearchSubjectResIndexToken", new[] { "ResourceId" });
            DropIndex("public.ResearchSubjectResIndexToken", "ix_SearchParamId");
            DropIndex("public.ResearchSubjectResIndexToken", "ix_System");
            DropIndex("public.ResearchSubjectResIndexToken", "ix_Code");
            DropIndex("public.ResearchSubjectResIndexString", new[] { "ResourceId" });
            DropIndex("public.ResearchSubjectResIndexString", "ix_SearchParamId");
            DropIndex("public.ResearchSubjectResIndexString", "ix_String");
            DropIndex("public.ResearchSubjectResIndexReference", new[] { "ResourceId" });
            DropIndex("public.ResearchSubjectResIndexReference", "ix_SearchParamId");
            DropIndex("public.ResearchSubjectResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.ResearchSubjectResIndexReference", "ix_RefFhirId");
            DropIndex("public.ResearchSubjectResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.ResearchSubjectResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.ResearchSubjectResIndexQuantity", "ix_System");
            DropIndex("public.ResearchSubjectResIndexQuantity", "ix_Code");
            DropIndex("public.ResearchSubjectResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.ResearchSubjectResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.ResearchSubjectResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.ResearchSubjectResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.ResearchSubjectRes", new[] { "FhirReleaseId" });
            DropIndex("public.ResearchSubjectRes", "ix_LastUpdated");
            DropIndex("public.ResearchSubjectRes", "ix_IsDeleted");
            DropIndex("public.ResearchSubjectRes", "uq_FhirIdAndVersionId");
            DropIndex("public.ResearchSubjectRes", "ix_IsCurrent");
            DropIndex("public.ResearchStudyResIndexUri", new[] { "ResourceId" });
            DropIndex("public.ResearchStudyResIndexUri", "ix_SearchParamId");
            DropIndex("public.ResearchStudyResIndexUri", "ix_Uri");
            DropIndex("public.ResearchStudyResIndexToken", new[] { "ResourceId" });
            DropIndex("public.ResearchStudyResIndexToken", "ix_SearchParamId");
            DropIndex("public.ResearchStudyResIndexToken", "ix_System");
            DropIndex("public.ResearchStudyResIndexToken", "ix_Code");
            DropIndex("public.ResearchStudyResIndexString", new[] { "ResourceId" });
            DropIndex("public.ResearchStudyResIndexString", "ix_SearchParamId");
            DropIndex("public.ResearchStudyResIndexString", "ix_String");
            DropIndex("public.ResearchStudyResIndexReference", new[] { "ResourceId" });
            DropIndex("public.ResearchStudyResIndexReference", "ix_SearchParamId");
            DropIndex("public.ResearchStudyResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.ResearchStudyResIndexReference", "ix_RefFhirId");
            DropIndex("public.ResearchStudyResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.ResearchStudyResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.ResearchStudyResIndexQuantity", "ix_System");
            DropIndex("public.ResearchStudyResIndexQuantity", "ix_Code");
            DropIndex("public.ResearchStudyResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.ResearchStudyResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.ResearchStudyResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.ResearchStudyResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.ResearchStudyRes", new[] { "FhirReleaseId" });
            DropIndex("public.ResearchStudyRes", "ix_LastUpdated");
            DropIndex("public.ResearchStudyRes", "ix_IsDeleted");
            DropIndex("public.ResearchStudyRes", "uq_FhirIdAndVersionId");
            DropIndex("public.ResearchStudyRes", "ix_IsCurrent");
            DropIndex("public.RequestGroupResIndexUri", new[] { "ResourceId" });
            DropIndex("public.RequestGroupResIndexUri", "ix_SearchParamId");
            DropIndex("public.RequestGroupResIndexUri", "ix_Uri");
            DropIndex("public.RequestGroupResIndexToken", new[] { "ResourceId" });
            DropIndex("public.RequestGroupResIndexToken", "ix_SearchParamId");
            DropIndex("public.RequestGroupResIndexToken", "ix_System");
            DropIndex("public.RequestGroupResIndexToken", "ix_Code");
            DropIndex("public.RequestGroupResIndexString", new[] { "ResourceId" });
            DropIndex("public.RequestGroupResIndexString", "ix_SearchParamId");
            DropIndex("public.RequestGroupResIndexString", "ix_String");
            DropIndex("public.RequestGroupResIndexReference", new[] { "ResourceId" });
            DropIndex("public.RequestGroupResIndexReference", "ix_SearchParamId");
            DropIndex("public.RequestGroupResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.RequestGroupResIndexReference", "ix_RefFhirId");
            DropIndex("public.RequestGroupResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.RequestGroupResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.RequestGroupResIndexQuantity", "ix_System");
            DropIndex("public.RequestGroupResIndexQuantity", "ix_Code");
            DropIndex("public.RequestGroupResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.RequestGroupResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.RequestGroupResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.RequestGroupResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.RequestGroupRes", new[] { "FhirReleaseId" });
            DropIndex("public.RequestGroupRes", "ix_LastUpdated");
            DropIndex("public.RequestGroupRes", "ix_IsDeleted");
            DropIndex("public.RequestGroupRes", "uq_FhirIdAndVersionId");
            DropIndex("public.RequestGroupRes", "ix_IsCurrent");
            DropIndex("public.RelatedPersonResIndexUri", new[] { "ResourceId" });
            DropIndex("public.RelatedPersonResIndexUri", "ix_SearchParamId");
            DropIndex("public.RelatedPersonResIndexUri", "ix_Uri");
            DropIndex("public.RelatedPersonResIndexToken", new[] { "ResourceId" });
            DropIndex("public.RelatedPersonResIndexToken", "ix_SearchParamId");
            DropIndex("public.RelatedPersonResIndexToken", "ix_System");
            DropIndex("public.RelatedPersonResIndexToken", "ix_Code");
            DropIndex("public.RelatedPersonResIndexString", new[] { "ResourceId" });
            DropIndex("public.RelatedPersonResIndexString", "ix_SearchParamId");
            DropIndex("public.RelatedPersonResIndexString", "ix_String");
            DropIndex("public.RelatedPersonResIndexReference", new[] { "ResourceId" });
            DropIndex("public.RelatedPersonResIndexReference", "ix_SearchParamId");
            DropIndex("public.RelatedPersonResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.RelatedPersonResIndexReference", "ix_RefFhirId");
            DropIndex("public.RelatedPersonResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.RelatedPersonResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.RelatedPersonResIndexQuantity", "ix_System");
            DropIndex("public.RelatedPersonResIndexQuantity", "ix_Code");
            DropIndex("public.RelatedPersonResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.RelatedPersonResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.RelatedPersonResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.RelatedPersonResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.RelatedPersonRes", new[] { "FhirReleaseId" });
            DropIndex("public.RelatedPersonRes", "ix_LastUpdated");
            DropIndex("public.RelatedPersonRes", "ix_IsDeleted");
            DropIndex("public.RelatedPersonRes", "uq_FhirIdAndVersionId");
            DropIndex("public.RelatedPersonRes", "ix_IsCurrent");
            DropIndex("public.ReferralRequestResIndexUri", new[] { "ResourceId" });
            DropIndex("public.ReferralRequestResIndexUri", "ix_SearchParamId");
            DropIndex("public.ReferralRequestResIndexUri", "ix_Uri");
            DropIndex("public.ReferralRequestResIndexToken", new[] { "ResourceId" });
            DropIndex("public.ReferralRequestResIndexToken", "ix_SearchParamId");
            DropIndex("public.ReferralRequestResIndexToken", "ix_System");
            DropIndex("public.ReferralRequestResIndexToken", "ix_Code");
            DropIndex("public.ReferralRequestResIndexString", new[] { "ResourceId" });
            DropIndex("public.ReferralRequestResIndexString", "ix_SearchParamId");
            DropIndex("public.ReferralRequestResIndexString", "ix_String");
            DropIndex("public.ReferralRequestResIndexReference", new[] { "ResourceId" });
            DropIndex("public.ReferralRequestResIndexReference", "ix_SearchParamId");
            DropIndex("public.ReferralRequestResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.ReferralRequestResIndexReference", "ix_RefFhirId");
            DropIndex("public.ReferralRequestResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.ReferralRequestResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.ReferralRequestResIndexQuantity", "ix_System");
            DropIndex("public.ReferralRequestResIndexQuantity", "ix_Code");
            DropIndex("public.ReferralRequestResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.ReferralRequestResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.ReferralRequestResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.ReferralRequestResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.ReferralRequestRes", new[] { "FhirReleaseId" });
            DropIndex("public.ReferralRequestRes", "ix_LastUpdated");
            DropIndex("public.ReferralRequestRes", "ix_IsDeleted");
            DropIndex("public.ReferralRequestRes", "uq_FhirIdAndVersionId");
            DropIndex("public.ReferralRequestRes", "ix_IsCurrent");
            DropIndex("public.QuestionnaireResponseResIndexUri", new[] { "ResourceId" });
            DropIndex("public.QuestionnaireResponseResIndexUri", "ix_SearchParamId");
            DropIndex("public.QuestionnaireResponseResIndexUri", "ix_Uri");
            DropIndex("public.QuestionnaireResponseResIndexToken", new[] { "ResourceId" });
            DropIndex("public.QuestionnaireResponseResIndexToken", "ix_SearchParamId");
            DropIndex("public.QuestionnaireResponseResIndexToken", "ix_System");
            DropIndex("public.QuestionnaireResponseResIndexToken", "ix_Code");
            DropIndex("public.QuestionnaireResponseResIndexString", new[] { "ResourceId" });
            DropIndex("public.QuestionnaireResponseResIndexString", "ix_SearchParamId");
            DropIndex("public.QuestionnaireResponseResIndexString", "ix_String");
            DropIndex("public.QuestionnaireResponseResIndexReference", new[] { "ResourceId" });
            DropIndex("public.QuestionnaireResponseResIndexReference", "ix_SearchParamId");
            DropIndex("public.QuestionnaireResponseResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.QuestionnaireResponseResIndexReference", "ix_RefFhirId");
            DropIndex("public.QuestionnaireResponseResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.QuestionnaireResponseResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.QuestionnaireResponseResIndexQuantity", "ix_System");
            DropIndex("public.QuestionnaireResponseResIndexQuantity", "ix_Code");
            DropIndex("public.QuestionnaireResponseResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.QuestionnaireResponseResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.QuestionnaireResponseResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.QuestionnaireResponseResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.QuestionnaireResponseRes", new[] { "FhirReleaseId" });
            DropIndex("public.QuestionnaireResponseRes", "ix_LastUpdated");
            DropIndex("public.QuestionnaireResponseRes", "ix_IsDeleted");
            DropIndex("public.QuestionnaireResponseRes", "uq_FhirIdAndVersionId");
            DropIndex("public.QuestionnaireResponseRes", "ix_IsCurrent");
            DropIndex("public.QuestionnaireResIndexUri", new[] { "ResourceId" });
            DropIndex("public.QuestionnaireResIndexUri", "ix_SearchParamId");
            DropIndex("public.QuestionnaireResIndexUri", "ix_Uri");
            DropIndex("public.QuestionnaireResIndexToken", new[] { "ResourceId" });
            DropIndex("public.QuestionnaireResIndexToken", "ix_SearchParamId");
            DropIndex("public.QuestionnaireResIndexToken", "ix_System");
            DropIndex("public.QuestionnaireResIndexToken", "ix_Code");
            DropIndex("public.QuestionnaireResIndexString", new[] { "ResourceId" });
            DropIndex("public.QuestionnaireResIndexString", "ix_SearchParamId");
            DropIndex("public.QuestionnaireResIndexString", "ix_String");
            DropIndex("public.QuestionnaireResIndexReference", new[] { "ResourceId" });
            DropIndex("public.QuestionnaireResIndexReference", "ix_SearchParamId");
            DropIndex("public.QuestionnaireResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.QuestionnaireResIndexReference", "ix_RefFhirId");
            DropIndex("public.QuestionnaireResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.QuestionnaireResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.QuestionnaireResIndexQuantity", "ix_System");
            DropIndex("public.QuestionnaireResIndexQuantity", "ix_Code");
            DropIndex("public.QuestionnaireResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.QuestionnaireResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.QuestionnaireResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.QuestionnaireResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.QuestionnaireRes", new[] { "FhirReleaseId" });
            DropIndex("public.QuestionnaireRes", "ix_LastUpdated");
            DropIndex("public.QuestionnaireRes", "ix_IsDeleted");
            DropIndex("public.QuestionnaireRes", "uq_FhirIdAndVersionId");
            DropIndex("public.QuestionnaireRes", "ix_IsCurrent");
            DropIndex("public.ProvenanceResIndexUri", new[] { "ResourceId" });
            DropIndex("public.ProvenanceResIndexUri", "ix_SearchParamId");
            DropIndex("public.ProvenanceResIndexUri", "ix_Uri");
            DropIndex("public.ProvenanceResIndexToken", new[] { "ResourceId" });
            DropIndex("public.ProvenanceResIndexToken", "ix_SearchParamId");
            DropIndex("public.ProvenanceResIndexToken", "ix_System");
            DropIndex("public.ProvenanceResIndexToken", "ix_Code");
            DropIndex("public.ProvenanceResIndexString", new[] { "ResourceId" });
            DropIndex("public.ProvenanceResIndexString", "ix_SearchParamId");
            DropIndex("public.ProvenanceResIndexString", "ix_String");
            DropIndex("public.ProvenanceResIndexReference", new[] { "ResourceId" });
            DropIndex("public.ProvenanceResIndexReference", "ix_SearchParamId");
            DropIndex("public.ProvenanceResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.ProvenanceResIndexReference", "ix_RefFhirId");
            DropIndex("public.ProvenanceResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.ProvenanceResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.ProvenanceResIndexQuantity", "ix_System");
            DropIndex("public.ProvenanceResIndexQuantity", "ix_Code");
            DropIndex("public.ProvenanceResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.ProvenanceResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.ProvenanceResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.ProvenanceResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.ProvenanceRes", new[] { "FhirReleaseId" });
            DropIndex("public.ProvenanceRes", "ix_LastUpdated");
            DropIndex("public.ProvenanceRes", "ix_IsDeleted");
            DropIndex("public.ProvenanceRes", "uq_FhirIdAndVersionId");
            DropIndex("public.ProvenanceRes", "ix_IsCurrent");
            DropIndex("public.ProcessResponseResIndexUri", new[] { "ResourceId" });
            DropIndex("public.ProcessResponseResIndexUri", "ix_SearchParamId");
            DropIndex("public.ProcessResponseResIndexUri", "ix_Uri");
            DropIndex("public.ProcessResponseResIndexToken", new[] { "ResourceId" });
            DropIndex("public.ProcessResponseResIndexToken", "ix_SearchParamId");
            DropIndex("public.ProcessResponseResIndexToken", "ix_System");
            DropIndex("public.ProcessResponseResIndexToken", "ix_Code");
            DropIndex("public.ProcessResponseResIndexString", new[] { "ResourceId" });
            DropIndex("public.ProcessResponseResIndexString", "ix_SearchParamId");
            DropIndex("public.ProcessResponseResIndexString", "ix_String");
            DropIndex("public.ProcessResponseResIndexReference", new[] { "ResourceId" });
            DropIndex("public.ProcessResponseResIndexReference", "ix_SearchParamId");
            DropIndex("public.ProcessResponseResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.ProcessResponseResIndexReference", "ix_RefFhirId");
            DropIndex("public.ProcessResponseResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.ProcessResponseResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.ProcessResponseResIndexQuantity", "ix_System");
            DropIndex("public.ProcessResponseResIndexQuantity", "ix_Code");
            DropIndex("public.ProcessResponseResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.ProcessResponseResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.ProcessResponseResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.ProcessResponseResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.ProcessResponseRes", new[] { "FhirReleaseId" });
            DropIndex("public.ProcessResponseRes", "ix_LastUpdated");
            DropIndex("public.ProcessResponseRes", "ix_IsDeleted");
            DropIndex("public.ProcessResponseRes", "uq_FhirIdAndVersionId");
            DropIndex("public.ProcessResponseRes", "ix_IsCurrent");
            DropIndex("public.ProcessRequestResIndexUri", new[] { "ResourceId" });
            DropIndex("public.ProcessRequestResIndexUri", "ix_SearchParamId");
            DropIndex("public.ProcessRequestResIndexUri", "ix_Uri");
            DropIndex("public.ProcessRequestResIndexToken", new[] { "ResourceId" });
            DropIndex("public.ProcessRequestResIndexToken", "ix_SearchParamId");
            DropIndex("public.ProcessRequestResIndexToken", "ix_System");
            DropIndex("public.ProcessRequestResIndexToken", "ix_Code");
            DropIndex("public.ProcessRequestResIndexString", new[] { "ResourceId" });
            DropIndex("public.ProcessRequestResIndexString", "ix_SearchParamId");
            DropIndex("public.ProcessRequestResIndexString", "ix_String");
            DropIndex("public.ProcessRequestResIndexReference", new[] { "ResourceId" });
            DropIndex("public.ProcessRequestResIndexReference", "ix_SearchParamId");
            DropIndex("public.ProcessRequestResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.ProcessRequestResIndexReference", "ix_RefFhirId");
            DropIndex("public.ProcessRequestResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.ProcessRequestResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.ProcessRequestResIndexQuantity", "ix_System");
            DropIndex("public.ProcessRequestResIndexQuantity", "ix_Code");
            DropIndex("public.ProcessRequestResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.ProcessRequestResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.ProcessRequestResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.ProcessRequestResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.ProcessRequestRes", new[] { "FhirReleaseId" });
            DropIndex("public.ProcessRequestRes", "ix_LastUpdated");
            DropIndex("public.ProcessRequestRes", "ix_IsDeleted");
            DropIndex("public.ProcessRequestRes", "uq_FhirIdAndVersionId");
            DropIndex("public.ProcessRequestRes", "ix_IsCurrent");
            DropIndex("public.ProcedureRequestResIndexUri", new[] { "ResourceId" });
            DropIndex("public.ProcedureRequestResIndexUri", "ix_SearchParamId");
            DropIndex("public.ProcedureRequestResIndexUri", "ix_Uri");
            DropIndex("public.ProcedureRequestResIndexToken", new[] { "ResourceId" });
            DropIndex("public.ProcedureRequestResIndexToken", "ix_SearchParamId");
            DropIndex("public.ProcedureRequestResIndexToken", "ix_System");
            DropIndex("public.ProcedureRequestResIndexToken", "ix_Code");
            DropIndex("public.ProcedureRequestResIndexString", new[] { "ResourceId" });
            DropIndex("public.ProcedureRequestResIndexString", "ix_SearchParamId");
            DropIndex("public.ProcedureRequestResIndexString", "ix_String");
            DropIndex("public.ProcedureRequestResIndexReference", new[] { "ResourceId" });
            DropIndex("public.ProcedureRequestResIndexReference", "ix_SearchParamId");
            DropIndex("public.ProcedureRequestResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.ProcedureRequestResIndexReference", "ix_RefFhirId");
            DropIndex("public.ProcedureRequestResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.ProcedureRequestResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.ProcedureRequestResIndexQuantity", "ix_System");
            DropIndex("public.ProcedureRequestResIndexQuantity", "ix_Code");
            DropIndex("public.ProcedureRequestResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.ProcedureRequestResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.ProcedureRequestResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.ProcedureRequestResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.ProcedureRequestRes", new[] { "FhirReleaseId" });
            DropIndex("public.ProcedureRequestRes", "ix_LastUpdated");
            DropIndex("public.ProcedureRequestRes", "ix_IsDeleted");
            DropIndex("public.ProcedureRequestRes", "uq_FhirIdAndVersionId");
            DropIndex("public.ProcedureRequestRes", "ix_IsCurrent");
            DropIndex("public.ProcedureResIndexUri", new[] { "ResourceId" });
            DropIndex("public.ProcedureResIndexUri", "ix_SearchParamId");
            DropIndex("public.ProcedureResIndexUri", "ix_Uri");
            DropIndex("public.ProcedureResIndexToken", new[] { "ResourceId" });
            DropIndex("public.ProcedureResIndexToken", "ix_SearchParamId");
            DropIndex("public.ProcedureResIndexToken", "ix_System");
            DropIndex("public.ProcedureResIndexToken", "ix_Code");
            DropIndex("public.ProcedureResIndexString", new[] { "ResourceId" });
            DropIndex("public.ProcedureResIndexString", "ix_SearchParamId");
            DropIndex("public.ProcedureResIndexString", "ix_String");
            DropIndex("public.ProcedureResIndexReference", new[] { "ResourceId" });
            DropIndex("public.ProcedureResIndexReference", "ix_SearchParamId");
            DropIndex("public.ProcedureResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.ProcedureResIndexReference", "ix_RefFhirId");
            DropIndex("public.ProcedureResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.ProcedureResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.ProcedureResIndexQuantity", "ix_System");
            DropIndex("public.ProcedureResIndexQuantity", "ix_Code");
            DropIndex("public.ProcedureResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.ProcedureResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.ProcedureResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.ProcedureResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.ProcedureRes", new[] { "FhirReleaseId" });
            DropIndex("public.ProcedureRes", "ix_LastUpdated");
            DropIndex("public.ProcedureRes", "ix_IsDeleted");
            DropIndex("public.ProcedureRes", "uq_FhirIdAndVersionId");
            DropIndex("public.ProcedureRes", "ix_IsCurrent");
            DropIndex("public.PractitionerRoleResIndexUri", new[] { "ResourceId" });
            DropIndex("public.PractitionerRoleResIndexUri", "ix_SearchParamId");
            DropIndex("public.PractitionerRoleResIndexUri", "ix_Uri");
            DropIndex("public.PractitionerRoleResIndexToken", new[] { "ResourceId" });
            DropIndex("public.PractitionerRoleResIndexToken", "ix_SearchParamId");
            DropIndex("public.PractitionerRoleResIndexToken", "ix_System");
            DropIndex("public.PractitionerRoleResIndexToken", "ix_Code");
            DropIndex("public.PractitionerRoleResIndexString", new[] { "ResourceId" });
            DropIndex("public.PractitionerRoleResIndexString", "ix_SearchParamId");
            DropIndex("public.PractitionerRoleResIndexString", "ix_String");
            DropIndex("public.PractitionerRoleResIndexReference", new[] { "ResourceId" });
            DropIndex("public.PractitionerRoleResIndexReference", "ix_SearchParamId");
            DropIndex("public.PractitionerRoleResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.PractitionerRoleResIndexReference", "ix_RefFhirId");
            DropIndex("public.PractitionerRoleResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.PractitionerRoleResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.PractitionerRoleResIndexQuantity", "ix_System");
            DropIndex("public.PractitionerRoleResIndexQuantity", "ix_Code");
            DropIndex("public.PractitionerRoleResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.PractitionerRoleResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.PractitionerRoleResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.PractitionerRoleResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.PractitionerRoleRes", new[] { "FhirReleaseId" });
            DropIndex("public.PractitionerRoleRes", "ix_LastUpdated");
            DropIndex("public.PractitionerRoleRes", "ix_IsDeleted");
            DropIndex("public.PractitionerRoleRes", "uq_FhirIdAndVersionId");
            DropIndex("public.PractitionerRoleRes", "ix_IsCurrent");
            DropIndex("public.PractitionerResIndexUri", new[] { "ResourceId" });
            DropIndex("public.PractitionerResIndexUri", "ix_SearchParamId");
            DropIndex("public.PractitionerResIndexUri", "ix_Uri");
            DropIndex("public.PractitionerResIndexToken", new[] { "ResourceId" });
            DropIndex("public.PractitionerResIndexToken", "ix_SearchParamId");
            DropIndex("public.PractitionerResIndexToken", "ix_System");
            DropIndex("public.PractitionerResIndexToken", "ix_Code");
            DropIndex("public.PractitionerResIndexString", new[] { "ResourceId" });
            DropIndex("public.PractitionerResIndexString", "ix_SearchParamId");
            DropIndex("public.PractitionerResIndexString", "ix_String");
            DropIndex("public.PractitionerResIndexReference", new[] { "ResourceId" });
            DropIndex("public.PractitionerResIndexReference", "ix_SearchParamId");
            DropIndex("public.PractitionerResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.PractitionerResIndexReference", "ix_RefFhirId");
            DropIndex("public.PractitionerResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.PractitionerResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.PractitionerResIndexQuantity", "ix_System");
            DropIndex("public.PractitionerResIndexQuantity", "ix_Code");
            DropIndex("public.PractitionerResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.PractitionerResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.PractitionerResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.PractitionerResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.PractitionerRes", new[] { "FhirReleaseId" });
            DropIndex("public.PractitionerRes", "ix_LastUpdated");
            DropIndex("public.PractitionerRes", "ix_IsDeleted");
            DropIndex("public.PractitionerRes", "uq_FhirIdAndVersionId");
            DropIndex("public.PractitionerRes", "ix_IsCurrent");
            DropIndex("public.PlanDefinitionResIndexUri", new[] { "ResourceId" });
            DropIndex("public.PlanDefinitionResIndexUri", "ix_SearchParamId");
            DropIndex("public.PlanDefinitionResIndexUri", "ix_Uri");
            DropIndex("public.PlanDefinitionResIndexToken", new[] { "ResourceId" });
            DropIndex("public.PlanDefinitionResIndexToken", "ix_SearchParamId");
            DropIndex("public.PlanDefinitionResIndexToken", "ix_System");
            DropIndex("public.PlanDefinitionResIndexToken", "ix_Code");
            DropIndex("public.PlanDefinitionResIndexString", new[] { "ResourceId" });
            DropIndex("public.PlanDefinitionResIndexString", "ix_SearchParamId");
            DropIndex("public.PlanDefinitionResIndexString", "ix_String");
            DropIndex("public.PlanDefinitionResIndexReference", new[] { "ResourceId" });
            DropIndex("public.PlanDefinitionResIndexReference", "ix_SearchParamId");
            DropIndex("public.PlanDefinitionResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.PlanDefinitionResIndexReference", "ix_RefFhirId");
            DropIndex("public.PlanDefinitionResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.PlanDefinitionResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.PlanDefinitionResIndexQuantity", "ix_System");
            DropIndex("public.PlanDefinitionResIndexQuantity", "ix_Code");
            DropIndex("public.PlanDefinitionResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.PlanDefinitionResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.PlanDefinitionResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.PlanDefinitionResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.PlanDefinitionRes", new[] { "FhirReleaseId" });
            DropIndex("public.PlanDefinitionRes", "ix_LastUpdated");
            DropIndex("public.PlanDefinitionRes", "ix_IsDeleted");
            DropIndex("public.PlanDefinitionRes", "uq_FhirIdAndVersionId");
            DropIndex("public.PlanDefinitionRes", "ix_IsCurrent");
            DropIndex("public.PersonResIndexUri", new[] { "ResourceId" });
            DropIndex("public.PersonResIndexUri", "ix_SearchParamId");
            DropIndex("public.PersonResIndexUri", "ix_Uri");
            DropIndex("public.PersonResIndexToken", new[] { "ResourceId" });
            DropIndex("public.PersonResIndexToken", "ix_SearchParamId");
            DropIndex("public.PersonResIndexToken", "ix_System");
            DropIndex("public.PersonResIndexToken", "ix_Code");
            DropIndex("public.PersonResIndexString", new[] { "ResourceId" });
            DropIndex("public.PersonResIndexString", "ix_SearchParamId");
            DropIndex("public.PersonResIndexString", "ix_String");
            DropIndex("public.PersonResIndexReference", new[] { "ResourceId" });
            DropIndex("public.PersonResIndexReference", "ix_SearchParamId");
            DropIndex("public.PersonResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.PersonResIndexReference", "ix_RefFhirId");
            DropIndex("public.PersonResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.PersonResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.PersonResIndexQuantity", "ix_System");
            DropIndex("public.PersonResIndexQuantity", "ix_Code");
            DropIndex("public.PersonResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.PersonResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.PersonResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.PersonResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.PersonRes", new[] { "FhirReleaseId" });
            DropIndex("public.PersonRes", "ix_LastUpdated");
            DropIndex("public.PersonRes", "ix_IsDeleted");
            DropIndex("public.PersonRes", "uq_FhirIdAndVersionId");
            DropIndex("public.PersonRes", "ix_IsCurrent");
            DropIndex("public.PaymentReconciliationResIndexUri", new[] { "ResourceId" });
            DropIndex("public.PaymentReconciliationResIndexUri", "ix_SearchParamId");
            DropIndex("public.PaymentReconciliationResIndexUri", "ix_Uri");
            DropIndex("public.PaymentReconciliationResIndexToken", new[] { "ResourceId" });
            DropIndex("public.PaymentReconciliationResIndexToken", "ix_SearchParamId");
            DropIndex("public.PaymentReconciliationResIndexToken", "ix_System");
            DropIndex("public.PaymentReconciliationResIndexToken", "ix_Code");
            DropIndex("public.PaymentReconciliationResIndexString", new[] { "ResourceId" });
            DropIndex("public.PaymentReconciliationResIndexString", "ix_SearchParamId");
            DropIndex("public.PaymentReconciliationResIndexString", "ix_String");
            DropIndex("public.PaymentReconciliationResIndexReference", new[] { "ResourceId" });
            DropIndex("public.PaymentReconciliationResIndexReference", "ix_SearchParamId");
            DropIndex("public.PaymentReconciliationResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.PaymentReconciliationResIndexReference", "ix_RefFhirId");
            DropIndex("public.PaymentReconciliationResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.PaymentReconciliationResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.PaymentReconciliationResIndexQuantity", "ix_System");
            DropIndex("public.PaymentReconciliationResIndexQuantity", "ix_Code");
            DropIndex("public.PaymentReconciliationResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.PaymentReconciliationResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.PaymentReconciliationResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.PaymentReconciliationResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.PaymentReconciliationRes", new[] { "FhirReleaseId" });
            DropIndex("public.PaymentReconciliationRes", "ix_LastUpdated");
            DropIndex("public.PaymentReconciliationRes", "ix_IsDeleted");
            DropIndex("public.PaymentReconciliationRes", "uq_FhirIdAndVersionId");
            DropIndex("public.PaymentReconciliationRes", "ix_IsCurrent");
            DropIndex("public.PaymentNoticeResIndexUri", new[] { "ResourceId" });
            DropIndex("public.PaymentNoticeResIndexUri", "ix_SearchParamId");
            DropIndex("public.PaymentNoticeResIndexUri", "ix_Uri");
            DropIndex("public.PaymentNoticeResIndexToken", new[] { "ResourceId" });
            DropIndex("public.PaymentNoticeResIndexToken", "ix_SearchParamId");
            DropIndex("public.PaymentNoticeResIndexToken", "ix_System");
            DropIndex("public.PaymentNoticeResIndexToken", "ix_Code");
            DropIndex("public.PaymentNoticeResIndexString", new[] { "ResourceId" });
            DropIndex("public.PaymentNoticeResIndexString", "ix_SearchParamId");
            DropIndex("public.PaymentNoticeResIndexString", "ix_String");
            DropIndex("public.PaymentNoticeResIndexReference", new[] { "ResourceId" });
            DropIndex("public.PaymentNoticeResIndexReference", "ix_SearchParamId");
            DropIndex("public.PaymentNoticeResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.PaymentNoticeResIndexReference", "ix_RefFhirId");
            DropIndex("public.PaymentNoticeResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.PaymentNoticeResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.PaymentNoticeResIndexQuantity", "ix_System");
            DropIndex("public.PaymentNoticeResIndexQuantity", "ix_Code");
            DropIndex("public.PaymentNoticeResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.PaymentNoticeResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.PaymentNoticeResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.PaymentNoticeResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.PaymentNoticeRes", new[] { "FhirReleaseId" });
            DropIndex("public.PaymentNoticeRes", "ix_LastUpdated");
            DropIndex("public.PaymentNoticeRes", "ix_IsDeleted");
            DropIndex("public.PaymentNoticeRes", "uq_FhirIdAndVersionId");
            DropIndex("public.PaymentNoticeRes", "ix_IsCurrent");
            DropIndex("public.PatientResIndexUri", new[] { "ResourceId" });
            DropIndex("public.PatientResIndexUri", "ix_SearchParamId");
            DropIndex("public.PatientResIndexUri", "ix_Uri");
            DropIndex("public.PatientResIndexToken", new[] { "ResourceId" });
            DropIndex("public.PatientResIndexToken", "ix_SearchParamId");
            DropIndex("public.PatientResIndexToken", "ix_System");
            DropIndex("public.PatientResIndexToken", "ix_Code");
            DropIndex("public.PatientResIndexString", new[] { "ResourceId" });
            DropIndex("public.PatientResIndexString", "ix_SearchParamId");
            DropIndex("public.PatientResIndexString", "ix_String");
            DropIndex("public.PatientResIndexReference", new[] { "ResourceId" });
            DropIndex("public.PatientResIndexReference", "ix_SearchParamId");
            DropIndex("public.PatientResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.PatientResIndexReference", "ix_RefFhirId");
            DropIndex("public.PatientResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.PatientResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.PatientResIndexQuantity", "ix_System");
            DropIndex("public.PatientResIndexQuantity", "ix_Code");
            DropIndex("public.PatientResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.PatientResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.PatientResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.PatientResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.PatientRes", new[] { "FhirReleaseId" });
            DropIndex("public.PatientRes", "ix_LastUpdated");
            DropIndex("public.PatientRes", "ix_IsDeleted");
            DropIndex("public.PatientRes", "uq_FhirIdAndVersionId");
            DropIndex("public.PatientRes", "ix_IsCurrent");
            DropIndex("public.ParametersResIndexUri", new[] { "ResourceId" });
            DropIndex("public.ParametersResIndexUri", "ix_SearchParamId");
            DropIndex("public.ParametersResIndexUri", "ix_Uri");
            DropIndex("public.ParametersResIndexToken", new[] { "ResourceId" });
            DropIndex("public.ParametersResIndexToken", "ix_SearchParamId");
            DropIndex("public.ParametersResIndexToken", "ix_System");
            DropIndex("public.ParametersResIndexToken", "ix_Code");
            DropIndex("public.ParametersResIndexString", new[] { "ResourceId" });
            DropIndex("public.ParametersResIndexString", "ix_SearchParamId");
            DropIndex("public.ParametersResIndexString", "ix_String");
            DropIndex("public.ParametersResIndexReference", new[] { "ResourceId" });
            DropIndex("public.ParametersResIndexReference", "ix_SearchParamId");
            DropIndex("public.ParametersResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.ParametersResIndexReference", "ix_RefFhirId");
            DropIndex("public.ParametersResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.ParametersResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.ParametersResIndexQuantity", "ix_System");
            DropIndex("public.ParametersResIndexQuantity", "ix_Code");
            DropIndex("public.ParametersResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.ParametersResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.ParametersResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.ParametersResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.ParametersRes", new[] { "FhirReleaseId" });
            DropIndex("public.ParametersRes", "ix_LastUpdated");
            DropIndex("public.ParametersRes", "ix_IsDeleted");
            DropIndex("public.ParametersRes", "uq_FhirIdAndVersionId");
            DropIndex("public.ParametersRes", "ix_IsCurrent");
            DropIndex("public.OrganizationResIndexUri", new[] { "ResourceId" });
            DropIndex("public.OrganizationResIndexUri", "ix_SearchParamId");
            DropIndex("public.OrganizationResIndexUri", "ix_Uri");
            DropIndex("public.OrganizationResIndexToken", new[] { "ResourceId" });
            DropIndex("public.OrganizationResIndexToken", "ix_SearchParamId");
            DropIndex("public.OrganizationResIndexToken", "ix_System");
            DropIndex("public.OrganizationResIndexToken", "ix_Code");
            DropIndex("public.OrganizationResIndexString", new[] { "ResourceId" });
            DropIndex("public.OrganizationResIndexString", "ix_SearchParamId");
            DropIndex("public.OrganizationResIndexString", "ix_String");
            DropIndex("public.OrganizationResIndexReference", new[] { "ResourceId" });
            DropIndex("public.OrganizationResIndexReference", "ix_SearchParamId");
            DropIndex("public.OrganizationResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.OrganizationResIndexReference", "ix_RefFhirId");
            DropIndex("public.OrganizationResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.OrganizationResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.OrganizationResIndexQuantity", "ix_System");
            DropIndex("public.OrganizationResIndexQuantity", "ix_Code");
            DropIndex("public.OrganizationResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.OrganizationResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.OrganizationResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.OrganizationResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.OrganizationRes", new[] { "FhirReleaseId" });
            DropIndex("public.OrganizationRes", "ix_LastUpdated");
            DropIndex("public.OrganizationRes", "ix_IsDeleted");
            DropIndex("public.OrganizationRes", "uq_FhirIdAndVersionId");
            DropIndex("public.OrganizationRes", "ix_IsCurrent");
            DropIndex("public.OperationOutcomeResIndexUri", new[] { "ResourceId" });
            DropIndex("public.OperationOutcomeResIndexUri", "ix_SearchParamId");
            DropIndex("public.OperationOutcomeResIndexUri", "ix_Uri");
            DropIndex("public.OperationOutcomeResIndexToken", new[] { "ResourceId" });
            DropIndex("public.OperationOutcomeResIndexToken", "ix_SearchParamId");
            DropIndex("public.OperationOutcomeResIndexToken", "ix_System");
            DropIndex("public.OperationOutcomeResIndexToken", "ix_Code");
            DropIndex("public.OperationOutcomeResIndexString", new[] { "ResourceId" });
            DropIndex("public.OperationOutcomeResIndexString", "ix_SearchParamId");
            DropIndex("public.OperationOutcomeResIndexString", "ix_String");
            DropIndex("public.OperationOutcomeResIndexReference", new[] { "ResourceId" });
            DropIndex("public.OperationOutcomeResIndexReference", "ix_SearchParamId");
            DropIndex("public.OperationOutcomeResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.OperationOutcomeResIndexReference", "ix_RefFhirId");
            DropIndex("public.OperationOutcomeResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.OperationOutcomeResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.OperationOutcomeResIndexQuantity", "ix_System");
            DropIndex("public.OperationOutcomeResIndexQuantity", "ix_Code");
            DropIndex("public.OperationOutcomeResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.OperationOutcomeResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.OperationOutcomeResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.OperationOutcomeResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.OperationOutcomeRes", new[] { "FhirReleaseId" });
            DropIndex("public.OperationOutcomeRes", "ix_LastUpdated");
            DropIndex("public.OperationOutcomeRes", "ix_IsDeleted");
            DropIndex("public.OperationOutcomeRes", "uq_FhirIdAndVersionId");
            DropIndex("public.OperationOutcomeRes", "ix_IsCurrent");
            DropIndex("public.OperationDefinitionResIndexUri", new[] { "ResourceId" });
            DropIndex("public.OperationDefinitionResIndexUri", "ix_SearchParamId");
            DropIndex("public.OperationDefinitionResIndexUri", "ix_Uri");
            DropIndex("public.OperationDefinitionResIndexToken", new[] { "ResourceId" });
            DropIndex("public.OperationDefinitionResIndexToken", "ix_SearchParamId");
            DropIndex("public.OperationDefinitionResIndexToken", "ix_System");
            DropIndex("public.OperationDefinitionResIndexToken", "ix_Code");
            DropIndex("public.OperationDefinitionResIndexString", new[] { "ResourceId" });
            DropIndex("public.OperationDefinitionResIndexString", "ix_SearchParamId");
            DropIndex("public.OperationDefinitionResIndexString", "ix_String");
            DropIndex("public.OperationDefinitionResIndexReference", new[] { "ResourceId" });
            DropIndex("public.OperationDefinitionResIndexReference", "ix_SearchParamId");
            DropIndex("public.OperationDefinitionResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.OperationDefinitionResIndexReference", "ix_RefFhirId");
            DropIndex("public.OperationDefinitionResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.OperationDefinitionResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.OperationDefinitionResIndexQuantity", "ix_System");
            DropIndex("public.OperationDefinitionResIndexQuantity", "ix_Code");
            DropIndex("public.OperationDefinitionResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.OperationDefinitionResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.OperationDefinitionResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.OperationDefinitionResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.OperationDefinitionRes", new[] { "FhirReleaseId" });
            DropIndex("public.OperationDefinitionRes", "ix_LastUpdated");
            DropIndex("public.OperationDefinitionRes", "ix_IsDeleted");
            DropIndex("public.OperationDefinitionRes", "uq_FhirIdAndVersionId");
            DropIndex("public.OperationDefinitionRes", "ix_IsCurrent");
            DropIndex("public.ObservationResIndexUri", new[] { "ResourceId" });
            DropIndex("public.ObservationResIndexUri", "ix_SearchParamId");
            DropIndex("public.ObservationResIndexUri", "ix_Uri");
            DropIndex("public.ObservationResIndexToken", new[] { "ResourceId" });
            DropIndex("public.ObservationResIndexToken", "ix_SearchParamId");
            DropIndex("public.ObservationResIndexToken", "ix_System");
            DropIndex("public.ObservationResIndexToken", "ix_Code");
            DropIndex("public.ObservationResIndexString", new[] { "ResourceId" });
            DropIndex("public.ObservationResIndexString", "ix_SearchParamId");
            DropIndex("public.ObservationResIndexString", "ix_String");
            DropIndex("public.ObservationResIndexReference", new[] { "ResourceId" });
            DropIndex("public.ObservationResIndexReference", "ix_SearchParamId");
            DropIndex("public.ObservationResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.ObservationResIndexReference", "ix_RefFhirId");
            DropIndex("public.ObservationResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.ObservationResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.ObservationResIndexQuantity", "ix_System");
            DropIndex("public.ObservationResIndexQuantity", "ix_Code");
            DropIndex("public.ObservationResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.ObservationResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.ObservationResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.ObservationResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.ObservationRes", new[] { "FhirReleaseId" });
            DropIndex("public.ObservationRes", "ix_LastUpdated");
            DropIndex("public.ObservationRes", "ix_IsDeleted");
            DropIndex("public.ObservationRes", "uq_FhirIdAndVersionId");
            DropIndex("public.ObservationRes", "ix_IsCurrent");
            DropIndex("public.NutritionOrderResIndexUri", new[] { "ResourceId" });
            DropIndex("public.NutritionOrderResIndexUri", "ix_SearchParamId");
            DropIndex("public.NutritionOrderResIndexUri", "ix_Uri");
            DropIndex("public.NutritionOrderResIndexToken", new[] { "ResourceId" });
            DropIndex("public.NutritionOrderResIndexToken", "ix_SearchParamId");
            DropIndex("public.NutritionOrderResIndexToken", "ix_System");
            DropIndex("public.NutritionOrderResIndexToken", "ix_Code");
            DropIndex("public.NutritionOrderResIndexString", new[] { "ResourceId" });
            DropIndex("public.NutritionOrderResIndexString", "ix_SearchParamId");
            DropIndex("public.NutritionOrderResIndexString", "ix_String");
            DropIndex("public.NutritionOrderResIndexReference", new[] { "ResourceId" });
            DropIndex("public.NutritionOrderResIndexReference", "ix_SearchParamId");
            DropIndex("public.NutritionOrderResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.NutritionOrderResIndexReference", "ix_RefFhirId");
            DropIndex("public.NutritionOrderResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.NutritionOrderResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.NutritionOrderResIndexQuantity", "ix_System");
            DropIndex("public.NutritionOrderResIndexQuantity", "ix_Code");
            DropIndex("public.NutritionOrderResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.NutritionOrderResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.NutritionOrderResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.NutritionOrderResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.NutritionOrderRes", new[] { "FhirReleaseId" });
            DropIndex("public.NutritionOrderRes", "ix_LastUpdated");
            DropIndex("public.NutritionOrderRes", "ix_IsDeleted");
            DropIndex("public.NutritionOrderRes", "uq_FhirIdAndVersionId");
            DropIndex("public.NutritionOrderRes", "ix_IsCurrent");
            DropIndex("public.NamingSystemResIndexUri", new[] { "ResourceId" });
            DropIndex("public.NamingSystemResIndexUri", "ix_SearchParamId");
            DropIndex("public.NamingSystemResIndexUri", "ix_Uri");
            DropIndex("public.NamingSystemResIndexToken", new[] { "ResourceId" });
            DropIndex("public.NamingSystemResIndexToken", "ix_SearchParamId");
            DropIndex("public.NamingSystemResIndexToken", "ix_System");
            DropIndex("public.NamingSystemResIndexToken", "ix_Code");
            DropIndex("public.NamingSystemResIndexString", new[] { "ResourceId" });
            DropIndex("public.NamingSystemResIndexString", "ix_SearchParamId");
            DropIndex("public.NamingSystemResIndexString", "ix_String");
            DropIndex("public.NamingSystemResIndexReference", new[] { "ResourceId" });
            DropIndex("public.NamingSystemResIndexReference", "ix_SearchParamId");
            DropIndex("public.NamingSystemResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.NamingSystemResIndexReference", "ix_RefFhirId");
            DropIndex("public.NamingSystemResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.NamingSystemResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.NamingSystemResIndexQuantity", "ix_System");
            DropIndex("public.NamingSystemResIndexQuantity", "ix_Code");
            DropIndex("public.NamingSystemResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.NamingSystemResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.NamingSystemResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.NamingSystemResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.NamingSystemRes", new[] { "FhirReleaseId" });
            DropIndex("public.NamingSystemRes", "ix_LastUpdated");
            DropIndex("public.NamingSystemRes", "ix_IsDeleted");
            DropIndex("public.NamingSystemRes", "uq_FhirIdAndVersionId");
            DropIndex("public.NamingSystemRes", "ix_IsCurrent");
            DropIndex("public.MessageHeaderResIndexUri", new[] { "ResourceId" });
            DropIndex("public.MessageHeaderResIndexUri", "ix_SearchParamId");
            DropIndex("public.MessageHeaderResIndexUri", "ix_Uri");
            DropIndex("public.MessageHeaderResIndexToken", new[] { "ResourceId" });
            DropIndex("public.MessageHeaderResIndexToken", "ix_SearchParamId");
            DropIndex("public.MessageHeaderResIndexToken", "ix_System");
            DropIndex("public.MessageHeaderResIndexToken", "ix_Code");
            DropIndex("public.MessageHeaderResIndexString", new[] { "ResourceId" });
            DropIndex("public.MessageHeaderResIndexString", "ix_SearchParamId");
            DropIndex("public.MessageHeaderResIndexString", "ix_String");
            DropIndex("public.MessageHeaderResIndexReference", new[] { "ResourceId" });
            DropIndex("public.MessageHeaderResIndexReference", "ix_SearchParamId");
            DropIndex("public.MessageHeaderResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.MessageHeaderResIndexReference", "ix_RefFhirId");
            DropIndex("public.MessageHeaderResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.MessageHeaderResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.MessageHeaderResIndexQuantity", "ix_System");
            DropIndex("public.MessageHeaderResIndexQuantity", "ix_Code");
            DropIndex("public.MessageHeaderResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.MessageHeaderResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.MessageHeaderResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.MessageHeaderResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.MessageHeaderRes", new[] { "FhirReleaseId" });
            DropIndex("public.MessageHeaderRes", "ix_LastUpdated");
            DropIndex("public.MessageHeaderRes", "ix_IsDeleted");
            DropIndex("public.MessageHeaderRes", "uq_FhirIdAndVersionId");
            DropIndex("public.MessageHeaderRes", "ix_IsCurrent");
            DropIndex("public.MessageDefinitionResIndexUri", new[] { "ResourceId" });
            DropIndex("public.MessageDefinitionResIndexUri", "ix_SearchParamId");
            DropIndex("public.MessageDefinitionResIndexUri", "ix_Uri");
            DropIndex("public.MessageDefinitionResIndexToken", new[] { "ResourceId" });
            DropIndex("public.MessageDefinitionResIndexToken", "ix_SearchParamId");
            DropIndex("public.MessageDefinitionResIndexToken", "ix_System");
            DropIndex("public.MessageDefinitionResIndexToken", "ix_Code");
            DropIndex("public.MessageDefinitionResIndexString", new[] { "ResourceId" });
            DropIndex("public.MessageDefinitionResIndexString", "ix_SearchParamId");
            DropIndex("public.MessageDefinitionResIndexString", "ix_String");
            DropIndex("public.MessageDefinitionResIndexReference", new[] { "ResourceId" });
            DropIndex("public.MessageDefinitionResIndexReference", "ix_SearchParamId");
            DropIndex("public.MessageDefinitionResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.MessageDefinitionResIndexReference", "ix_RefFhirId");
            DropIndex("public.MessageDefinitionResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.MessageDefinitionResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.MessageDefinitionResIndexQuantity", "ix_System");
            DropIndex("public.MessageDefinitionResIndexQuantity", "ix_Code");
            DropIndex("public.MessageDefinitionResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.MessageDefinitionResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.MessageDefinitionResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.MessageDefinitionResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.MessageDefinitionRes", new[] { "FhirReleaseId" });
            DropIndex("public.MessageDefinitionRes", "ix_LastUpdated");
            DropIndex("public.MessageDefinitionRes", "ix_IsDeleted");
            DropIndex("public.MessageDefinitionRes", "uq_FhirIdAndVersionId");
            DropIndex("public.MessageDefinitionRes", "ix_IsCurrent");
            DropIndex("public.MedicationStatementResIndexUri", new[] { "ResourceId" });
            DropIndex("public.MedicationStatementResIndexUri", "ix_SearchParamId");
            DropIndex("public.MedicationStatementResIndexUri", "ix_Uri");
            DropIndex("public.MedicationStatementResIndexToken", new[] { "ResourceId" });
            DropIndex("public.MedicationStatementResIndexToken", "ix_SearchParamId");
            DropIndex("public.MedicationStatementResIndexToken", "ix_System");
            DropIndex("public.MedicationStatementResIndexToken", "ix_Code");
            DropIndex("public.MedicationStatementResIndexString", new[] { "ResourceId" });
            DropIndex("public.MedicationStatementResIndexString", "ix_SearchParamId");
            DropIndex("public.MedicationStatementResIndexString", "ix_String");
            DropIndex("public.MedicationStatementResIndexReference", new[] { "ResourceId" });
            DropIndex("public.MedicationStatementResIndexReference", "ix_SearchParamId");
            DropIndex("public.MedicationStatementResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.MedicationStatementResIndexReference", "ix_RefFhirId");
            DropIndex("public.MedicationStatementResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.MedicationStatementResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.MedicationStatementResIndexQuantity", "ix_System");
            DropIndex("public.MedicationStatementResIndexQuantity", "ix_Code");
            DropIndex("public.MedicationStatementResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.MedicationStatementResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.MedicationStatementResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.MedicationStatementResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.MedicationStatementRes", new[] { "FhirReleaseId" });
            DropIndex("public.MedicationStatementRes", "ix_LastUpdated");
            DropIndex("public.MedicationStatementRes", "ix_IsDeleted");
            DropIndex("public.MedicationStatementRes", "uq_FhirIdAndVersionId");
            DropIndex("public.MedicationStatementRes", "ix_IsCurrent");
            DropIndex("public.MedicationRequestResIndexUri", new[] { "ResourceId" });
            DropIndex("public.MedicationRequestResIndexUri", "ix_SearchParamId");
            DropIndex("public.MedicationRequestResIndexUri", "ix_Uri");
            DropIndex("public.MedicationRequestResIndexToken", new[] { "ResourceId" });
            DropIndex("public.MedicationRequestResIndexToken", "ix_SearchParamId");
            DropIndex("public.MedicationRequestResIndexToken", "ix_System");
            DropIndex("public.MedicationRequestResIndexToken", "ix_Code");
            DropIndex("public.MedicationRequestResIndexString", new[] { "ResourceId" });
            DropIndex("public.MedicationRequestResIndexString", "ix_SearchParamId");
            DropIndex("public.MedicationRequestResIndexString", "ix_String");
            DropIndex("public.MedicationRequestResIndexReference", new[] { "ResourceId" });
            DropIndex("public.MedicationRequestResIndexReference", "ix_SearchParamId");
            DropIndex("public.MedicationRequestResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.MedicationRequestResIndexReference", "ix_RefFhirId");
            DropIndex("public.MedicationRequestResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.MedicationRequestResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.MedicationRequestResIndexQuantity", "ix_System");
            DropIndex("public.MedicationRequestResIndexQuantity", "ix_Code");
            DropIndex("public.MedicationRequestResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.MedicationRequestResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.MedicationRequestResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.MedicationRequestResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.MedicationRequestRes", new[] { "FhirReleaseId" });
            DropIndex("public.MedicationRequestRes", "ix_LastUpdated");
            DropIndex("public.MedicationRequestRes", "ix_IsDeleted");
            DropIndex("public.MedicationRequestRes", "uq_FhirIdAndVersionId");
            DropIndex("public.MedicationRequestRes", "ix_IsCurrent");
            DropIndex("public.MedicationResIndexUri", new[] { "ResourceId" });
            DropIndex("public.MedicationResIndexUri", "ix_SearchParamId");
            DropIndex("public.MedicationResIndexUri", "ix_Uri");
            DropIndex("public.MedicationResIndexToken", new[] { "ResourceId" });
            DropIndex("public.MedicationResIndexToken", "ix_SearchParamId");
            DropIndex("public.MedicationResIndexToken", "ix_System");
            DropIndex("public.MedicationResIndexToken", "ix_Code");
            DropIndex("public.MedicationResIndexString", new[] { "ResourceId" });
            DropIndex("public.MedicationResIndexString", "ix_SearchParamId");
            DropIndex("public.MedicationResIndexString", "ix_String");
            DropIndex("public.MedicationResIndexReference", new[] { "ResourceId" });
            DropIndex("public.MedicationResIndexReference", "ix_SearchParamId");
            DropIndex("public.MedicationResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.MedicationResIndexReference", "ix_RefFhirId");
            DropIndex("public.MedicationResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.MedicationResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.MedicationResIndexQuantity", "ix_System");
            DropIndex("public.MedicationResIndexQuantity", "ix_Code");
            DropIndex("public.MedicationResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.MedicationResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.MedicationResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.MedicationResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.MedicationRes", new[] { "FhirReleaseId" });
            DropIndex("public.MedicationRes", "ix_LastUpdated");
            DropIndex("public.MedicationRes", "ix_IsDeleted");
            DropIndex("public.MedicationRes", "uq_FhirIdAndVersionId");
            DropIndex("public.MedicationRes", "ix_IsCurrent");
            DropIndex("public.MedicationDispenseResIndexUri", new[] { "ResourceId" });
            DropIndex("public.MedicationDispenseResIndexUri", "ix_SearchParamId");
            DropIndex("public.MedicationDispenseResIndexUri", "ix_Uri");
            DropIndex("public.MedicationDispenseResIndexToken", new[] { "ResourceId" });
            DropIndex("public.MedicationDispenseResIndexToken", "ix_SearchParamId");
            DropIndex("public.MedicationDispenseResIndexToken", "ix_System");
            DropIndex("public.MedicationDispenseResIndexToken", "ix_Code");
            DropIndex("public.MedicationDispenseResIndexString", new[] { "ResourceId" });
            DropIndex("public.MedicationDispenseResIndexString", "ix_SearchParamId");
            DropIndex("public.MedicationDispenseResIndexString", "ix_String");
            DropIndex("public.MedicationDispenseResIndexReference", new[] { "ResourceId" });
            DropIndex("public.MedicationDispenseResIndexReference", "ix_SearchParamId");
            DropIndex("public.MedicationDispenseResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.MedicationDispenseResIndexReference", "ix_RefFhirId");
            DropIndex("public.MedicationDispenseResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.MedicationDispenseResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.MedicationDispenseResIndexQuantity", "ix_System");
            DropIndex("public.MedicationDispenseResIndexQuantity", "ix_Code");
            DropIndex("public.MedicationDispenseResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.MedicationDispenseResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.MedicationDispenseResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.MedicationDispenseResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.MedicationDispenseRes", new[] { "FhirReleaseId" });
            DropIndex("public.MedicationDispenseRes", "ix_LastUpdated");
            DropIndex("public.MedicationDispenseRes", "ix_IsDeleted");
            DropIndex("public.MedicationDispenseRes", "uq_FhirIdAndVersionId");
            DropIndex("public.MedicationDispenseRes", "ix_IsCurrent");
            DropIndex("public.MedicationAdministrationResIndexUri", new[] { "ResourceId" });
            DropIndex("public.MedicationAdministrationResIndexUri", "ix_SearchParamId");
            DropIndex("public.MedicationAdministrationResIndexUri", "ix_Uri");
            DropIndex("public.MedicationAdministrationResIndexToken", new[] { "ResourceId" });
            DropIndex("public.MedicationAdministrationResIndexToken", "ix_SearchParamId");
            DropIndex("public.MedicationAdministrationResIndexToken", "ix_System");
            DropIndex("public.MedicationAdministrationResIndexToken", "ix_Code");
            DropIndex("public.MedicationAdministrationResIndexString", new[] { "ResourceId" });
            DropIndex("public.MedicationAdministrationResIndexString", "ix_SearchParamId");
            DropIndex("public.MedicationAdministrationResIndexString", "ix_String");
            DropIndex("public.MedicationAdministrationResIndexReference", new[] { "ResourceId" });
            DropIndex("public.MedicationAdministrationResIndexReference", "ix_SearchParamId");
            DropIndex("public.MedicationAdministrationResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.MedicationAdministrationResIndexReference", "ix_RefFhirId");
            DropIndex("public.MedicationAdministrationResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.MedicationAdministrationResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.MedicationAdministrationResIndexQuantity", "ix_System");
            DropIndex("public.MedicationAdministrationResIndexQuantity", "ix_Code");
            DropIndex("public.MedicationAdministrationResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.MedicationAdministrationResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.MedicationAdministrationResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.MedicationAdministrationResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.MedicationAdministrationRes", new[] { "FhirReleaseId" });
            DropIndex("public.MedicationAdministrationRes", "ix_LastUpdated");
            DropIndex("public.MedicationAdministrationRes", "ix_IsDeleted");
            DropIndex("public.MedicationAdministrationRes", "uq_FhirIdAndVersionId");
            DropIndex("public.MedicationAdministrationRes", "ix_IsCurrent");
            DropIndex("public.MediaResIndexUri", new[] { "ResourceId" });
            DropIndex("public.MediaResIndexUri", "ix_SearchParamId");
            DropIndex("public.MediaResIndexUri", "ix_Uri");
            DropIndex("public.MediaResIndexToken", new[] { "ResourceId" });
            DropIndex("public.MediaResIndexToken", "ix_SearchParamId");
            DropIndex("public.MediaResIndexToken", "ix_System");
            DropIndex("public.MediaResIndexToken", "ix_Code");
            DropIndex("public.MediaResIndexString", new[] { "ResourceId" });
            DropIndex("public.MediaResIndexString", "ix_SearchParamId");
            DropIndex("public.MediaResIndexString", "ix_String");
            DropIndex("public.MediaResIndexReference", new[] { "ResourceId" });
            DropIndex("public.MediaResIndexReference", "ix_SearchParamId");
            DropIndex("public.MediaResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.MediaResIndexReference", "ix_RefFhirId");
            DropIndex("public.MediaResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.MediaResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.MediaResIndexQuantity", "ix_System");
            DropIndex("public.MediaResIndexQuantity", "ix_Code");
            DropIndex("public.MediaResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.MediaResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.MediaResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.MediaResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.MediaRes", new[] { "FhirReleaseId" });
            DropIndex("public.MediaRes", "ix_LastUpdated");
            DropIndex("public.MediaRes", "ix_IsDeleted");
            DropIndex("public.MediaRes", "uq_FhirIdAndVersionId");
            DropIndex("public.MediaRes", "ix_IsCurrent");
            DropIndex("public.MeasureReportResIndexUri", new[] { "ResourceId" });
            DropIndex("public.MeasureReportResIndexUri", "ix_SearchParamId");
            DropIndex("public.MeasureReportResIndexUri", "ix_Uri");
            DropIndex("public.MeasureReportResIndexToken", new[] { "ResourceId" });
            DropIndex("public.MeasureReportResIndexToken", "ix_SearchParamId");
            DropIndex("public.MeasureReportResIndexToken", "ix_System");
            DropIndex("public.MeasureReportResIndexToken", "ix_Code");
            DropIndex("public.MeasureReportResIndexString", new[] { "ResourceId" });
            DropIndex("public.MeasureReportResIndexString", "ix_SearchParamId");
            DropIndex("public.MeasureReportResIndexString", "ix_String");
            DropIndex("public.MeasureReportResIndexReference", new[] { "ResourceId" });
            DropIndex("public.MeasureReportResIndexReference", "ix_SearchParamId");
            DropIndex("public.MeasureReportResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.MeasureReportResIndexReference", "ix_RefFhirId");
            DropIndex("public.MeasureReportResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.MeasureReportResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.MeasureReportResIndexQuantity", "ix_System");
            DropIndex("public.MeasureReportResIndexQuantity", "ix_Code");
            DropIndex("public.MeasureReportResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.MeasureReportResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.MeasureReportResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.MeasureReportResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.MeasureReportRes", new[] { "FhirReleaseId" });
            DropIndex("public.MeasureReportRes", "ix_LastUpdated");
            DropIndex("public.MeasureReportRes", "ix_IsDeleted");
            DropIndex("public.MeasureReportRes", "uq_FhirIdAndVersionId");
            DropIndex("public.MeasureReportRes", "ix_IsCurrent");
            DropIndex("public.MeasureResIndexUri", new[] { "ResourceId" });
            DropIndex("public.MeasureResIndexUri", "ix_SearchParamId");
            DropIndex("public.MeasureResIndexUri", "ix_Uri");
            DropIndex("public.MeasureResIndexToken", new[] { "ResourceId" });
            DropIndex("public.MeasureResIndexToken", "ix_SearchParamId");
            DropIndex("public.MeasureResIndexToken", "ix_System");
            DropIndex("public.MeasureResIndexToken", "ix_Code");
            DropIndex("public.MeasureResIndexString", new[] { "ResourceId" });
            DropIndex("public.MeasureResIndexString", "ix_SearchParamId");
            DropIndex("public.MeasureResIndexString", "ix_String");
            DropIndex("public.MeasureResIndexReference", new[] { "ResourceId" });
            DropIndex("public.MeasureResIndexReference", "ix_SearchParamId");
            DropIndex("public.MeasureResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.MeasureResIndexReference", "ix_RefFhirId");
            DropIndex("public.MeasureResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.MeasureResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.MeasureResIndexQuantity", "ix_System");
            DropIndex("public.MeasureResIndexQuantity", "ix_Code");
            DropIndex("public.MeasureResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.MeasureResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.MeasureResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.MeasureResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.MeasureRes", new[] { "FhirReleaseId" });
            DropIndex("public.MeasureRes", "ix_LastUpdated");
            DropIndex("public.MeasureRes", "ix_IsDeleted");
            DropIndex("public.MeasureRes", "uq_FhirIdAndVersionId");
            DropIndex("public.MeasureRes", "ix_IsCurrent");
            DropIndex("public.LocationResIndexUri", new[] { "ResourceId" });
            DropIndex("public.LocationResIndexUri", "ix_SearchParamId");
            DropIndex("public.LocationResIndexUri", "ix_Uri");
            DropIndex("public.LocationResIndexToken", new[] { "ResourceId" });
            DropIndex("public.LocationResIndexToken", "ix_SearchParamId");
            DropIndex("public.LocationResIndexToken", "ix_System");
            DropIndex("public.LocationResIndexToken", "ix_Code");
            DropIndex("public.LocationResIndexString", new[] { "ResourceId" });
            DropIndex("public.LocationResIndexString", "ix_SearchParamId");
            DropIndex("public.LocationResIndexString", "ix_String");
            DropIndex("public.LocationResIndexReference", new[] { "ResourceId" });
            DropIndex("public.LocationResIndexReference", "ix_SearchParamId");
            DropIndex("public.LocationResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.LocationResIndexReference", "ix_RefFhirId");
            DropIndex("public.LocationResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.LocationResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.LocationResIndexQuantity", "ix_System");
            DropIndex("public.LocationResIndexQuantity", "ix_Code");
            DropIndex("public.LocationResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.LocationResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.LocationResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.LocationResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.LocationRes", new[] { "FhirReleaseId" });
            DropIndex("public.LocationRes", "ix_LastUpdated");
            DropIndex("public.LocationRes", "ix_IsDeleted");
            DropIndex("public.LocationRes", "uq_FhirIdAndVersionId");
            DropIndex("public.LocationRes", "ix_IsCurrent");
            DropIndex("public.ListResIndexUri", new[] { "ResourceId" });
            DropIndex("public.ListResIndexUri", "ix_SearchParamId");
            DropIndex("public.ListResIndexUri", "ix_Uri");
            DropIndex("public.ListResIndexToken", new[] { "ResourceId" });
            DropIndex("public.ListResIndexToken", "ix_SearchParamId");
            DropIndex("public.ListResIndexToken", "ix_System");
            DropIndex("public.ListResIndexToken", "ix_Code");
            DropIndex("public.ListResIndexString", new[] { "ResourceId" });
            DropIndex("public.ListResIndexString", "ix_SearchParamId");
            DropIndex("public.ListResIndexString", "ix_String");
            DropIndex("public.ListResIndexReference", new[] { "ResourceId" });
            DropIndex("public.ListResIndexReference", "ix_SearchParamId");
            DropIndex("public.ListResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.ListResIndexReference", "ix_RefFhirId");
            DropIndex("public.ListResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.ListResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.ListResIndexQuantity", "ix_System");
            DropIndex("public.ListResIndexQuantity", "ix_Code");
            DropIndex("public.ListResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.ListResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.ListResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.ListResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.ListRes", new[] { "FhirReleaseId" });
            DropIndex("public.ListRes", "ix_LastUpdated");
            DropIndex("public.ListRes", "ix_IsDeleted");
            DropIndex("public.ListRes", "uq_FhirIdAndVersionId");
            DropIndex("public.ListRes", "ix_IsCurrent");
            DropIndex("public.LinkageResIndexUri", new[] { "ResourceId" });
            DropIndex("public.LinkageResIndexUri", "ix_SearchParamId");
            DropIndex("public.LinkageResIndexUri", "ix_Uri");
            DropIndex("public.LinkageResIndexToken", new[] { "ResourceId" });
            DropIndex("public.LinkageResIndexToken", "ix_SearchParamId");
            DropIndex("public.LinkageResIndexToken", "ix_System");
            DropIndex("public.LinkageResIndexToken", "ix_Code");
            DropIndex("public.LinkageResIndexString", new[] { "ResourceId" });
            DropIndex("public.LinkageResIndexString", "ix_SearchParamId");
            DropIndex("public.LinkageResIndexString", "ix_String");
            DropIndex("public.LinkageResIndexReference", new[] { "ResourceId" });
            DropIndex("public.LinkageResIndexReference", "ix_SearchParamId");
            DropIndex("public.LinkageResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.LinkageResIndexReference", "ix_RefFhirId");
            DropIndex("public.LinkageResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.LinkageResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.LinkageResIndexQuantity", "ix_System");
            DropIndex("public.LinkageResIndexQuantity", "ix_Code");
            DropIndex("public.LinkageResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.LinkageResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.LinkageResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.LinkageResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.LinkageRes", new[] { "FhirReleaseId" });
            DropIndex("public.LinkageRes", "ix_LastUpdated");
            DropIndex("public.LinkageRes", "ix_IsDeleted");
            DropIndex("public.LinkageRes", "uq_FhirIdAndVersionId");
            DropIndex("public.LinkageRes", "ix_IsCurrent");
            DropIndex("public.LibraryResIndexUri", new[] { "ResourceId" });
            DropIndex("public.LibraryResIndexUri", "ix_SearchParamId");
            DropIndex("public.LibraryResIndexUri", "ix_Uri");
            DropIndex("public.LibraryResIndexToken", new[] { "ResourceId" });
            DropIndex("public.LibraryResIndexToken", "ix_SearchParamId");
            DropIndex("public.LibraryResIndexToken", "ix_System");
            DropIndex("public.LibraryResIndexToken", "ix_Code");
            DropIndex("public.LibraryResIndexString", new[] { "ResourceId" });
            DropIndex("public.LibraryResIndexString", "ix_SearchParamId");
            DropIndex("public.LibraryResIndexString", "ix_String");
            DropIndex("public.LibraryResIndexReference", new[] { "ResourceId" });
            DropIndex("public.LibraryResIndexReference", "ix_SearchParamId");
            DropIndex("public.LibraryResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.LibraryResIndexReference", "ix_RefFhirId");
            DropIndex("public.LibraryResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.LibraryResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.LibraryResIndexQuantity", "ix_System");
            DropIndex("public.LibraryResIndexQuantity", "ix_Code");
            DropIndex("public.LibraryResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.LibraryResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.LibraryResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.LibraryResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.LibraryRes", new[] { "FhirReleaseId" });
            DropIndex("public.LibraryRes", "ix_LastUpdated");
            DropIndex("public.LibraryRes", "ix_IsDeleted");
            DropIndex("public.LibraryRes", "uq_FhirIdAndVersionId");
            DropIndex("public.LibraryRes", "ix_IsCurrent");
            DropIndex("public.ImplementationGuideResIndexUri", new[] { "ResourceId" });
            DropIndex("public.ImplementationGuideResIndexUri", "ix_SearchParamId");
            DropIndex("public.ImplementationGuideResIndexUri", "ix_Uri");
            DropIndex("public.ImplementationGuideResIndexToken", new[] { "ResourceId" });
            DropIndex("public.ImplementationGuideResIndexToken", "ix_SearchParamId");
            DropIndex("public.ImplementationGuideResIndexToken", "ix_System");
            DropIndex("public.ImplementationGuideResIndexToken", "ix_Code");
            DropIndex("public.ImplementationGuideResIndexString", new[] { "ResourceId" });
            DropIndex("public.ImplementationGuideResIndexString", "ix_SearchParamId");
            DropIndex("public.ImplementationGuideResIndexString", "ix_String");
            DropIndex("public.ImplementationGuideResIndexReference", new[] { "ResourceId" });
            DropIndex("public.ImplementationGuideResIndexReference", "ix_SearchParamId");
            DropIndex("public.ImplementationGuideResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.ImplementationGuideResIndexReference", "ix_RefFhirId");
            DropIndex("public.ImplementationGuideResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.ImplementationGuideResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.ImplementationGuideResIndexQuantity", "ix_System");
            DropIndex("public.ImplementationGuideResIndexQuantity", "ix_Code");
            DropIndex("public.ImplementationGuideResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.ImplementationGuideResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.ImplementationGuideResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.ImplementationGuideResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.ImplementationGuideRes", new[] { "FhirReleaseId" });
            DropIndex("public.ImplementationGuideRes", "ix_LastUpdated");
            DropIndex("public.ImplementationGuideRes", "ix_IsDeleted");
            DropIndex("public.ImplementationGuideRes", "uq_FhirIdAndVersionId");
            DropIndex("public.ImplementationGuideRes", "ix_IsCurrent");
            DropIndex("public.ImmunizationRecommendationResIndexUri", new[] { "ResourceId" });
            DropIndex("public.ImmunizationRecommendationResIndexUri", "ix_SearchParamId");
            DropIndex("public.ImmunizationRecommendationResIndexUri", "ix_Uri");
            DropIndex("public.ImmunizationRecommendationResIndexToken", new[] { "ResourceId" });
            DropIndex("public.ImmunizationRecommendationResIndexToken", "ix_SearchParamId");
            DropIndex("public.ImmunizationRecommendationResIndexToken", "ix_System");
            DropIndex("public.ImmunizationRecommendationResIndexToken", "ix_Code");
            DropIndex("public.ImmunizationRecommendationResIndexString", new[] { "ResourceId" });
            DropIndex("public.ImmunizationRecommendationResIndexString", "ix_SearchParamId");
            DropIndex("public.ImmunizationRecommendationResIndexString", "ix_String");
            DropIndex("public.ImmunizationRecommendationResIndexReference", new[] { "ResourceId" });
            DropIndex("public.ImmunizationRecommendationResIndexReference", "ix_SearchParamId");
            DropIndex("public.ImmunizationRecommendationResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.ImmunizationRecommendationResIndexReference", "ix_RefFhirId");
            DropIndex("public.ImmunizationRecommendationResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.ImmunizationRecommendationResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.ImmunizationRecommendationResIndexQuantity", "ix_System");
            DropIndex("public.ImmunizationRecommendationResIndexQuantity", "ix_Code");
            DropIndex("public.ImmunizationRecommendationResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.ImmunizationRecommendationResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.ImmunizationRecommendationResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.ImmunizationRecommendationResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.ImmunizationRecommendationRes", new[] { "FhirReleaseId" });
            DropIndex("public.ImmunizationRecommendationRes", "ix_LastUpdated");
            DropIndex("public.ImmunizationRecommendationRes", "ix_IsDeleted");
            DropIndex("public.ImmunizationRecommendationRes", "uq_FhirIdAndVersionId");
            DropIndex("public.ImmunizationRecommendationRes", "ix_IsCurrent");
            DropIndex("public.ImmunizationResIndexUri", new[] { "ResourceId" });
            DropIndex("public.ImmunizationResIndexUri", "ix_SearchParamId");
            DropIndex("public.ImmunizationResIndexUri", "ix_Uri");
            DropIndex("public.ImmunizationResIndexToken", new[] { "ResourceId" });
            DropIndex("public.ImmunizationResIndexToken", "ix_SearchParamId");
            DropIndex("public.ImmunizationResIndexToken", "ix_System");
            DropIndex("public.ImmunizationResIndexToken", "ix_Code");
            DropIndex("public.ImmunizationResIndexString", new[] { "ResourceId" });
            DropIndex("public.ImmunizationResIndexString", "ix_SearchParamId");
            DropIndex("public.ImmunizationResIndexString", "ix_String");
            DropIndex("public.ImmunizationResIndexReference", new[] { "ResourceId" });
            DropIndex("public.ImmunizationResIndexReference", "ix_SearchParamId");
            DropIndex("public.ImmunizationResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.ImmunizationResIndexReference", "ix_RefFhirId");
            DropIndex("public.ImmunizationResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.ImmunizationResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.ImmunizationResIndexQuantity", "ix_System");
            DropIndex("public.ImmunizationResIndexQuantity", "ix_Code");
            DropIndex("public.ImmunizationResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.ImmunizationResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.ImmunizationResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.ImmunizationResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.ImmunizationRes", new[] { "FhirReleaseId" });
            DropIndex("public.ImmunizationRes", "ix_LastUpdated");
            DropIndex("public.ImmunizationRes", "ix_IsDeleted");
            DropIndex("public.ImmunizationRes", "uq_FhirIdAndVersionId");
            DropIndex("public.ImmunizationRes", "ix_IsCurrent");
            DropIndex("public.ImagingStudyResIndexUri", new[] { "ResourceId" });
            DropIndex("public.ImagingStudyResIndexUri", "ix_SearchParamId");
            DropIndex("public.ImagingStudyResIndexUri", "ix_Uri");
            DropIndex("public.ImagingStudyResIndexToken", new[] { "ResourceId" });
            DropIndex("public.ImagingStudyResIndexToken", "ix_SearchParamId");
            DropIndex("public.ImagingStudyResIndexToken", "ix_System");
            DropIndex("public.ImagingStudyResIndexToken", "ix_Code");
            DropIndex("public.ImagingStudyResIndexString", new[] { "ResourceId" });
            DropIndex("public.ImagingStudyResIndexString", "ix_SearchParamId");
            DropIndex("public.ImagingStudyResIndexString", "ix_String");
            DropIndex("public.ImagingStudyResIndexReference", new[] { "ResourceId" });
            DropIndex("public.ImagingStudyResIndexReference", "ix_SearchParamId");
            DropIndex("public.ImagingStudyResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.ImagingStudyResIndexReference", "ix_RefFhirId");
            DropIndex("public.ImagingStudyResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.ImagingStudyResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.ImagingStudyResIndexQuantity", "ix_System");
            DropIndex("public.ImagingStudyResIndexQuantity", "ix_Code");
            DropIndex("public.ImagingStudyResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.ImagingStudyResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.ImagingStudyResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.ImagingStudyResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.ImagingStudyRes", new[] { "FhirReleaseId" });
            DropIndex("public.ImagingStudyRes", "ix_LastUpdated");
            DropIndex("public.ImagingStudyRes", "ix_IsDeleted");
            DropIndex("public.ImagingStudyRes", "uq_FhirIdAndVersionId");
            DropIndex("public.ImagingStudyRes", "ix_IsCurrent");
            DropIndex("public.ImagingManifestResIndexUri", new[] { "ResourceId" });
            DropIndex("public.ImagingManifestResIndexUri", "ix_SearchParamId");
            DropIndex("public.ImagingManifestResIndexUri", "ix_Uri");
            DropIndex("public.ImagingManifestResIndexToken", new[] { "ResourceId" });
            DropIndex("public.ImagingManifestResIndexToken", "ix_SearchParamId");
            DropIndex("public.ImagingManifestResIndexToken", "ix_System");
            DropIndex("public.ImagingManifestResIndexToken", "ix_Code");
            DropIndex("public.ImagingManifestResIndexString", new[] { "ResourceId" });
            DropIndex("public.ImagingManifestResIndexString", "ix_SearchParamId");
            DropIndex("public.ImagingManifestResIndexString", "ix_String");
            DropIndex("public.ImagingManifestResIndexReference", new[] { "ResourceId" });
            DropIndex("public.ImagingManifestResIndexReference", "ix_SearchParamId");
            DropIndex("public.ImagingManifestResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.ImagingManifestResIndexReference", "ix_RefFhirId");
            DropIndex("public.ImagingManifestResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.ImagingManifestResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.ImagingManifestResIndexQuantity", "ix_System");
            DropIndex("public.ImagingManifestResIndexQuantity", "ix_Code");
            DropIndex("public.ImagingManifestResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.ImagingManifestResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.ImagingManifestResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.ImagingManifestResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.ImagingManifestRes", new[] { "FhirReleaseId" });
            DropIndex("public.ImagingManifestRes", "ix_LastUpdated");
            DropIndex("public.ImagingManifestRes", "ix_IsDeleted");
            DropIndex("public.ImagingManifestRes", "uq_FhirIdAndVersionId");
            DropIndex("public.ImagingManifestRes", "ix_IsCurrent");
            DropIndex("public.HealthcareServiceResIndexUri", new[] { "ResourceId" });
            DropIndex("public.HealthcareServiceResIndexUri", "ix_SearchParamId");
            DropIndex("public.HealthcareServiceResIndexUri", "ix_Uri");
            DropIndex("public.HealthcareServiceResIndexToken", new[] { "ResourceId" });
            DropIndex("public.HealthcareServiceResIndexToken", "ix_SearchParamId");
            DropIndex("public.HealthcareServiceResIndexToken", "ix_System");
            DropIndex("public.HealthcareServiceResIndexToken", "ix_Code");
            DropIndex("public.HealthcareServiceResIndexString", new[] { "ResourceId" });
            DropIndex("public.HealthcareServiceResIndexString", "ix_SearchParamId");
            DropIndex("public.HealthcareServiceResIndexString", "ix_String");
            DropIndex("public.HealthcareServiceResIndexReference", new[] { "ResourceId" });
            DropIndex("public.HealthcareServiceResIndexReference", "ix_SearchParamId");
            DropIndex("public.HealthcareServiceResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.HealthcareServiceResIndexReference", "ix_RefFhirId");
            DropIndex("public.HealthcareServiceResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.HealthcareServiceResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.HealthcareServiceResIndexQuantity", "ix_System");
            DropIndex("public.HealthcareServiceResIndexQuantity", "ix_Code");
            DropIndex("public.HealthcareServiceResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.HealthcareServiceResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.HealthcareServiceResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.HealthcareServiceResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.HealthcareServiceRes", new[] { "FhirReleaseId" });
            DropIndex("public.HealthcareServiceRes", "ix_LastUpdated");
            DropIndex("public.HealthcareServiceRes", "ix_IsDeleted");
            DropIndex("public.HealthcareServiceRes", "uq_FhirIdAndVersionId");
            DropIndex("public.HealthcareServiceRes", "ix_IsCurrent");
            DropIndex("public.GuidanceResponseResIndexUri", new[] { "ResourceId" });
            DropIndex("public.GuidanceResponseResIndexUri", "ix_SearchParamId");
            DropIndex("public.GuidanceResponseResIndexUri", "ix_Uri");
            DropIndex("public.GuidanceResponseResIndexToken", new[] { "ResourceId" });
            DropIndex("public.GuidanceResponseResIndexToken", "ix_SearchParamId");
            DropIndex("public.GuidanceResponseResIndexToken", "ix_System");
            DropIndex("public.GuidanceResponseResIndexToken", "ix_Code");
            DropIndex("public.GuidanceResponseResIndexString", new[] { "ResourceId" });
            DropIndex("public.GuidanceResponseResIndexString", "ix_SearchParamId");
            DropIndex("public.GuidanceResponseResIndexString", "ix_String");
            DropIndex("public.GuidanceResponseResIndexReference", new[] { "ResourceId" });
            DropIndex("public.GuidanceResponseResIndexReference", "ix_SearchParamId");
            DropIndex("public.GuidanceResponseResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.GuidanceResponseResIndexReference", "ix_RefFhirId");
            DropIndex("public.GuidanceResponseResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.GuidanceResponseResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.GuidanceResponseResIndexQuantity", "ix_System");
            DropIndex("public.GuidanceResponseResIndexQuantity", "ix_Code");
            DropIndex("public.GuidanceResponseResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.GuidanceResponseResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.GuidanceResponseResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.GuidanceResponseResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.GuidanceResponseRes", new[] { "FhirReleaseId" });
            DropIndex("public.GuidanceResponseRes", "ix_LastUpdated");
            DropIndex("public.GuidanceResponseRes", "ix_IsDeleted");
            DropIndex("public.GuidanceResponseRes", "uq_FhirIdAndVersionId");
            DropIndex("public.GuidanceResponseRes", "ix_IsCurrent");
            DropIndex("public.GroupResIndexUri", new[] { "ResourceId" });
            DropIndex("public.GroupResIndexUri", "ix_SearchParamId");
            DropIndex("public.GroupResIndexUri", "ix_Uri");
            DropIndex("public.GroupResIndexToken", new[] { "ResourceId" });
            DropIndex("public.GroupResIndexToken", "ix_SearchParamId");
            DropIndex("public.GroupResIndexToken", "ix_System");
            DropIndex("public.GroupResIndexToken", "ix_Code");
            DropIndex("public.GroupResIndexString", new[] { "ResourceId" });
            DropIndex("public.GroupResIndexString", "ix_SearchParamId");
            DropIndex("public.GroupResIndexString", "ix_String");
            DropIndex("public.GroupResIndexReference", new[] { "ResourceId" });
            DropIndex("public.GroupResIndexReference", "ix_SearchParamId");
            DropIndex("public.GroupResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.GroupResIndexReference", "ix_RefFhirId");
            DropIndex("public.GroupResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.GroupResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.GroupResIndexQuantity", "ix_System");
            DropIndex("public.GroupResIndexQuantity", "ix_Code");
            DropIndex("public.GroupResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.GroupResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.GroupResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.GroupResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.GroupRes", new[] { "FhirReleaseId" });
            DropIndex("public.GroupRes", "ix_LastUpdated");
            DropIndex("public.GroupRes", "ix_IsDeleted");
            DropIndex("public.GroupRes", "uq_FhirIdAndVersionId");
            DropIndex("public.GroupRes", "ix_IsCurrent");
            DropIndex("public.GraphDefinitionResIndexUri", new[] { "ResourceId" });
            DropIndex("public.GraphDefinitionResIndexUri", "ix_SearchParamId");
            DropIndex("public.GraphDefinitionResIndexUri", "ix_Uri");
            DropIndex("public.GraphDefinitionResIndexToken", new[] { "ResourceId" });
            DropIndex("public.GraphDefinitionResIndexToken", "ix_SearchParamId");
            DropIndex("public.GraphDefinitionResIndexToken", "ix_System");
            DropIndex("public.GraphDefinitionResIndexToken", "ix_Code");
            DropIndex("public.GraphDefinitionResIndexString", new[] { "ResourceId" });
            DropIndex("public.GraphDefinitionResIndexString", "ix_SearchParamId");
            DropIndex("public.GraphDefinitionResIndexString", "ix_String");
            DropIndex("public.GraphDefinitionResIndexReference", new[] { "ResourceId" });
            DropIndex("public.GraphDefinitionResIndexReference", "ix_SearchParamId");
            DropIndex("public.GraphDefinitionResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.GraphDefinitionResIndexReference", "ix_RefFhirId");
            DropIndex("public.GraphDefinitionResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.GraphDefinitionResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.GraphDefinitionResIndexQuantity", "ix_System");
            DropIndex("public.GraphDefinitionResIndexQuantity", "ix_Code");
            DropIndex("public.GraphDefinitionResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.GraphDefinitionResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.GraphDefinitionResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.GraphDefinitionResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.GraphDefinitionRes", new[] { "FhirReleaseId" });
            DropIndex("public.GraphDefinitionRes", "ix_LastUpdated");
            DropIndex("public.GraphDefinitionRes", "ix_IsDeleted");
            DropIndex("public.GraphDefinitionRes", "uq_FhirIdAndVersionId");
            DropIndex("public.GraphDefinitionRes", "ix_IsCurrent");
            DropIndex("public.GoalResIndexUri", new[] { "ResourceId" });
            DropIndex("public.GoalResIndexUri", "ix_SearchParamId");
            DropIndex("public.GoalResIndexUri", "ix_Uri");
            DropIndex("public.GoalResIndexToken", new[] { "ResourceId" });
            DropIndex("public.GoalResIndexToken", "ix_SearchParamId");
            DropIndex("public.GoalResIndexToken", "ix_System");
            DropIndex("public.GoalResIndexToken", "ix_Code");
            DropIndex("public.GoalResIndexString", new[] { "ResourceId" });
            DropIndex("public.GoalResIndexString", "ix_SearchParamId");
            DropIndex("public.GoalResIndexString", "ix_String");
            DropIndex("public.GoalResIndexReference", new[] { "ResourceId" });
            DropIndex("public.GoalResIndexReference", "ix_SearchParamId");
            DropIndex("public.GoalResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.GoalResIndexReference", "ix_RefFhirId");
            DropIndex("public.GoalResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.GoalResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.GoalResIndexQuantity", "ix_System");
            DropIndex("public.GoalResIndexQuantity", "ix_Code");
            DropIndex("public.GoalResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.GoalResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.GoalResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.GoalResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.GoalRes", new[] { "FhirReleaseId" });
            DropIndex("public.GoalRes", "ix_LastUpdated");
            DropIndex("public.GoalRes", "ix_IsDeleted");
            DropIndex("public.GoalRes", "uq_FhirIdAndVersionId");
            DropIndex("public.GoalRes", "ix_IsCurrent");
            DropIndex("public.FlagResIndexUri", new[] { "ResourceId" });
            DropIndex("public.FlagResIndexUri", "ix_SearchParamId");
            DropIndex("public.FlagResIndexUri", "ix_Uri");
            DropIndex("public.FlagResIndexToken", new[] { "ResourceId" });
            DropIndex("public.FlagResIndexToken", "ix_SearchParamId");
            DropIndex("public.FlagResIndexToken", "ix_System");
            DropIndex("public.FlagResIndexToken", "ix_Code");
            DropIndex("public.FlagResIndexString", new[] { "ResourceId" });
            DropIndex("public.FlagResIndexString", "ix_SearchParamId");
            DropIndex("public.FlagResIndexString", "ix_String");
            DropIndex("public.FlagResIndexReference", new[] { "ResourceId" });
            DropIndex("public.FlagResIndexReference", "ix_SearchParamId");
            DropIndex("public.FlagResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.FlagResIndexReference", "ix_RefFhirId");
            DropIndex("public.FlagResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.FlagResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.FlagResIndexQuantity", "ix_System");
            DropIndex("public.FlagResIndexQuantity", "ix_Code");
            DropIndex("public.FlagResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.FlagResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.FlagResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.FlagResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.FlagRes", new[] { "FhirReleaseId" });
            DropIndex("public.FlagRes", "ix_LastUpdated");
            DropIndex("public.FlagRes", "ix_IsDeleted");
            DropIndex("public.FlagRes", "uq_FhirIdAndVersionId");
            DropIndex("public.FlagRes", "ix_IsCurrent");
            DropIndex("public.FamilyMemberHistoryResIndexUri", new[] { "ResourceId" });
            DropIndex("public.FamilyMemberHistoryResIndexUri", "ix_SearchParamId");
            DropIndex("public.FamilyMemberHistoryResIndexUri", "ix_Uri");
            DropIndex("public.FamilyMemberHistoryResIndexToken", new[] { "ResourceId" });
            DropIndex("public.FamilyMemberHistoryResIndexToken", "ix_SearchParamId");
            DropIndex("public.FamilyMemberHistoryResIndexToken", "ix_System");
            DropIndex("public.FamilyMemberHistoryResIndexToken", "ix_Code");
            DropIndex("public.FamilyMemberHistoryResIndexString", new[] { "ResourceId" });
            DropIndex("public.FamilyMemberHistoryResIndexString", "ix_SearchParamId");
            DropIndex("public.FamilyMemberHistoryResIndexString", "ix_String");
            DropIndex("public.FamilyMemberHistoryResIndexReference", new[] { "ResourceId" });
            DropIndex("public.FamilyMemberHistoryResIndexReference", "ix_SearchParamId");
            DropIndex("public.FamilyMemberHistoryResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.FamilyMemberHistoryResIndexReference", "ix_RefFhirId");
            DropIndex("public.FamilyMemberHistoryResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.FamilyMemberHistoryResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.FamilyMemberHistoryResIndexQuantity", "ix_System");
            DropIndex("public.FamilyMemberHistoryResIndexQuantity", "ix_Code");
            DropIndex("public.FamilyMemberHistoryResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.FamilyMemberHistoryResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.FamilyMemberHistoryResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.FamilyMemberHistoryResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.FamilyMemberHistoryRes", new[] { "FhirReleaseId" });
            DropIndex("public.FamilyMemberHistoryRes", "ix_LastUpdated");
            DropIndex("public.FamilyMemberHistoryRes", "ix_IsDeleted");
            DropIndex("public.FamilyMemberHistoryRes", "uq_FhirIdAndVersionId");
            DropIndex("public.FamilyMemberHistoryRes", "ix_IsCurrent");
            DropIndex("public.ExplanationOfBenefitResIndexUri", new[] { "ResourceId" });
            DropIndex("public.ExplanationOfBenefitResIndexUri", "ix_SearchParamId");
            DropIndex("public.ExplanationOfBenefitResIndexUri", "ix_Uri");
            DropIndex("public.ExplanationOfBenefitResIndexToken", new[] { "ResourceId" });
            DropIndex("public.ExplanationOfBenefitResIndexToken", "ix_SearchParamId");
            DropIndex("public.ExplanationOfBenefitResIndexToken", "ix_System");
            DropIndex("public.ExplanationOfBenefitResIndexToken", "ix_Code");
            DropIndex("public.ExplanationOfBenefitResIndexString", new[] { "ResourceId" });
            DropIndex("public.ExplanationOfBenefitResIndexString", "ix_SearchParamId");
            DropIndex("public.ExplanationOfBenefitResIndexString", "ix_String");
            DropIndex("public.ExplanationOfBenefitResIndexReference", new[] { "ResourceId" });
            DropIndex("public.ExplanationOfBenefitResIndexReference", "ix_SearchParamId");
            DropIndex("public.ExplanationOfBenefitResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.ExplanationOfBenefitResIndexReference", "ix_RefFhirId");
            DropIndex("public.ExplanationOfBenefitResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.ExplanationOfBenefitResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.ExplanationOfBenefitResIndexQuantity", "ix_System");
            DropIndex("public.ExplanationOfBenefitResIndexQuantity", "ix_Code");
            DropIndex("public.ExplanationOfBenefitResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.ExplanationOfBenefitResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.ExplanationOfBenefitResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.ExplanationOfBenefitResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.ExplanationOfBenefitRes", new[] { "FhirReleaseId" });
            DropIndex("public.ExplanationOfBenefitRes", "ix_LastUpdated");
            DropIndex("public.ExplanationOfBenefitRes", "ix_IsDeleted");
            DropIndex("public.ExplanationOfBenefitRes", "uq_FhirIdAndVersionId");
            DropIndex("public.ExplanationOfBenefitRes", "ix_IsCurrent");
            DropIndex("public.ExpansionProfileResIndexUri", new[] { "ResourceId" });
            DropIndex("public.ExpansionProfileResIndexUri", "ix_SearchParamId");
            DropIndex("public.ExpansionProfileResIndexUri", "ix_Uri");
            DropIndex("public.ExpansionProfileResIndexToken", new[] { "ResourceId" });
            DropIndex("public.ExpansionProfileResIndexToken", "ix_SearchParamId");
            DropIndex("public.ExpansionProfileResIndexToken", "ix_System");
            DropIndex("public.ExpansionProfileResIndexToken", "ix_Code");
            DropIndex("public.ExpansionProfileResIndexString", new[] { "ResourceId" });
            DropIndex("public.ExpansionProfileResIndexString", "ix_SearchParamId");
            DropIndex("public.ExpansionProfileResIndexString", "ix_String");
            DropIndex("public.ExpansionProfileResIndexReference", new[] { "ResourceId" });
            DropIndex("public.ExpansionProfileResIndexReference", "ix_SearchParamId");
            DropIndex("public.ExpansionProfileResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.ExpansionProfileResIndexReference", "ix_RefFhirId");
            DropIndex("public.ExpansionProfileResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.ExpansionProfileResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.ExpansionProfileResIndexQuantity", "ix_System");
            DropIndex("public.ExpansionProfileResIndexQuantity", "ix_Code");
            DropIndex("public.ExpansionProfileResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.ExpansionProfileResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.ExpansionProfileResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.ExpansionProfileResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.ExpansionProfileRes", new[] { "FhirReleaseId" });
            DropIndex("public.ExpansionProfileRes", "ix_LastUpdated");
            DropIndex("public.ExpansionProfileRes", "ix_IsDeleted");
            DropIndex("public.ExpansionProfileRes", "uq_FhirIdAndVersionId");
            DropIndex("public.ExpansionProfileRes", "ix_IsCurrent");
            DropIndex("public.EpisodeOfCareResIndexUri", new[] { "ResourceId" });
            DropIndex("public.EpisodeOfCareResIndexUri", "ix_SearchParamId");
            DropIndex("public.EpisodeOfCareResIndexUri", "ix_Uri");
            DropIndex("public.EpisodeOfCareResIndexToken", new[] { "ResourceId" });
            DropIndex("public.EpisodeOfCareResIndexToken", "ix_SearchParamId");
            DropIndex("public.EpisodeOfCareResIndexToken", "ix_System");
            DropIndex("public.EpisodeOfCareResIndexToken", "ix_Code");
            DropIndex("public.EpisodeOfCareResIndexString", new[] { "ResourceId" });
            DropIndex("public.EpisodeOfCareResIndexString", "ix_SearchParamId");
            DropIndex("public.EpisodeOfCareResIndexString", "ix_String");
            DropIndex("public.EpisodeOfCareResIndexReference", new[] { "ResourceId" });
            DropIndex("public.EpisodeOfCareResIndexReference", "ix_SearchParamId");
            DropIndex("public.EpisodeOfCareResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.EpisodeOfCareResIndexReference", "ix_RefFhirId");
            DropIndex("public.EpisodeOfCareResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.EpisodeOfCareResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.EpisodeOfCareResIndexQuantity", "ix_System");
            DropIndex("public.EpisodeOfCareResIndexQuantity", "ix_Code");
            DropIndex("public.EpisodeOfCareResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.EpisodeOfCareResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.EpisodeOfCareResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.EpisodeOfCareResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.EpisodeOfCareRes", new[] { "FhirReleaseId" });
            DropIndex("public.EpisodeOfCareRes", "ix_LastUpdated");
            DropIndex("public.EpisodeOfCareRes", "ix_IsDeleted");
            DropIndex("public.EpisodeOfCareRes", "uq_FhirIdAndVersionId");
            DropIndex("public.EpisodeOfCareRes", "ix_IsCurrent");
            DropIndex("public.EnrollmentResponseResIndexUri", new[] { "ResourceId" });
            DropIndex("public.EnrollmentResponseResIndexUri", "ix_SearchParamId");
            DropIndex("public.EnrollmentResponseResIndexUri", "ix_Uri");
            DropIndex("public.EnrollmentResponseResIndexToken", new[] { "ResourceId" });
            DropIndex("public.EnrollmentResponseResIndexToken", "ix_SearchParamId");
            DropIndex("public.EnrollmentResponseResIndexToken", "ix_System");
            DropIndex("public.EnrollmentResponseResIndexToken", "ix_Code");
            DropIndex("public.EnrollmentResponseResIndexString", new[] { "ResourceId" });
            DropIndex("public.EnrollmentResponseResIndexString", "ix_SearchParamId");
            DropIndex("public.EnrollmentResponseResIndexString", "ix_String");
            DropIndex("public.EnrollmentResponseResIndexReference", new[] { "ResourceId" });
            DropIndex("public.EnrollmentResponseResIndexReference", "ix_SearchParamId");
            DropIndex("public.EnrollmentResponseResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.EnrollmentResponseResIndexReference", "ix_RefFhirId");
            DropIndex("public.EnrollmentResponseResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.EnrollmentResponseResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.EnrollmentResponseResIndexQuantity", "ix_System");
            DropIndex("public.EnrollmentResponseResIndexQuantity", "ix_Code");
            DropIndex("public.EnrollmentResponseResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.EnrollmentResponseResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.EnrollmentResponseResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.EnrollmentResponseResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.EnrollmentResponseRes", new[] { "FhirReleaseId" });
            DropIndex("public.EnrollmentResponseRes", "ix_LastUpdated");
            DropIndex("public.EnrollmentResponseRes", "ix_IsDeleted");
            DropIndex("public.EnrollmentResponseRes", "uq_FhirIdAndVersionId");
            DropIndex("public.EnrollmentResponseRes", "ix_IsCurrent");
            DropIndex("public.EnrollmentRequestResIndexUri", new[] { "ResourceId" });
            DropIndex("public.EnrollmentRequestResIndexUri", "ix_SearchParamId");
            DropIndex("public.EnrollmentRequestResIndexUri", "ix_Uri");
            DropIndex("public.EnrollmentRequestResIndexToken", new[] { "ResourceId" });
            DropIndex("public.EnrollmentRequestResIndexToken", "ix_SearchParamId");
            DropIndex("public.EnrollmentRequestResIndexToken", "ix_System");
            DropIndex("public.EnrollmentRequestResIndexToken", "ix_Code");
            DropIndex("public.EnrollmentRequestResIndexString", new[] { "ResourceId" });
            DropIndex("public.EnrollmentRequestResIndexString", "ix_SearchParamId");
            DropIndex("public.EnrollmentRequestResIndexString", "ix_String");
            DropIndex("public.EnrollmentRequestResIndexReference", new[] { "ResourceId" });
            DropIndex("public.EnrollmentRequestResIndexReference", "ix_SearchParamId");
            DropIndex("public.EnrollmentRequestResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.EnrollmentRequestResIndexReference", "ix_RefFhirId");
            DropIndex("public.EnrollmentRequestResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.EnrollmentRequestResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.EnrollmentRequestResIndexQuantity", "ix_System");
            DropIndex("public.EnrollmentRequestResIndexQuantity", "ix_Code");
            DropIndex("public.EnrollmentRequestResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.EnrollmentRequestResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.EnrollmentRequestResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.EnrollmentRequestResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.EnrollmentRequestRes", new[] { "FhirReleaseId" });
            DropIndex("public.EnrollmentRequestRes", "ix_LastUpdated");
            DropIndex("public.EnrollmentRequestRes", "ix_IsDeleted");
            DropIndex("public.EnrollmentRequestRes", "uq_FhirIdAndVersionId");
            DropIndex("public.EnrollmentRequestRes", "ix_IsCurrent");
            DropIndex("public.EndpointResIndexUri", new[] { "ResourceId" });
            DropIndex("public.EndpointResIndexUri", "ix_SearchParamId");
            DropIndex("public.EndpointResIndexUri", "ix_Uri");
            DropIndex("public.EndpointResIndexToken", new[] { "ResourceId" });
            DropIndex("public.EndpointResIndexToken", "ix_SearchParamId");
            DropIndex("public.EndpointResIndexToken", "ix_System");
            DropIndex("public.EndpointResIndexToken", "ix_Code");
            DropIndex("public.EndpointResIndexString", new[] { "ResourceId" });
            DropIndex("public.EndpointResIndexString", "ix_SearchParamId");
            DropIndex("public.EndpointResIndexString", "ix_String");
            DropIndex("public.EndpointResIndexReference", new[] { "ResourceId" });
            DropIndex("public.EndpointResIndexReference", "ix_SearchParamId");
            DropIndex("public.EndpointResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.EndpointResIndexReference", "ix_RefFhirId");
            DropIndex("public.EndpointResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.EndpointResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.EndpointResIndexQuantity", "ix_System");
            DropIndex("public.EndpointResIndexQuantity", "ix_Code");
            DropIndex("public.EndpointResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.EndpointResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.EndpointResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.EndpointResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.EndpointRes", new[] { "FhirReleaseId" });
            DropIndex("public.EndpointRes", "ix_LastUpdated");
            DropIndex("public.EndpointRes", "ix_IsDeleted");
            DropIndex("public.EndpointRes", "uq_FhirIdAndVersionId");
            DropIndex("public.EndpointRes", "ix_IsCurrent");
            DropIndex("public.EncounterResIndexUri", new[] { "ResourceId" });
            DropIndex("public.EncounterResIndexUri", "ix_SearchParamId");
            DropIndex("public.EncounterResIndexUri", "ix_Uri");
            DropIndex("public.EncounterResIndexToken", new[] { "ResourceId" });
            DropIndex("public.EncounterResIndexToken", "ix_SearchParamId");
            DropIndex("public.EncounterResIndexToken", "ix_System");
            DropIndex("public.EncounterResIndexToken", "ix_Code");
            DropIndex("public.EncounterResIndexString", new[] { "ResourceId" });
            DropIndex("public.EncounterResIndexString", "ix_SearchParamId");
            DropIndex("public.EncounterResIndexString", "ix_String");
            DropIndex("public.EncounterResIndexReference", new[] { "ResourceId" });
            DropIndex("public.EncounterResIndexReference", "ix_SearchParamId");
            DropIndex("public.EncounterResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.EncounterResIndexReference", "ix_RefFhirId");
            DropIndex("public.EncounterResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.EncounterResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.EncounterResIndexQuantity", "ix_System");
            DropIndex("public.EncounterResIndexQuantity", "ix_Code");
            DropIndex("public.EncounterResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.EncounterResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.EncounterResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.EncounterResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.EncounterRes", new[] { "FhirReleaseId" });
            DropIndex("public.EncounterRes", "ix_LastUpdated");
            DropIndex("public.EncounterRes", "ix_IsDeleted");
            DropIndex("public.EncounterRes", "uq_FhirIdAndVersionId");
            DropIndex("public.EncounterRes", "ix_IsCurrent");
            DropIndex("public.EligibilityResponseResIndexUri", new[] { "ResourceId" });
            DropIndex("public.EligibilityResponseResIndexUri", "ix_SearchParamId");
            DropIndex("public.EligibilityResponseResIndexUri", "ix_Uri");
            DropIndex("public.EligibilityResponseResIndexToken", new[] { "ResourceId" });
            DropIndex("public.EligibilityResponseResIndexToken", "ix_SearchParamId");
            DropIndex("public.EligibilityResponseResIndexToken", "ix_System");
            DropIndex("public.EligibilityResponseResIndexToken", "ix_Code");
            DropIndex("public.EligibilityResponseResIndexString", new[] { "ResourceId" });
            DropIndex("public.EligibilityResponseResIndexString", "ix_SearchParamId");
            DropIndex("public.EligibilityResponseResIndexString", "ix_String");
            DropIndex("public.EligibilityResponseResIndexReference", new[] { "ResourceId" });
            DropIndex("public.EligibilityResponseResIndexReference", "ix_SearchParamId");
            DropIndex("public.EligibilityResponseResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.EligibilityResponseResIndexReference", "ix_RefFhirId");
            DropIndex("public.EligibilityResponseResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.EligibilityResponseResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.EligibilityResponseResIndexQuantity", "ix_System");
            DropIndex("public.EligibilityResponseResIndexQuantity", "ix_Code");
            DropIndex("public.EligibilityResponseResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.EligibilityResponseResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.EligibilityResponseResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.EligibilityResponseResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.EligibilityResponseRes", new[] { "FhirReleaseId" });
            DropIndex("public.EligibilityResponseRes", "ix_LastUpdated");
            DropIndex("public.EligibilityResponseRes", "ix_IsDeleted");
            DropIndex("public.EligibilityResponseRes", "uq_FhirIdAndVersionId");
            DropIndex("public.EligibilityResponseRes", "ix_IsCurrent");
            DropIndex("public.EligibilityRequestResIndexUri", new[] { "ResourceId" });
            DropIndex("public.EligibilityRequestResIndexUri", "ix_SearchParamId");
            DropIndex("public.EligibilityRequestResIndexUri", "ix_Uri");
            DropIndex("public.EligibilityRequestResIndexToken", new[] { "ResourceId" });
            DropIndex("public.EligibilityRequestResIndexToken", "ix_SearchParamId");
            DropIndex("public.EligibilityRequestResIndexToken", "ix_System");
            DropIndex("public.EligibilityRequestResIndexToken", "ix_Code");
            DropIndex("public.EligibilityRequestResIndexString", new[] { "ResourceId" });
            DropIndex("public.EligibilityRequestResIndexString", "ix_SearchParamId");
            DropIndex("public.EligibilityRequestResIndexString", "ix_String");
            DropIndex("public.EligibilityRequestResIndexReference", new[] { "ResourceId" });
            DropIndex("public.EligibilityRequestResIndexReference", "ix_SearchParamId");
            DropIndex("public.EligibilityRequestResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.EligibilityRequestResIndexReference", "ix_RefFhirId");
            DropIndex("public.EligibilityRequestResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.EligibilityRequestResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.EligibilityRequestResIndexQuantity", "ix_System");
            DropIndex("public.EligibilityRequestResIndexQuantity", "ix_Code");
            DropIndex("public.EligibilityRequestResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.EligibilityRequestResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.EligibilityRequestResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.EligibilityRequestResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.EligibilityRequestRes", new[] { "FhirReleaseId" });
            DropIndex("public.EligibilityRequestRes", "ix_LastUpdated");
            DropIndex("public.EligibilityRequestRes", "ix_IsDeleted");
            DropIndex("public.EligibilityRequestRes", "uq_FhirIdAndVersionId");
            DropIndex("public.EligibilityRequestRes", "ix_IsCurrent");
            DropIndex("public.DocumentReferenceResIndexUri", new[] { "ResourceId" });
            DropIndex("public.DocumentReferenceResIndexUri", "ix_SearchParamId");
            DropIndex("public.DocumentReferenceResIndexUri", "ix_Uri");
            DropIndex("public.DocumentReferenceResIndexToken", new[] { "ResourceId" });
            DropIndex("public.DocumentReferenceResIndexToken", "ix_SearchParamId");
            DropIndex("public.DocumentReferenceResIndexToken", "ix_System");
            DropIndex("public.DocumentReferenceResIndexToken", "ix_Code");
            DropIndex("public.DocumentReferenceResIndexString", new[] { "ResourceId" });
            DropIndex("public.DocumentReferenceResIndexString", "ix_SearchParamId");
            DropIndex("public.DocumentReferenceResIndexString", "ix_String");
            DropIndex("public.DocumentReferenceResIndexReference", new[] { "ResourceId" });
            DropIndex("public.DocumentReferenceResIndexReference", "ix_SearchParamId");
            DropIndex("public.DocumentReferenceResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.DocumentReferenceResIndexReference", "ix_RefFhirId");
            DropIndex("public.DocumentReferenceResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.DocumentReferenceResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.DocumentReferenceResIndexQuantity", "ix_System");
            DropIndex("public.DocumentReferenceResIndexQuantity", "ix_Code");
            DropIndex("public.DocumentReferenceResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.DocumentReferenceResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.DocumentReferenceResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.DocumentReferenceResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.DocumentReferenceRes", new[] { "FhirReleaseId" });
            DropIndex("public.DocumentReferenceRes", "ix_LastUpdated");
            DropIndex("public.DocumentReferenceRes", "ix_IsDeleted");
            DropIndex("public.DocumentReferenceRes", "uq_FhirIdAndVersionId");
            DropIndex("public.DocumentReferenceRes", "ix_IsCurrent");
            DropIndex("public.DocumentManifestResIndexUri", new[] { "ResourceId" });
            DropIndex("public.DocumentManifestResIndexUri", "ix_SearchParamId");
            DropIndex("public.DocumentManifestResIndexUri", "ix_Uri");
            DropIndex("public.DocumentManifestResIndexToken", new[] { "ResourceId" });
            DropIndex("public.DocumentManifestResIndexToken", "ix_SearchParamId");
            DropIndex("public.DocumentManifestResIndexToken", "ix_System");
            DropIndex("public.DocumentManifestResIndexToken", "ix_Code");
            DropIndex("public.DocumentManifestResIndexString", new[] { "ResourceId" });
            DropIndex("public.DocumentManifestResIndexString", "ix_SearchParamId");
            DropIndex("public.DocumentManifestResIndexString", "ix_String");
            DropIndex("public.DocumentManifestResIndexReference", new[] { "ResourceId" });
            DropIndex("public.DocumentManifestResIndexReference", "ix_SearchParamId");
            DropIndex("public.DocumentManifestResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.DocumentManifestResIndexReference", "ix_RefFhirId");
            DropIndex("public.DocumentManifestResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.DocumentManifestResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.DocumentManifestResIndexQuantity", "ix_System");
            DropIndex("public.DocumentManifestResIndexQuantity", "ix_Code");
            DropIndex("public.DocumentManifestResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.DocumentManifestResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.DocumentManifestResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.DocumentManifestResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.DocumentManifestRes", new[] { "FhirReleaseId" });
            DropIndex("public.DocumentManifestRes", "ix_LastUpdated");
            DropIndex("public.DocumentManifestRes", "ix_IsDeleted");
            DropIndex("public.DocumentManifestRes", "uq_FhirIdAndVersionId");
            DropIndex("public.DocumentManifestRes", "ix_IsCurrent");
            DropIndex("public.DiagnosticReportResIndexUri", new[] { "ResourceId" });
            DropIndex("public.DiagnosticReportResIndexUri", "ix_SearchParamId");
            DropIndex("public.DiagnosticReportResIndexUri", "ix_Uri");
            DropIndex("public.DiagnosticReportResIndexToken", new[] { "ResourceId" });
            DropIndex("public.DiagnosticReportResIndexToken", "ix_SearchParamId");
            DropIndex("public.DiagnosticReportResIndexToken", "ix_System");
            DropIndex("public.DiagnosticReportResIndexToken", "ix_Code");
            DropIndex("public.DiagnosticReportResIndexString", new[] { "ResourceId" });
            DropIndex("public.DiagnosticReportResIndexString", "ix_SearchParamId");
            DropIndex("public.DiagnosticReportResIndexString", "ix_String");
            DropIndex("public.DiagnosticReportResIndexReference", new[] { "ResourceId" });
            DropIndex("public.DiagnosticReportResIndexReference", "ix_SearchParamId");
            DropIndex("public.DiagnosticReportResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.DiagnosticReportResIndexReference", "ix_RefFhirId");
            DropIndex("public.DiagnosticReportResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.DiagnosticReportResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.DiagnosticReportResIndexQuantity", "ix_System");
            DropIndex("public.DiagnosticReportResIndexQuantity", "ix_Code");
            DropIndex("public.DiagnosticReportResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.DiagnosticReportResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.DiagnosticReportResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.DiagnosticReportResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.DiagnosticReportRes", new[] { "FhirReleaseId" });
            DropIndex("public.DiagnosticReportRes", "ix_LastUpdated");
            DropIndex("public.DiagnosticReportRes", "ix_IsDeleted");
            DropIndex("public.DiagnosticReportRes", "uq_FhirIdAndVersionId");
            DropIndex("public.DiagnosticReportRes", "ix_IsCurrent");
            DropIndex("public.DeviceUseStatementResIndexUri", new[] { "ResourceId" });
            DropIndex("public.DeviceUseStatementResIndexUri", "ix_SearchParamId");
            DropIndex("public.DeviceUseStatementResIndexUri", "ix_Uri");
            DropIndex("public.DeviceUseStatementResIndexToken", new[] { "ResourceId" });
            DropIndex("public.DeviceUseStatementResIndexToken", "ix_SearchParamId");
            DropIndex("public.DeviceUseStatementResIndexToken", "ix_System");
            DropIndex("public.DeviceUseStatementResIndexToken", "ix_Code");
            DropIndex("public.DeviceUseStatementResIndexString", new[] { "ResourceId" });
            DropIndex("public.DeviceUseStatementResIndexString", "ix_SearchParamId");
            DropIndex("public.DeviceUseStatementResIndexString", "ix_String");
            DropIndex("public.DeviceUseStatementResIndexReference", new[] { "ResourceId" });
            DropIndex("public.DeviceUseStatementResIndexReference", "ix_SearchParamId");
            DropIndex("public.DeviceUseStatementResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.DeviceUseStatementResIndexReference", "ix_RefFhirId");
            DropIndex("public.DeviceUseStatementResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.DeviceUseStatementResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.DeviceUseStatementResIndexQuantity", "ix_System");
            DropIndex("public.DeviceUseStatementResIndexQuantity", "ix_Code");
            DropIndex("public.DeviceUseStatementResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.DeviceUseStatementResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.DeviceUseStatementResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.DeviceUseStatementResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.DeviceUseStatementRes", new[] { "FhirReleaseId" });
            DropIndex("public.DeviceUseStatementRes", "ix_LastUpdated");
            DropIndex("public.DeviceUseStatementRes", "ix_IsDeleted");
            DropIndex("public.DeviceUseStatementRes", "uq_FhirIdAndVersionId");
            DropIndex("public.DeviceUseStatementRes", "ix_IsCurrent");
            DropIndex("public.DeviceRequestResIndexUri", new[] { "ResourceId" });
            DropIndex("public.DeviceRequestResIndexUri", "ix_SearchParamId");
            DropIndex("public.DeviceRequestResIndexUri", "ix_Uri");
            DropIndex("public.DeviceRequestResIndexToken", new[] { "ResourceId" });
            DropIndex("public.DeviceRequestResIndexToken", "ix_SearchParamId");
            DropIndex("public.DeviceRequestResIndexToken", "ix_System");
            DropIndex("public.DeviceRequestResIndexToken", "ix_Code");
            DropIndex("public.DeviceRequestResIndexString", new[] { "ResourceId" });
            DropIndex("public.DeviceRequestResIndexString", "ix_SearchParamId");
            DropIndex("public.DeviceRequestResIndexString", "ix_String");
            DropIndex("public.DeviceRequestResIndexReference", new[] { "ResourceId" });
            DropIndex("public.DeviceRequestResIndexReference", "ix_SearchParamId");
            DropIndex("public.DeviceRequestResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.DeviceRequestResIndexReference", "ix_RefFhirId");
            DropIndex("public.DeviceRequestResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.DeviceRequestResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.DeviceRequestResIndexQuantity", "ix_System");
            DropIndex("public.DeviceRequestResIndexQuantity", "ix_Code");
            DropIndex("public.DeviceRequestResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.DeviceRequestResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.DeviceRequestResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.DeviceRequestResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.DeviceRequestRes", new[] { "FhirReleaseId" });
            DropIndex("public.DeviceRequestRes", "ix_LastUpdated");
            DropIndex("public.DeviceRequestRes", "ix_IsDeleted");
            DropIndex("public.DeviceRequestRes", "uq_FhirIdAndVersionId");
            DropIndex("public.DeviceRequestRes", "ix_IsCurrent");
            DropIndex("public.DeviceMetricResIndexUri", new[] { "ResourceId" });
            DropIndex("public.DeviceMetricResIndexUri", "ix_SearchParamId");
            DropIndex("public.DeviceMetricResIndexUri", "ix_Uri");
            DropIndex("public.DeviceMetricResIndexToken", new[] { "ResourceId" });
            DropIndex("public.DeviceMetricResIndexToken", "ix_SearchParamId");
            DropIndex("public.DeviceMetricResIndexToken", "ix_System");
            DropIndex("public.DeviceMetricResIndexToken", "ix_Code");
            DropIndex("public.DeviceMetricResIndexString", new[] { "ResourceId" });
            DropIndex("public.DeviceMetricResIndexString", "ix_SearchParamId");
            DropIndex("public.DeviceMetricResIndexString", "ix_String");
            DropIndex("public.DeviceMetricResIndexReference", new[] { "ResourceId" });
            DropIndex("public.DeviceMetricResIndexReference", "ix_SearchParamId");
            DropIndex("public.DeviceMetricResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.DeviceMetricResIndexReference", "ix_RefFhirId");
            DropIndex("public.DeviceMetricResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.DeviceMetricResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.DeviceMetricResIndexQuantity", "ix_System");
            DropIndex("public.DeviceMetricResIndexQuantity", "ix_Code");
            DropIndex("public.DeviceMetricResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.DeviceMetricResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.DeviceMetricResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.DeviceMetricResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.DeviceMetricRes", new[] { "FhirReleaseId" });
            DropIndex("public.DeviceMetricRes", "ix_LastUpdated");
            DropIndex("public.DeviceMetricRes", "ix_IsDeleted");
            DropIndex("public.DeviceMetricRes", "uq_FhirIdAndVersionId");
            DropIndex("public.DeviceMetricRes", "ix_IsCurrent");
            DropIndex("public.DeviceResIndexUri", new[] { "ResourceId" });
            DropIndex("public.DeviceResIndexUri", "ix_SearchParamId");
            DropIndex("public.DeviceResIndexUri", "ix_Uri");
            DropIndex("public.DeviceResIndexToken", new[] { "ResourceId" });
            DropIndex("public.DeviceResIndexToken", "ix_SearchParamId");
            DropIndex("public.DeviceResIndexToken", "ix_System");
            DropIndex("public.DeviceResIndexToken", "ix_Code");
            DropIndex("public.DeviceResIndexString", new[] { "ResourceId" });
            DropIndex("public.DeviceResIndexString", "ix_SearchParamId");
            DropIndex("public.DeviceResIndexString", "ix_String");
            DropIndex("public.DeviceResIndexReference", new[] { "ResourceId" });
            DropIndex("public.DeviceResIndexReference", "ix_SearchParamId");
            DropIndex("public.DeviceResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.DeviceResIndexReference", "ix_RefFhirId");
            DropIndex("public.DeviceResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.DeviceResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.DeviceResIndexQuantity", "ix_System");
            DropIndex("public.DeviceResIndexQuantity", "ix_Code");
            DropIndex("public.DeviceResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.DeviceResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.DeviceResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.DeviceResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.DeviceRes", new[] { "FhirReleaseId" });
            DropIndex("public.DeviceRes", "ix_LastUpdated");
            DropIndex("public.DeviceRes", "ix_IsDeleted");
            DropIndex("public.DeviceRes", "uq_FhirIdAndVersionId");
            DropIndex("public.DeviceRes", "ix_IsCurrent");
            DropIndex("public.DeviceComponentResIndexUri", new[] { "ResourceId" });
            DropIndex("public.DeviceComponentResIndexUri", "ix_SearchParamId");
            DropIndex("public.DeviceComponentResIndexUri", "ix_Uri");
            DropIndex("public.DeviceComponentResIndexToken", new[] { "ResourceId" });
            DropIndex("public.DeviceComponentResIndexToken", "ix_SearchParamId");
            DropIndex("public.DeviceComponentResIndexToken", "ix_System");
            DropIndex("public.DeviceComponentResIndexToken", "ix_Code");
            DropIndex("public.DeviceComponentResIndexString", new[] { "ResourceId" });
            DropIndex("public.DeviceComponentResIndexString", "ix_SearchParamId");
            DropIndex("public.DeviceComponentResIndexString", "ix_String");
            DropIndex("public.DeviceComponentResIndexReference", new[] { "ResourceId" });
            DropIndex("public.DeviceComponentResIndexReference", "ix_SearchParamId");
            DropIndex("public.DeviceComponentResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.DeviceComponentResIndexReference", "ix_RefFhirId");
            DropIndex("public.DeviceComponentResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.DeviceComponentResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.DeviceComponentResIndexQuantity", "ix_System");
            DropIndex("public.DeviceComponentResIndexQuantity", "ix_Code");
            DropIndex("public.DeviceComponentResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.DeviceComponentResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.DeviceComponentResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.DeviceComponentResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.DeviceComponentRes", new[] { "FhirReleaseId" });
            DropIndex("public.DeviceComponentRes", "ix_LastUpdated");
            DropIndex("public.DeviceComponentRes", "ix_IsDeleted");
            DropIndex("public.DeviceComponentRes", "uq_FhirIdAndVersionId");
            DropIndex("public.DeviceComponentRes", "ix_IsCurrent");
            DropIndex("public.DetectedIssueResIndexUri", new[] { "ResourceId" });
            DropIndex("public.DetectedIssueResIndexUri", "ix_SearchParamId");
            DropIndex("public.DetectedIssueResIndexUri", "ix_Uri");
            DropIndex("public.DetectedIssueResIndexToken", new[] { "ResourceId" });
            DropIndex("public.DetectedIssueResIndexToken", "ix_SearchParamId");
            DropIndex("public.DetectedIssueResIndexToken", "ix_System");
            DropIndex("public.DetectedIssueResIndexToken", "ix_Code");
            DropIndex("public.DetectedIssueResIndexString", new[] { "ResourceId" });
            DropIndex("public.DetectedIssueResIndexString", "ix_SearchParamId");
            DropIndex("public.DetectedIssueResIndexString", "ix_String");
            DropIndex("public.DetectedIssueResIndexReference", new[] { "ResourceId" });
            DropIndex("public.DetectedIssueResIndexReference", "ix_SearchParamId");
            DropIndex("public.DetectedIssueResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.DetectedIssueResIndexReference", "ix_RefFhirId");
            DropIndex("public.DetectedIssueResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.DetectedIssueResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.DetectedIssueResIndexQuantity", "ix_System");
            DropIndex("public.DetectedIssueResIndexQuantity", "ix_Code");
            DropIndex("public.DetectedIssueResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.DetectedIssueResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.DetectedIssueResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.DetectedIssueResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.DetectedIssueRes", new[] { "FhirReleaseId" });
            DropIndex("public.DetectedIssueRes", "ix_LastUpdated");
            DropIndex("public.DetectedIssueRes", "ix_IsDeleted");
            DropIndex("public.DetectedIssueRes", "uq_FhirIdAndVersionId");
            DropIndex("public.DetectedIssueRes", "ix_IsCurrent");
            DropIndex("public.DataElementResIndexUri", new[] { "ResourceId" });
            DropIndex("public.DataElementResIndexUri", "ix_SearchParamId");
            DropIndex("public.DataElementResIndexUri", "ix_Uri");
            DropIndex("public.DataElementResIndexToken", new[] { "ResourceId" });
            DropIndex("public.DataElementResIndexToken", "ix_SearchParamId");
            DropIndex("public.DataElementResIndexToken", "ix_System");
            DropIndex("public.DataElementResIndexToken", "ix_Code");
            DropIndex("public.DataElementResIndexString", new[] { "ResourceId" });
            DropIndex("public.DataElementResIndexString", "ix_SearchParamId");
            DropIndex("public.DataElementResIndexString", "ix_String");
            DropIndex("public.DataElementResIndexReference", new[] { "ResourceId" });
            DropIndex("public.DataElementResIndexReference", "ix_SearchParamId");
            DropIndex("public.DataElementResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.DataElementResIndexReference", "ix_RefFhirId");
            DropIndex("public.DataElementResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.DataElementResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.DataElementResIndexQuantity", "ix_System");
            DropIndex("public.DataElementResIndexQuantity", "ix_Code");
            DropIndex("public.DataElementResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.DataElementResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.DataElementResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.DataElementResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.DataElementRes", new[] { "FhirReleaseId" });
            DropIndex("public.DataElementRes", "ix_LastUpdated");
            DropIndex("public.DataElementRes", "ix_IsDeleted");
            DropIndex("public.DataElementRes", "uq_FhirIdAndVersionId");
            DropIndex("public.DataElementRes", "ix_IsCurrent");
            DropIndex("public.CoverageResIndexUri", new[] { "ResourceId" });
            DropIndex("public.CoverageResIndexUri", "ix_SearchParamId");
            DropIndex("public.CoverageResIndexUri", "ix_Uri");
            DropIndex("public.CoverageResIndexToken", new[] { "ResourceId" });
            DropIndex("public.CoverageResIndexToken", "ix_SearchParamId");
            DropIndex("public.CoverageResIndexToken", "ix_System");
            DropIndex("public.CoverageResIndexToken", "ix_Code");
            DropIndex("public.CoverageResIndexString", new[] { "ResourceId" });
            DropIndex("public.CoverageResIndexString", "ix_SearchParamId");
            DropIndex("public.CoverageResIndexString", "ix_String");
            DropIndex("public.CoverageResIndexReference", new[] { "ResourceId" });
            DropIndex("public.CoverageResIndexReference", "ix_SearchParamId");
            DropIndex("public.CoverageResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.CoverageResIndexReference", "ix_RefFhirId");
            DropIndex("public.CoverageResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.CoverageResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.CoverageResIndexQuantity", "ix_System");
            DropIndex("public.CoverageResIndexQuantity", "ix_Code");
            DropIndex("public.CoverageResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.CoverageResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.CoverageResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.CoverageResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.CoverageRes", new[] { "FhirReleaseId" });
            DropIndex("public.CoverageRes", "ix_LastUpdated");
            DropIndex("public.CoverageRes", "ix_IsDeleted");
            DropIndex("public.CoverageRes", "uq_FhirIdAndVersionId");
            DropIndex("public.CoverageRes", "ix_IsCurrent");
            DropIndex("public.ContractResIndexUri", new[] { "ResourceId" });
            DropIndex("public.ContractResIndexUri", "ix_SearchParamId");
            DropIndex("public.ContractResIndexUri", "ix_Uri");
            DropIndex("public.ContractResIndexToken", new[] { "ResourceId" });
            DropIndex("public.ContractResIndexToken", "ix_SearchParamId");
            DropIndex("public.ContractResIndexToken", "ix_System");
            DropIndex("public.ContractResIndexToken", "ix_Code");
            DropIndex("public.ContractResIndexString", new[] { "ResourceId" });
            DropIndex("public.ContractResIndexString", "ix_SearchParamId");
            DropIndex("public.ContractResIndexString", "ix_String");
            DropIndex("public.ContractResIndexReference", new[] { "ResourceId" });
            DropIndex("public.ContractResIndexReference", "ix_SearchParamId");
            DropIndex("public.ContractResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.ContractResIndexReference", "ix_RefFhirId");
            DropIndex("public.ContractResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.ContractResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.ContractResIndexQuantity", "ix_System");
            DropIndex("public.ContractResIndexQuantity", "ix_Code");
            DropIndex("public.ContractResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.ContractResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.ContractResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.ContractResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.ContractRes", new[] { "FhirReleaseId" });
            DropIndex("public.ContractRes", "ix_LastUpdated");
            DropIndex("public.ContractRes", "ix_IsDeleted");
            DropIndex("public.ContractRes", "uq_FhirIdAndVersionId");
            DropIndex("public.ContractRes", "ix_IsCurrent");
            DropIndex("public.ConsentResIndexUri", new[] { "ResourceId" });
            DropIndex("public.ConsentResIndexUri", "ix_SearchParamId");
            DropIndex("public.ConsentResIndexUri", "ix_Uri");
            DropIndex("public.ConsentResIndexToken", new[] { "ResourceId" });
            DropIndex("public.ConsentResIndexToken", "ix_SearchParamId");
            DropIndex("public.ConsentResIndexToken", "ix_System");
            DropIndex("public.ConsentResIndexToken", "ix_Code");
            DropIndex("public.ConsentResIndexString", new[] { "ResourceId" });
            DropIndex("public.ConsentResIndexString", "ix_SearchParamId");
            DropIndex("public.ConsentResIndexString", "ix_String");
            DropIndex("public.ConsentResIndexReference", new[] { "ResourceId" });
            DropIndex("public.ConsentResIndexReference", "ix_SearchParamId");
            DropIndex("public.ConsentResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.ConsentResIndexReference", "ix_RefFhirId");
            DropIndex("public.ConsentResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.ConsentResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.ConsentResIndexQuantity", "ix_System");
            DropIndex("public.ConsentResIndexQuantity", "ix_Code");
            DropIndex("public.ConsentResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.ConsentResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.ConsentResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.ConsentResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.ConsentRes", new[] { "FhirReleaseId" });
            DropIndex("public.ConsentRes", "ix_LastUpdated");
            DropIndex("public.ConsentRes", "ix_IsDeleted");
            DropIndex("public.ConsentRes", "uq_FhirIdAndVersionId");
            DropIndex("public.ConsentRes", "ix_IsCurrent");
            DropIndex("public.ConditionResIndexUri", new[] { "ResourceId" });
            DropIndex("public.ConditionResIndexUri", "ix_SearchParamId");
            DropIndex("public.ConditionResIndexUri", "ix_Uri");
            DropIndex("public.ConditionResIndexToken", new[] { "ResourceId" });
            DropIndex("public.ConditionResIndexToken", "ix_SearchParamId");
            DropIndex("public.ConditionResIndexToken", "ix_System");
            DropIndex("public.ConditionResIndexToken", "ix_Code");
            DropIndex("public.ConditionResIndexString", new[] { "ResourceId" });
            DropIndex("public.ConditionResIndexString", "ix_SearchParamId");
            DropIndex("public.ConditionResIndexString", "ix_String");
            DropIndex("public.ConditionResIndexReference", new[] { "ResourceId" });
            DropIndex("public.ConditionResIndexReference", "ix_SearchParamId");
            DropIndex("public.ConditionResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.ConditionResIndexReference", "ix_RefFhirId");
            DropIndex("public.ConditionResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.ConditionResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.ConditionResIndexQuantity", "ix_System");
            DropIndex("public.ConditionResIndexQuantity", "ix_Code");
            DropIndex("public.ConditionResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.ConditionResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.ConditionResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.ConditionResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.ConditionRes", new[] { "FhirReleaseId" });
            DropIndex("public.ConditionRes", "ix_LastUpdated");
            DropIndex("public.ConditionRes", "ix_IsDeleted");
            DropIndex("public.ConditionRes", "uq_FhirIdAndVersionId");
            DropIndex("public.ConditionRes", "ix_IsCurrent");
            DropIndex("public.ConceptMapResIndexUri", new[] { "ResourceId" });
            DropIndex("public.ConceptMapResIndexUri", "ix_SearchParamId");
            DropIndex("public.ConceptMapResIndexUri", "ix_Uri");
            DropIndex("public.ConceptMapResIndexToken", new[] { "ResourceId" });
            DropIndex("public.ConceptMapResIndexToken", "ix_SearchParamId");
            DropIndex("public.ConceptMapResIndexToken", "ix_System");
            DropIndex("public.ConceptMapResIndexToken", "ix_Code");
            DropIndex("public.ConceptMapResIndexString", new[] { "ResourceId" });
            DropIndex("public.ConceptMapResIndexString", "ix_SearchParamId");
            DropIndex("public.ConceptMapResIndexString", "ix_String");
            DropIndex("public.ConceptMapResIndexReference", new[] { "ResourceId" });
            DropIndex("public.ConceptMapResIndexReference", "ix_SearchParamId");
            DropIndex("public.ConceptMapResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.ConceptMapResIndexReference", "ix_RefFhirId");
            DropIndex("public.ConceptMapResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.ConceptMapResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.ConceptMapResIndexQuantity", "ix_System");
            DropIndex("public.ConceptMapResIndexQuantity", "ix_Code");
            DropIndex("public.ConceptMapResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.ConceptMapResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.ConceptMapResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.ConceptMapResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.ConceptMapRes", new[] { "FhirReleaseId" });
            DropIndex("public.ConceptMapRes", "ix_LastUpdated");
            DropIndex("public.ConceptMapRes", "ix_IsDeleted");
            DropIndex("public.ConceptMapRes", "uq_FhirIdAndVersionId");
            DropIndex("public.ConceptMapRes", "ix_IsCurrent");
            DropIndex("public.CompositionResIndexUri", new[] { "ResourceId" });
            DropIndex("public.CompositionResIndexUri", "ix_SearchParamId");
            DropIndex("public.CompositionResIndexUri", "ix_Uri");
            DropIndex("public.CompositionResIndexToken", new[] { "ResourceId" });
            DropIndex("public.CompositionResIndexToken", "ix_SearchParamId");
            DropIndex("public.CompositionResIndexToken", "ix_System");
            DropIndex("public.CompositionResIndexToken", "ix_Code");
            DropIndex("public.CompositionResIndexString", new[] { "ResourceId" });
            DropIndex("public.CompositionResIndexString", "ix_SearchParamId");
            DropIndex("public.CompositionResIndexString", "ix_String");
            DropIndex("public.CompositionResIndexReference", new[] { "ResourceId" });
            DropIndex("public.CompositionResIndexReference", "ix_SearchParamId");
            DropIndex("public.CompositionResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.CompositionResIndexReference", "ix_RefFhirId");
            DropIndex("public.CompositionResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.CompositionResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.CompositionResIndexQuantity", "ix_System");
            DropIndex("public.CompositionResIndexQuantity", "ix_Code");
            DropIndex("public.CompositionResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.CompositionResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.CompositionResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.CompositionResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.CompositionRes", new[] { "FhirReleaseId" });
            DropIndex("public.CompositionRes", "ix_LastUpdated");
            DropIndex("public.CompositionRes", "ix_IsDeleted");
            DropIndex("public.CompositionRes", "uq_FhirIdAndVersionId");
            DropIndex("public.CompositionRes", "ix_IsCurrent");
            DropIndex("public.CompartmentDefinitionResIndexUri", new[] { "ResourceId" });
            DropIndex("public.CompartmentDefinitionResIndexUri", "ix_SearchParamId");
            DropIndex("public.CompartmentDefinitionResIndexUri", "ix_Uri");
            DropIndex("public.CompartmentDefinitionResIndexToken", new[] { "ResourceId" });
            DropIndex("public.CompartmentDefinitionResIndexToken", "ix_SearchParamId");
            DropIndex("public.CompartmentDefinitionResIndexToken", "ix_System");
            DropIndex("public.CompartmentDefinitionResIndexToken", "ix_Code");
            DropIndex("public.CompartmentDefinitionResIndexString", new[] { "ResourceId" });
            DropIndex("public.CompartmentDefinitionResIndexString", "ix_SearchParamId");
            DropIndex("public.CompartmentDefinitionResIndexString", "ix_String");
            DropIndex("public.CompartmentDefinitionResIndexReference", new[] { "ResourceId" });
            DropIndex("public.CompartmentDefinitionResIndexReference", "ix_SearchParamId");
            DropIndex("public.CompartmentDefinitionResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.CompartmentDefinitionResIndexReference", "ix_RefFhirId");
            DropIndex("public.CompartmentDefinitionResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.CompartmentDefinitionResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.CompartmentDefinitionResIndexQuantity", "ix_System");
            DropIndex("public.CompartmentDefinitionResIndexQuantity", "ix_Code");
            DropIndex("public.CompartmentDefinitionResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.CompartmentDefinitionResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.CompartmentDefinitionResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.CompartmentDefinitionResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.CompartmentDefinitionRes", new[] { "FhirReleaseId" });
            DropIndex("public.CompartmentDefinitionRes", "ix_LastUpdated");
            DropIndex("public.CompartmentDefinitionRes", "ix_IsDeleted");
            DropIndex("public.CompartmentDefinitionRes", "uq_FhirIdAndVersionId");
            DropIndex("public.CompartmentDefinitionRes", "ix_IsCurrent");
            DropIndex("public.CommunicationRequestResIndexUri", new[] { "ResourceId" });
            DropIndex("public.CommunicationRequestResIndexUri", "ix_SearchParamId");
            DropIndex("public.CommunicationRequestResIndexUri", "ix_Uri");
            DropIndex("public.CommunicationRequestResIndexToken", new[] { "ResourceId" });
            DropIndex("public.CommunicationRequestResIndexToken", "ix_SearchParamId");
            DropIndex("public.CommunicationRequestResIndexToken", "ix_System");
            DropIndex("public.CommunicationRequestResIndexToken", "ix_Code");
            DropIndex("public.CommunicationRequestResIndexString", new[] { "ResourceId" });
            DropIndex("public.CommunicationRequestResIndexString", "ix_SearchParamId");
            DropIndex("public.CommunicationRequestResIndexString", "ix_String");
            DropIndex("public.CommunicationRequestResIndexReference", new[] { "ResourceId" });
            DropIndex("public.CommunicationRequestResIndexReference", "ix_SearchParamId");
            DropIndex("public.CommunicationRequestResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.CommunicationRequestResIndexReference", "ix_RefFhirId");
            DropIndex("public.CommunicationRequestResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.CommunicationRequestResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.CommunicationRequestResIndexQuantity", "ix_System");
            DropIndex("public.CommunicationRequestResIndexQuantity", "ix_Code");
            DropIndex("public.CommunicationRequestResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.CommunicationRequestResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.CommunicationRequestResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.CommunicationRequestResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.CommunicationRequestRes", new[] { "FhirReleaseId" });
            DropIndex("public.CommunicationRequestRes", "ix_LastUpdated");
            DropIndex("public.CommunicationRequestRes", "ix_IsDeleted");
            DropIndex("public.CommunicationRequestRes", "uq_FhirIdAndVersionId");
            DropIndex("public.CommunicationRequestRes", "ix_IsCurrent");
            DropIndex("public.CommunicationResIndexUri", new[] { "ResourceId" });
            DropIndex("public.CommunicationResIndexUri", "ix_SearchParamId");
            DropIndex("public.CommunicationResIndexUri", "ix_Uri");
            DropIndex("public.CommunicationResIndexToken", new[] { "ResourceId" });
            DropIndex("public.CommunicationResIndexToken", "ix_SearchParamId");
            DropIndex("public.CommunicationResIndexToken", "ix_System");
            DropIndex("public.CommunicationResIndexToken", "ix_Code");
            DropIndex("public.CommunicationResIndexString", new[] { "ResourceId" });
            DropIndex("public.CommunicationResIndexString", "ix_SearchParamId");
            DropIndex("public.CommunicationResIndexString", "ix_String");
            DropIndex("public.CommunicationResIndexReference", new[] { "ResourceId" });
            DropIndex("public.CommunicationResIndexReference", "ix_SearchParamId");
            DropIndex("public.CommunicationResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.CommunicationResIndexReference", "ix_RefFhirId");
            DropIndex("public.CommunicationResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.CommunicationResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.CommunicationResIndexQuantity", "ix_System");
            DropIndex("public.CommunicationResIndexQuantity", "ix_Code");
            DropIndex("public.CommunicationResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.CommunicationResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.CommunicationResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.CommunicationResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.CommunicationRes", new[] { "FhirReleaseId" });
            DropIndex("public.CommunicationRes", "ix_LastUpdated");
            DropIndex("public.CommunicationRes", "ix_IsDeleted");
            DropIndex("public.CommunicationRes", "uq_FhirIdAndVersionId");
            DropIndex("public.CommunicationRes", "ix_IsCurrent");
            DropIndex("public.CodeSystemResIndexUri", new[] { "ResourceId" });
            DropIndex("public.CodeSystemResIndexUri", "ix_SearchParamId");
            DropIndex("public.CodeSystemResIndexUri", "ix_Uri");
            DropIndex("public.CodeSystemResIndexToken", new[] { "ResourceId" });
            DropIndex("public.CodeSystemResIndexToken", "ix_SearchParamId");
            DropIndex("public.CodeSystemResIndexToken", "ix_System");
            DropIndex("public.CodeSystemResIndexToken", "ix_Code");
            DropIndex("public.CodeSystemResIndexString", new[] { "ResourceId" });
            DropIndex("public.CodeSystemResIndexString", "ix_SearchParamId");
            DropIndex("public.CodeSystemResIndexString", "ix_String");
            DropIndex("public.CodeSystemResIndexReference", new[] { "ResourceId" });
            DropIndex("public.CodeSystemResIndexReference", "ix_SearchParamId");
            DropIndex("public.CodeSystemResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.CodeSystemResIndexReference", "ix_RefFhirId");
            DropIndex("public.CodeSystemResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.CodeSystemResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.CodeSystemResIndexQuantity", "ix_System");
            DropIndex("public.CodeSystemResIndexQuantity", "ix_Code");
            DropIndex("public.CodeSystemResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.CodeSystemResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.CodeSystemResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.CodeSystemResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.CodeSystemRes", new[] { "FhirReleaseId" });
            DropIndex("public.CodeSystemRes", "ix_LastUpdated");
            DropIndex("public.CodeSystemRes", "ix_IsDeleted");
            DropIndex("public.CodeSystemRes", "uq_FhirIdAndVersionId");
            DropIndex("public.CodeSystemRes", "ix_IsCurrent");
            DropIndex("public.ClinicalImpressionResIndexUri", new[] { "ResourceId" });
            DropIndex("public.ClinicalImpressionResIndexUri", "ix_SearchParamId");
            DropIndex("public.ClinicalImpressionResIndexUri", "ix_Uri");
            DropIndex("public.ClinicalImpressionResIndexToken", new[] { "ResourceId" });
            DropIndex("public.ClinicalImpressionResIndexToken", "ix_SearchParamId");
            DropIndex("public.ClinicalImpressionResIndexToken", "ix_System");
            DropIndex("public.ClinicalImpressionResIndexToken", "ix_Code");
            DropIndex("public.ClinicalImpressionResIndexString", new[] { "ResourceId" });
            DropIndex("public.ClinicalImpressionResIndexString", "ix_SearchParamId");
            DropIndex("public.ClinicalImpressionResIndexString", "ix_String");
            DropIndex("public.ClinicalImpressionResIndexReference", new[] { "ResourceId" });
            DropIndex("public.ClinicalImpressionResIndexReference", "ix_SearchParamId");
            DropIndex("public.ClinicalImpressionResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.ClinicalImpressionResIndexReference", "ix_RefFhirId");
            DropIndex("public.ClinicalImpressionResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.ClinicalImpressionResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.ClinicalImpressionResIndexQuantity", "ix_System");
            DropIndex("public.ClinicalImpressionResIndexQuantity", "ix_Code");
            DropIndex("public.ClinicalImpressionResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.ClinicalImpressionResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.ClinicalImpressionResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.ClinicalImpressionResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.ClinicalImpressionRes", new[] { "FhirReleaseId" });
            DropIndex("public.ClinicalImpressionRes", "ix_LastUpdated");
            DropIndex("public.ClinicalImpressionRes", "ix_IsDeleted");
            DropIndex("public.ClinicalImpressionRes", "uq_FhirIdAndVersionId");
            DropIndex("public.ClinicalImpressionRes", "ix_IsCurrent");
            DropIndex("public.ClaimResponseResIndexUri", new[] { "ResourceId" });
            DropIndex("public.ClaimResponseResIndexUri", "ix_SearchParamId");
            DropIndex("public.ClaimResponseResIndexUri", "ix_Uri");
            DropIndex("public.ClaimResponseResIndexToken", new[] { "ResourceId" });
            DropIndex("public.ClaimResponseResIndexToken", "ix_SearchParamId");
            DropIndex("public.ClaimResponseResIndexToken", "ix_System");
            DropIndex("public.ClaimResponseResIndexToken", "ix_Code");
            DropIndex("public.ClaimResponseResIndexString", new[] { "ResourceId" });
            DropIndex("public.ClaimResponseResIndexString", "ix_SearchParamId");
            DropIndex("public.ClaimResponseResIndexString", "ix_String");
            DropIndex("public.ClaimResponseResIndexReference", new[] { "ResourceId" });
            DropIndex("public.ClaimResponseResIndexReference", "ix_SearchParamId");
            DropIndex("public.ClaimResponseResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.ClaimResponseResIndexReference", "ix_RefFhirId");
            DropIndex("public.ClaimResponseResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.ClaimResponseResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.ClaimResponseResIndexQuantity", "ix_System");
            DropIndex("public.ClaimResponseResIndexQuantity", "ix_Code");
            DropIndex("public.ClaimResponseResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.ClaimResponseResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.ClaimResponseResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.ClaimResponseResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.ClaimResponseRes", new[] { "FhirReleaseId" });
            DropIndex("public.ClaimResponseRes", "ix_LastUpdated");
            DropIndex("public.ClaimResponseRes", "ix_IsDeleted");
            DropIndex("public.ClaimResponseRes", "uq_FhirIdAndVersionId");
            DropIndex("public.ClaimResponseRes", "ix_IsCurrent");
            DropIndex("public.ClaimResIndexUri", new[] { "ResourceId" });
            DropIndex("public.ClaimResIndexUri", "ix_SearchParamId");
            DropIndex("public.ClaimResIndexUri", "ix_Uri");
            DropIndex("public.ClaimResIndexToken", new[] { "ResourceId" });
            DropIndex("public.ClaimResIndexToken", "ix_SearchParamId");
            DropIndex("public.ClaimResIndexToken", "ix_System");
            DropIndex("public.ClaimResIndexToken", "ix_Code");
            DropIndex("public.ClaimResIndexString", new[] { "ResourceId" });
            DropIndex("public.ClaimResIndexString", "ix_SearchParamId");
            DropIndex("public.ClaimResIndexString", "ix_String");
            DropIndex("public.ClaimResIndexReference", new[] { "ResourceId" });
            DropIndex("public.ClaimResIndexReference", "ix_SearchParamId");
            DropIndex("public.ClaimResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.ClaimResIndexReference", "ix_RefFhirId");
            DropIndex("public.ClaimResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.ClaimResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.ClaimResIndexQuantity", "ix_System");
            DropIndex("public.ClaimResIndexQuantity", "ix_Code");
            DropIndex("public.ClaimResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.ClaimResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.ClaimResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.ClaimResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.ClaimRes", new[] { "FhirReleaseId" });
            DropIndex("public.ClaimRes", "ix_LastUpdated");
            DropIndex("public.ClaimRes", "ix_IsDeleted");
            DropIndex("public.ClaimRes", "uq_FhirIdAndVersionId");
            DropIndex("public.ClaimRes", "ix_IsCurrent");
            DropIndex("public.ChargeItemResIndexUri", new[] { "ResourceId" });
            DropIndex("public.ChargeItemResIndexUri", "ix_SearchParamId");
            DropIndex("public.ChargeItemResIndexUri", "ix_Uri");
            DropIndex("public.ChargeItemResIndexToken", new[] { "ResourceId" });
            DropIndex("public.ChargeItemResIndexToken", "ix_SearchParamId");
            DropIndex("public.ChargeItemResIndexToken", "ix_System");
            DropIndex("public.ChargeItemResIndexToken", "ix_Code");
            DropIndex("public.ChargeItemResIndexString", new[] { "ResourceId" });
            DropIndex("public.ChargeItemResIndexString", "ix_SearchParamId");
            DropIndex("public.ChargeItemResIndexString", "ix_String");
            DropIndex("public.ChargeItemResIndexReference", new[] { "ResourceId" });
            DropIndex("public.ChargeItemResIndexReference", "ix_SearchParamId");
            DropIndex("public.ChargeItemResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.ChargeItemResIndexReference", "ix_RefFhirId");
            DropIndex("public.ChargeItemResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.ChargeItemResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.ChargeItemResIndexQuantity", "ix_System");
            DropIndex("public.ChargeItemResIndexQuantity", "ix_Code");
            DropIndex("public.ChargeItemResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.ChargeItemResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.ChargeItemResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.ChargeItemResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.ChargeItemRes", new[] { "FhirReleaseId" });
            DropIndex("public.ChargeItemRes", "ix_LastUpdated");
            DropIndex("public.ChargeItemRes", "ix_IsDeleted");
            DropIndex("public.ChargeItemRes", "uq_FhirIdAndVersionId");
            DropIndex("public.ChargeItemRes", "ix_IsCurrent");
            DropIndex("public.CareTeamResIndexUri", new[] { "ResourceId" });
            DropIndex("public.CareTeamResIndexUri", "ix_SearchParamId");
            DropIndex("public.CareTeamResIndexUri", "ix_Uri");
            DropIndex("public.CareTeamResIndexToken", new[] { "ResourceId" });
            DropIndex("public.CareTeamResIndexToken", "ix_SearchParamId");
            DropIndex("public.CareTeamResIndexToken", "ix_System");
            DropIndex("public.CareTeamResIndexToken", "ix_Code");
            DropIndex("public.CareTeamResIndexString", new[] { "ResourceId" });
            DropIndex("public.CareTeamResIndexString", "ix_SearchParamId");
            DropIndex("public.CareTeamResIndexString", "ix_String");
            DropIndex("public.CareTeamResIndexReference", new[] { "ResourceId" });
            DropIndex("public.CareTeamResIndexReference", "ix_SearchParamId");
            DropIndex("public.CareTeamResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.CareTeamResIndexReference", "ix_RefFhirId");
            DropIndex("public.CareTeamResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.CareTeamResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.CareTeamResIndexQuantity", "ix_System");
            DropIndex("public.CareTeamResIndexQuantity", "ix_Code");
            DropIndex("public.CareTeamResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.CareTeamResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.CareTeamResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.CareTeamResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.CareTeamRes", new[] { "FhirReleaseId" });
            DropIndex("public.CareTeamRes", "ix_LastUpdated");
            DropIndex("public.CareTeamRes", "ix_IsDeleted");
            DropIndex("public.CareTeamRes", "uq_FhirIdAndVersionId");
            DropIndex("public.CareTeamRes", "ix_IsCurrent");
            DropIndex("public.CarePlanResIndexUri", new[] { "ResourceId" });
            DropIndex("public.CarePlanResIndexUri", "ix_SearchParamId");
            DropIndex("public.CarePlanResIndexUri", "ix_Uri");
            DropIndex("public.CarePlanResIndexToken", new[] { "ResourceId" });
            DropIndex("public.CarePlanResIndexToken", "ix_SearchParamId");
            DropIndex("public.CarePlanResIndexToken", "ix_System");
            DropIndex("public.CarePlanResIndexToken", "ix_Code");
            DropIndex("public.CarePlanResIndexString", new[] { "ResourceId" });
            DropIndex("public.CarePlanResIndexString", "ix_SearchParamId");
            DropIndex("public.CarePlanResIndexString", "ix_String");
            DropIndex("public.CarePlanResIndexReference", new[] { "ResourceId" });
            DropIndex("public.CarePlanResIndexReference", "ix_SearchParamId");
            DropIndex("public.CarePlanResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.CarePlanResIndexReference", "ix_RefFhirId");
            DropIndex("public.CarePlanResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.CarePlanResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.CarePlanResIndexQuantity", "ix_System");
            DropIndex("public.CarePlanResIndexQuantity", "ix_Code");
            DropIndex("public.CarePlanResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.CarePlanResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.CarePlanResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.CarePlanResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.CarePlanRes", new[] { "FhirReleaseId" });
            DropIndex("public.CarePlanRes", "ix_LastUpdated");
            DropIndex("public.CarePlanRes", "ix_IsDeleted");
            DropIndex("public.CarePlanRes", "uq_FhirIdAndVersionId");
            DropIndex("public.CarePlanRes", "ix_IsCurrent");
            DropIndex("public.CapabilityStatementResIndexUri", new[] { "ResourceId" });
            DropIndex("public.CapabilityStatementResIndexUri", "ix_SearchParamId");
            DropIndex("public.CapabilityStatementResIndexUri", "ix_Uri");
            DropIndex("public.CapabilityStatementResIndexToken", new[] { "ResourceId" });
            DropIndex("public.CapabilityStatementResIndexToken", "ix_SearchParamId");
            DropIndex("public.CapabilityStatementResIndexToken", "ix_System");
            DropIndex("public.CapabilityStatementResIndexToken", "ix_Code");
            DropIndex("public.CapabilityStatementResIndexString", new[] { "ResourceId" });
            DropIndex("public.CapabilityStatementResIndexString", "ix_SearchParamId");
            DropIndex("public.CapabilityStatementResIndexString", "ix_String");
            DropIndex("public.CapabilityStatementResIndexReference", new[] { "ResourceId" });
            DropIndex("public.CapabilityStatementResIndexReference", "ix_SearchParamId");
            DropIndex("public.CapabilityStatementResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.CapabilityStatementResIndexReference", "ix_RefFhirId");
            DropIndex("public.CapabilityStatementResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.CapabilityStatementResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.CapabilityStatementResIndexQuantity", "ix_System");
            DropIndex("public.CapabilityStatementResIndexQuantity", "ix_Code");
            DropIndex("public.CapabilityStatementResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.CapabilityStatementResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.CapabilityStatementResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.CapabilityStatementResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.CapabilityStatementRes", new[] { "FhirReleaseId" });
            DropIndex("public.CapabilityStatementRes", "ix_LastUpdated");
            DropIndex("public.CapabilityStatementRes", "ix_IsDeleted");
            DropIndex("public.CapabilityStatementRes", "uq_FhirIdAndVersionId");
            DropIndex("public.CapabilityStatementRes", "ix_IsCurrent");
            DropIndex("public.BundleResIndexUri", new[] { "ResourceId" });
            DropIndex("public.BundleResIndexUri", "ix_SearchParamId");
            DropIndex("public.BundleResIndexUri", "ix_Uri");
            DropIndex("public.BundleResIndexToken", new[] { "ResourceId" });
            DropIndex("public.BundleResIndexToken", "ix_SearchParamId");
            DropIndex("public.BundleResIndexToken", "ix_System");
            DropIndex("public.BundleResIndexToken", "ix_Code");
            DropIndex("public.BundleResIndexString", new[] { "ResourceId" });
            DropIndex("public.BundleResIndexString", "ix_SearchParamId");
            DropIndex("public.BundleResIndexString", "ix_String");
            DropIndex("public.BundleResIndexReference", new[] { "ResourceId" });
            DropIndex("public.BundleResIndexReference", "ix_SearchParamId");
            DropIndex("public.BundleResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.BundleResIndexReference", "ix_RefFhirId");
            DropIndex("public.BundleResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.BundleResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.BundleResIndexQuantity", "ix_System");
            DropIndex("public.BundleResIndexQuantity", "ix_Code");
            DropIndex("public.BundleResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.BundleResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.BundleResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.BundleResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.BundleRes", new[] { "FhirReleaseId" });
            DropIndex("public.BundleRes", "ix_LastUpdated");
            DropIndex("public.BundleRes", "ix_IsDeleted");
            DropIndex("public.BundleRes", "uq_FhirIdAndVersionId");
            DropIndex("public.BundleRes", "ix_IsCurrent");
            DropIndex("public.BodySiteResIndexUri", new[] { "ResourceId" });
            DropIndex("public.BodySiteResIndexUri", "ix_SearchParamId");
            DropIndex("public.BodySiteResIndexUri", "ix_Uri");
            DropIndex("public.BodySiteResIndexToken", new[] { "ResourceId" });
            DropIndex("public.BodySiteResIndexToken", "ix_SearchParamId");
            DropIndex("public.BodySiteResIndexToken", "ix_System");
            DropIndex("public.BodySiteResIndexToken", "ix_Code");
            DropIndex("public.BodySiteResIndexString", new[] { "ResourceId" });
            DropIndex("public.BodySiteResIndexString", "ix_SearchParamId");
            DropIndex("public.BodySiteResIndexString", "ix_String");
            DropIndex("public.BodySiteResIndexReference", new[] { "ResourceId" });
            DropIndex("public.BodySiteResIndexReference", "ix_SearchParamId");
            DropIndex("public.BodySiteResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.BodySiteResIndexReference", "ix_RefFhirId");
            DropIndex("public.BodySiteResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.BodySiteResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.BodySiteResIndexQuantity", "ix_System");
            DropIndex("public.BodySiteResIndexQuantity", "ix_Code");
            DropIndex("public.BodySiteResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.BodySiteResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.BodySiteResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.BodySiteResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.BodySiteRes", new[] { "FhirReleaseId" });
            DropIndex("public.BodySiteRes", "ix_LastUpdated");
            DropIndex("public.BodySiteRes", "ix_IsDeleted");
            DropIndex("public.BodySiteRes", "uq_FhirIdAndVersionId");
            DropIndex("public.BodySiteRes", "ix_IsCurrent");
            DropIndex("public.BinaryResIndexUri", new[] { "ResourceId" });
            DropIndex("public.BinaryResIndexUri", "ix_SearchParamId");
            DropIndex("public.BinaryResIndexUri", "ix_Uri");
            DropIndex("public.BinaryResIndexToken", new[] { "ResourceId" });
            DropIndex("public.BinaryResIndexToken", "ix_SearchParamId");
            DropIndex("public.BinaryResIndexToken", "ix_System");
            DropIndex("public.BinaryResIndexToken", "ix_Code");
            DropIndex("public.BinaryResIndexString", new[] { "ResourceId" });
            DropIndex("public.BinaryResIndexString", "ix_SearchParamId");
            DropIndex("public.BinaryResIndexString", "ix_String");
            DropIndex("public.BinaryResIndexReference", new[] { "ResourceId" });
            DropIndex("public.BinaryResIndexReference", "ix_SearchParamId");
            DropIndex("public.BinaryResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.BinaryResIndexReference", "ix_RefFhirId");
            DropIndex("public.BinaryResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.BinaryResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.BinaryResIndexQuantity", "ix_System");
            DropIndex("public.BinaryResIndexQuantity", "ix_Code");
            DropIndex("public.BinaryResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.BinaryResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.BinaryResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.BinaryResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.BinaryRes", new[] { "FhirReleaseId" });
            DropIndex("public.BinaryRes", "ix_LastUpdated");
            DropIndex("public.BinaryRes", "ix_IsDeleted");
            DropIndex("public.BinaryRes", "uq_FhirIdAndVersionId");
            DropIndex("public.BinaryRes", "ix_IsCurrent");
            DropIndex("public.BasicResIndexUri", new[] { "ResourceId" });
            DropIndex("public.BasicResIndexUri", "ix_SearchParamId");
            DropIndex("public.BasicResIndexUri", "ix_Uri");
            DropIndex("public.BasicResIndexToken", new[] { "ResourceId" });
            DropIndex("public.BasicResIndexToken", "ix_SearchParamId");
            DropIndex("public.BasicResIndexToken", "ix_System");
            DropIndex("public.BasicResIndexToken", "ix_Code");
            DropIndex("public.BasicResIndexString", new[] { "ResourceId" });
            DropIndex("public.BasicResIndexString", "ix_SearchParamId");
            DropIndex("public.BasicResIndexString", "ix_String");
            DropIndex("public.BasicResIndexReference", new[] { "ResourceId" });
            DropIndex("public.BasicResIndexReference", "ix_SearchParamId");
            DropIndex("public.BasicResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.BasicResIndexReference", "ix_RefFhirId");
            DropIndex("public.BasicResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.BasicResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.BasicResIndexQuantity", "ix_System");
            DropIndex("public.BasicResIndexQuantity", "ix_Code");
            DropIndex("public.BasicResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.BasicResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.BasicResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.BasicResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.BasicRes", new[] { "FhirReleaseId" });
            DropIndex("public.BasicRes", "ix_LastUpdated");
            DropIndex("public.BasicRes", "ix_IsDeleted");
            DropIndex("public.BasicRes", "uq_FhirIdAndVersionId");
            DropIndex("public.BasicRes", "ix_IsCurrent");
            DropIndex("public.AuditEventResIndexUri", new[] { "ResourceId" });
            DropIndex("public.AuditEventResIndexUri", "ix_SearchParamId");
            DropIndex("public.AuditEventResIndexUri", "ix_Uri");
            DropIndex("public.AuditEventResIndexToken", new[] { "ResourceId" });
            DropIndex("public.AuditEventResIndexToken", "ix_SearchParamId");
            DropIndex("public.AuditEventResIndexToken", "ix_System");
            DropIndex("public.AuditEventResIndexToken", "ix_Code");
            DropIndex("public.AuditEventResIndexString", new[] { "ResourceId" });
            DropIndex("public.AuditEventResIndexString", "ix_SearchParamId");
            DropIndex("public.AuditEventResIndexString", "ix_String");
            DropIndex("public.AuditEventResIndexReference", new[] { "ResourceId" });
            DropIndex("public.AuditEventResIndexReference", "ix_SearchParamId");
            DropIndex("public.AuditEventResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.AuditEventResIndexReference", "ix_RefFhirId");
            DropIndex("public.AuditEventResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.AuditEventResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.AuditEventResIndexQuantity", "ix_System");
            DropIndex("public.AuditEventResIndexQuantity", "ix_Code");
            DropIndex("public.AuditEventResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.AuditEventResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.AuditEventResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.AuditEventResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.AuditEventRes", new[] { "FhirReleaseId" });
            DropIndex("public.AuditEventRes", "ix_LastUpdated");
            DropIndex("public.AuditEventRes", "ix_IsDeleted");
            DropIndex("public.AuditEventRes", "uq_FhirIdAndVersionId");
            DropIndex("public.AuditEventRes", "ix_IsCurrent");
            DropIndex("public.AppointmentResponseResIndexUri", new[] { "ResourceId" });
            DropIndex("public.AppointmentResponseResIndexUri", "ix_SearchParamId");
            DropIndex("public.AppointmentResponseResIndexUri", "ix_Uri");
            DropIndex("public.AppointmentResponseResIndexToken", new[] { "ResourceId" });
            DropIndex("public.AppointmentResponseResIndexToken", "ix_SearchParamId");
            DropIndex("public.AppointmentResponseResIndexToken", "ix_System");
            DropIndex("public.AppointmentResponseResIndexToken", "ix_Code");
            DropIndex("public.AppointmentResponseResIndexString", new[] { "ResourceId" });
            DropIndex("public.AppointmentResponseResIndexString", "ix_SearchParamId");
            DropIndex("public.AppointmentResponseResIndexString", "ix_String");
            DropIndex("public.AppointmentResponseResIndexReference", new[] { "ResourceId" });
            DropIndex("public.AppointmentResponseResIndexReference", "ix_SearchParamId");
            DropIndex("public.AppointmentResponseResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.AppointmentResponseResIndexReference", "ix_RefFhirId");
            DropIndex("public.AppointmentResponseResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.AppointmentResponseResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.AppointmentResponseResIndexQuantity", "ix_System");
            DropIndex("public.AppointmentResponseResIndexQuantity", "ix_Code");
            DropIndex("public.AppointmentResponseResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.AppointmentResponseResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.AppointmentResponseResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.AppointmentResponseResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.AppointmentResponseRes", new[] { "FhirReleaseId" });
            DropIndex("public.AppointmentResponseRes", "ix_LastUpdated");
            DropIndex("public.AppointmentResponseRes", "ix_IsDeleted");
            DropIndex("public.AppointmentResponseRes", "uq_FhirIdAndVersionId");
            DropIndex("public.AppointmentResponseRes", "ix_IsCurrent");
            DropIndex("public.AppointmentResIndexUri", new[] { "ResourceId" });
            DropIndex("public.AppointmentResIndexUri", "ix_SearchParamId");
            DropIndex("public.AppointmentResIndexUri", "ix_Uri");
            DropIndex("public.AppointmentResIndexToken", new[] { "ResourceId" });
            DropIndex("public.AppointmentResIndexToken", "ix_SearchParamId");
            DropIndex("public.AppointmentResIndexToken", "ix_System");
            DropIndex("public.AppointmentResIndexToken", "ix_Code");
            DropIndex("public.AppointmentResIndexString", new[] { "ResourceId" });
            DropIndex("public.AppointmentResIndexString", "ix_SearchParamId");
            DropIndex("public.AppointmentResIndexString", "ix_String");
            DropIndex("public.AppointmentResIndexReference", new[] { "ResourceId" });
            DropIndex("public.AppointmentResIndexReference", "ix_SearchParamId");
            DropIndex("public.AppointmentResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.AppointmentResIndexReference", "ix_RefFhirId");
            DropIndex("public.AppointmentResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.AppointmentResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.AppointmentResIndexQuantity", "ix_System");
            DropIndex("public.AppointmentResIndexQuantity", "ix_Code");
            DropIndex("public.AppointmentResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.AppointmentResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.AppointmentResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.AppointmentResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.AppointmentRes", new[] { "FhirReleaseId" });
            DropIndex("public.AppointmentRes", "ix_LastUpdated");
            DropIndex("public.AppointmentRes", "ix_IsDeleted");
            DropIndex("public.AppointmentRes", "uq_FhirIdAndVersionId");
            DropIndex("public.AppointmentRes", "ix_IsCurrent");
            DropIndex("public.AllergyIntoleranceResIndexUri", new[] { "ResourceId" });
            DropIndex("public.AllergyIntoleranceResIndexUri", "ix_SearchParamId");
            DropIndex("public.AllergyIntoleranceResIndexUri", "ix_Uri");
            DropIndex("public.AllergyIntoleranceResIndexToken", new[] { "ResourceId" });
            DropIndex("public.AllergyIntoleranceResIndexToken", "ix_SearchParamId");
            DropIndex("public.AllergyIntoleranceResIndexToken", "ix_System");
            DropIndex("public.AllergyIntoleranceResIndexToken", "ix_Code");
            DropIndex("public.AllergyIntoleranceResIndexString", new[] { "ResourceId" });
            DropIndex("public.AllergyIntoleranceResIndexString", "ix_SearchParamId");
            DropIndex("public.AllergyIntoleranceResIndexString", "ix_String");
            DropIndex("public.AllergyIntoleranceResIndexReference", new[] { "ResourceId" });
            DropIndex("public.AllergyIntoleranceResIndexReference", "ix_SearchParamId");
            DropIndex("public.AllergyIntoleranceResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.AllergyIntoleranceResIndexReference", "ix_RefFhirId");
            DropIndex("public.AllergyIntoleranceResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.AllergyIntoleranceResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.AllergyIntoleranceResIndexQuantity", "ix_System");
            DropIndex("public.AllergyIntoleranceResIndexQuantity", "ix_Code");
            DropIndex("public.AllergyIntoleranceResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.AllergyIntoleranceResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.AllergyIntoleranceResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.AllergyIntoleranceResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.AllergyIntoleranceRes", new[] { "FhirReleaseId" });
            DropIndex("public.AllergyIntoleranceRes", "ix_LastUpdated");
            DropIndex("public.AllergyIntoleranceRes", "ix_IsDeleted");
            DropIndex("public.AllergyIntoleranceRes", "uq_FhirIdAndVersionId");
            DropIndex("public.AllergyIntoleranceRes", "ix_IsCurrent");
            DropIndex("public.AdverseEventResIndexUri", new[] { "ResourceId" });
            DropIndex("public.AdverseEventResIndexUri", "ix_SearchParamId");
            DropIndex("public.AdverseEventResIndexUri", "ix_Uri");
            DropIndex("public.AdverseEventResIndexToken", new[] { "ResourceId" });
            DropIndex("public.AdverseEventResIndexToken", "ix_SearchParamId");
            DropIndex("public.AdverseEventResIndexToken", "ix_System");
            DropIndex("public.AdverseEventResIndexToken", "ix_Code");
            DropIndex("public.AdverseEventResIndexString", new[] { "ResourceId" });
            DropIndex("public.AdverseEventResIndexString", "ix_SearchParamId");
            DropIndex("public.AdverseEventResIndexString", "ix_String");
            DropIndex("public.AdverseEventResIndexReference", new[] { "ResourceId" });
            DropIndex("public.AdverseEventResIndexReference", "ix_SearchParamId");
            DropIndex("public.AdverseEventResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.AdverseEventResIndexReference", "ix_RefFhirId");
            DropIndex("public.AdverseEventResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.AdverseEventResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.AdverseEventResIndexQuantity", "ix_System");
            DropIndex("public.AdverseEventResIndexQuantity", "ix_Code");
            DropIndex("public.AdverseEventResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.AdverseEventResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.AdverseEventResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.AdverseEventResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.AdverseEventRes", new[] { "FhirReleaseId" });
            DropIndex("public.AdverseEventRes", "ix_LastUpdated");
            DropIndex("public.AdverseEventRes", "ix_IsDeleted");
            DropIndex("public.AdverseEventRes", "uq_FhirIdAndVersionId");
            DropIndex("public.AdverseEventRes", "ix_IsCurrent");
            DropIndex("public.ActivityDefinitionResIndexUri", new[] { "ResourceId" });
            DropIndex("public.ActivityDefinitionResIndexUri", "ix_SearchParamId");
            DropIndex("public.ActivityDefinitionResIndexUri", "ix_Uri");
            DropIndex("public.ActivityDefinitionResIndexToken", new[] { "ResourceId" });
            DropIndex("public.ActivityDefinitionResIndexToken", "ix_SearchParamId");
            DropIndex("public.ActivityDefinitionResIndexToken", "ix_System");
            DropIndex("public.ActivityDefinitionResIndexToken", "ix_Code");
            DropIndex("public.ActivityDefinitionResIndexString", new[] { "ResourceId" });
            DropIndex("public.ActivityDefinitionResIndexString", "ix_SearchParamId");
            DropIndex("public.ActivityDefinitionResIndexString", "ix_String");
            DropIndex("public._BaseUrl", "ix_Url");
            DropIndex("public.ActivityDefinitionResIndexReference", new[] { "ResourceId" });
            DropIndex("public.ActivityDefinitionResIndexReference", "ix_SearchParamId");
            DropIndex("public.ActivityDefinitionResIndexReference", "ix_RefBaseUrlId");
            DropIndex("public.ActivityDefinitionResIndexReference", "ix_RefFhirId");
            DropIndex("public.ActivityDefinitionResIndexQuantity", new[] { "ResourceId" });
            DropIndex("public.ActivityDefinitionResIndexQuantity", "ix_SearchParamId");
            DropIndex("public.ActivityDefinitionResIndexQuantity", "ix_System");
            DropIndex("public.ActivityDefinitionResIndexQuantity", "ix_Code");
            DropIndex("public._SParamResource", "ix_SearchParamId");
            DropIndex("public._SearchParam", "ix_Status");
            DropIndex("public._SearchParam", "ix_IsIndexed");
            DropIndex("public._SearchParam", "uq_ResourceAndName");
            DropIndex("public.ActivityDefinitionResIndexDateTime", new[] { "ResourceId" });
            DropIndex("public.ActivityDefinitionResIndexDateTime", "ix_SearchParamId");
            DropIndex("public.ActivityDefinitionResIndexDateTime", "ix_HighUtcDateTime");
            DropIndex("public.ActivityDefinitionResIndexDateTime", "ix_LowUtcDateTime");
            DropIndex("public.ActivityDefinitionRes", new[] { "FhirReleaseId" });
            DropIndex("public.ActivityDefinitionRes", "ix_LastUpdated");
            DropIndex("public.ActivityDefinitionRes", "ix_IsDeleted");
            DropIndex("public.ActivityDefinitionRes", "uq_FhirIdAndVersionId");
            DropIndex("public.ActivityDefinitionRes", "ix_IsCurrent");
            DropIndex("public.AccountRes", new[] { "FhirReleaseId" });
            DropIndex("public.AccountRes", "ix_LastUpdated");
            DropIndex("public.AccountRes", "ix_IsDeleted");
            DropIndex("public.AccountRes", "uq_FhirIdAndVersionId");
            DropIndex("public.AccountRes", "ix_IsCurrent");
            DropTable("public._ServConfig");
            DropTable("public._CompartmentRes");
            DropTable("public._Compartment");
            DropTable("public.AccountResIndexUri");
            DropTable("public.AccountResIndexToken");
            DropTable("public.AccountResIndexString");
            DropTable("public.AccountResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.AccountResIndexQuantity");
            DropTable("public.AccountResIndexDateTime");
            DropTable("public.VisionPrescriptionResIndexUri");
            DropTable("public.VisionPrescriptionResIndexToken");
            DropTable("public.VisionPrescriptionResIndexString");
            DropTable("public.VisionPrescriptionResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.VisionPrescriptionResIndexQuantity");
            DropTable("public.VisionPrescriptionResIndexDateTime");
            DropTable("public.VisionPrescriptionRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ValueSetResIndexUri");
            DropTable("public.ValueSetResIndexToken");
            DropTable("public.ValueSetResIndexString");
            DropTable("public.ValueSetResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ValueSetResIndexQuantity");
            DropTable("public.ValueSetResIndexDateTime");
            DropTable("public.ValueSetRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.TestScriptResIndexUri");
            DropTable("public.TestScriptResIndexToken");
            DropTable("public.TestScriptResIndexString");
            DropTable("public.TestScriptResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.TestScriptResIndexQuantity");
            DropTable("public.TestScriptResIndexDateTime");
            DropTable("public.TestScriptRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.TestReportResIndexUri");
            DropTable("public.TestReportResIndexToken");
            DropTable("public.TestReportResIndexString");
            DropTable("public.TestReportResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.TestReportResIndexQuantity");
            DropTable("public.TestReportResIndexDateTime");
            DropTable("public.TestReportRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.TaskResIndexUri");
            DropTable("public.TaskResIndexToken");
            DropTable("public.TaskResIndexString");
            DropTable("public.TaskResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.TaskResIndexQuantity");
            DropTable("public.TaskResIndexDateTime");
            DropTable("public.TaskRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.SupplyRequestResIndexUri");
            DropTable("public.SupplyRequestResIndexToken");
            DropTable("public.SupplyRequestResIndexString");
            DropTable("public.SupplyRequestResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.SupplyRequestResIndexQuantity");
            DropTable("public.SupplyRequestResIndexDateTime");
            DropTable("public.SupplyRequestRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.SupplyDeliveryResIndexUri");
            DropTable("public.SupplyDeliveryResIndexToken");
            DropTable("public.SupplyDeliveryResIndexString");
            DropTable("public.SupplyDeliveryResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.SupplyDeliveryResIndexQuantity");
            DropTable("public.SupplyDeliveryResIndexDateTime");
            DropTable("public.SupplyDeliveryRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.SubstanceResIndexUri");
            DropTable("public.SubstanceResIndexToken");
            DropTable("public.SubstanceResIndexString");
            DropTable("public.SubstanceResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.SubstanceResIndexQuantity");
            DropTable("public.SubstanceResIndexDateTime");
            DropTable("public.SubstanceRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.SubscriptionResIndexUri");
            DropTable("public.SubscriptionResIndexToken");
            DropTable("public.SubscriptionResIndexString");
            DropTable("public.SubscriptionResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.SubscriptionResIndexQuantity");
            DropTable("public.SubscriptionResIndexDateTime");
            DropTable("public.SubscriptionRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.StructureMapResIndexUri");
            DropTable("public.StructureMapResIndexToken");
            DropTable("public.StructureMapResIndexString");
            DropTable("public.StructureMapResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.StructureMapResIndexQuantity");
            DropTable("public.StructureMapResIndexDateTime");
            DropTable("public.StructureMapRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.StructureDefinitionResIndexUri");
            DropTable("public.StructureDefinitionResIndexToken");
            DropTable("public.StructureDefinitionResIndexString");
            DropTable("public.StructureDefinitionResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.StructureDefinitionResIndexQuantity");
            DropTable("public.StructureDefinitionResIndexDateTime");
            DropTable("public.StructureDefinitionRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.SpecimenResIndexUri");
            DropTable("public.SpecimenResIndexToken");
            DropTable("public.SpecimenResIndexString");
            DropTable("public.SpecimenResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.SpecimenResIndexQuantity");
            DropTable("public.SpecimenResIndexDateTime");
            DropTable("public.SpecimenRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.SlotResIndexUri");
            DropTable("public.SlotResIndexToken");
            DropTable("public.SlotResIndexString");
            DropTable("public.SlotResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.SlotResIndexQuantity");
            DropTable("public.SlotResIndexDateTime");
            DropTable("public.SlotRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ServiceDefinitionResIndexUri");
            DropTable("public.ServiceDefinitionResIndexToken");
            DropTable("public.ServiceDefinitionResIndexString");
            DropTable("public.ServiceDefinitionResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ServiceDefinitionResIndexQuantity");
            DropTable("public.ServiceDefinitionResIndexDateTime");
            DropTable("public.ServiceDefinitionRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.SequenceResIndexUri");
            DropTable("public.SequenceResIndexToken");
            DropTable("public.SequenceResIndexString");
            DropTable("public.SequenceResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.SequenceResIndexQuantity");
            DropTable("public.SequenceResIndexDateTime");
            DropTable("public.SequenceRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.SearchParameterResIndexUri");
            DropTable("public.SearchParameterResIndexToken");
            DropTable("public.SearchParameterResIndexString");
            DropTable("public.SearchParameterResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.SearchParameterResIndexQuantity");
            DropTable("public.SearchParameterResIndexDateTime");
            DropTable("public.SearchParameterRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ScheduleResIndexUri");
            DropTable("public.ScheduleResIndexToken");
            DropTable("public.ScheduleResIndexString");
            DropTable("public.ScheduleResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ScheduleResIndexQuantity");
            DropTable("public.ScheduleResIndexDateTime");
            DropTable("public.ScheduleRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.RiskAssessmentResIndexUri");
            DropTable("public.RiskAssessmentResIndexToken");
            DropTable("public.RiskAssessmentResIndexString");
            DropTable("public.RiskAssessmentResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.RiskAssessmentResIndexQuantity");
            DropTable("public.RiskAssessmentResIndexDateTime");
            DropTable("public.RiskAssessmentRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ResearchSubjectResIndexUri");
            DropTable("public.ResearchSubjectResIndexToken");
            DropTable("public.ResearchSubjectResIndexString");
            DropTable("public.ResearchSubjectResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ResearchSubjectResIndexQuantity");
            DropTable("public.ResearchSubjectResIndexDateTime");
            DropTable("public.ResearchSubjectRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ResearchStudyResIndexUri");
            DropTable("public.ResearchStudyResIndexToken");
            DropTable("public.ResearchStudyResIndexString");
            DropTable("public.ResearchStudyResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ResearchStudyResIndexQuantity");
            DropTable("public.ResearchStudyResIndexDateTime");
            DropTable("public.ResearchStudyRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.RequestGroupResIndexUri");
            DropTable("public.RequestGroupResIndexToken");
            DropTable("public.RequestGroupResIndexString");
            DropTable("public.RequestGroupResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.RequestGroupResIndexQuantity");
            DropTable("public.RequestGroupResIndexDateTime");
            DropTable("public.RequestGroupRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.RelatedPersonResIndexUri");
            DropTable("public.RelatedPersonResIndexToken");
            DropTable("public.RelatedPersonResIndexString");
            DropTable("public.RelatedPersonResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.RelatedPersonResIndexQuantity");
            DropTable("public.RelatedPersonResIndexDateTime");
            DropTable("public.RelatedPersonRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ReferralRequestResIndexUri");
            DropTable("public.ReferralRequestResIndexToken");
            DropTable("public.ReferralRequestResIndexString");
            DropTable("public.ReferralRequestResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ReferralRequestResIndexQuantity");
            DropTable("public.ReferralRequestResIndexDateTime");
            DropTable("public.ReferralRequestRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.QuestionnaireResponseResIndexUri");
            DropTable("public.QuestionnaireResponseResIndexToken");
            DropTable("public.QuestionnaireResponseResIndexString");
            DropTable("public.QuestionnaireResponseResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.QuestionnaireResponseResIndexQuantity");
            DropTable("public.QuestionnaireResponseResIndexDateTime");
            DropTable("public.QuestionnaireResponseRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.QuestionnaireResIndexUri");
            DropTable("public.QuestionnaireResIndexToken");
            DropTable("public.QuestionnaireResIndexString");
            DropTable("public.QuestionnaireResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.QuestionnaireResIndexQuantity");
            DropTable("public.QuestionnaireResIndexDateTime");
            DropTable("public.QuestionnaireRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ProvenanceResIndexUri");
            DropTable("public.ProvenanceResIndexToken");
            DropTable("public.ProvenanceResIndexString");
            DropTable("public.ProvenanceResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ProvenanceResIndexQuantity");
            DropTable("public.ProvenanceResIndexDateTime");
            DropTable("public.ProvenanceRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ProcessResponseResIndexUri");
            DropTable("public.ProcessResponseResIndexToken");
            DropTable("public.ProcessResponseResIndexString");
            DropTable("public.ProcessResponseResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ProcessResponseResIndexQuantity");
            DropTable("public.ProcessResponseResIndexDateTime");
            DropTable("public.ProcessResponseRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ProcessRequestResIndexUri");
            DropTable("public.ProcessRequestResIndexToken");
            DropTable("public.ProcessRequestResIndexString");
            DropTable("public.ProcessRequestResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ProcessRequestResIndexQuantity");
            DropTable("public.ProcessRequestResIndexDateTime");
            DropTable("public.ProcessRequestRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ProcedureRequestResIndexUri");
            DropTable("public.ProcedureRequestResIndexToken");
            DropTable("public.ProcedureRequestResIndexString");
            DropTable("public.ProcedureRequestResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ProcedureRequestResIndexQuantity");
            DropTable("public.ProcedureRequestResIndexDateTime");
            DropTable("public.ProcedureRequestRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ProcedureResIndexUri");
            DropTable("public.ProcedureResIndexToken");
            DropTable("public.ProcedureResIndexString");
            DropTable("public.ProcedureResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ProcedureResIndexQuantity");
            DropTable("public.ProcedureResIndexDateTime");
            DropTable("public.ProcedureRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.PractitionerRoleResIndexUri");
            DropTable("public.PractitionerRoleResIndexToken");
            DropTable("public.PractitionerRoleResIndexString");
            DropTable("public.PractitionerRoleResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.PractitionerRoleResIndexQuantity");
            DropTable("public.PractitionerRoleResIndexDateTime");
            DropTable("public.PractitionerRoleRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.PractitionerResIndexUri");
            DropTable("public.PractitionerResIndexToken");
            DropTable("public.PractitionerResIndexString");
            DropTable("public.PractitionerResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.PractitionerResIndexQuantity");
            DropTable("public.PractitionerResIndexDateTime");
            DropTable("public.PractitionerRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.PlanDefinitionResIndexUri");
            DropTable("public.PlanDefinitionResIndexToken");
            DropTable("public.PlanDefinitionResIndexString");
            DropTable("public.PlanDefinitionResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.PlanDefinitionResIndexQuantity");
            DropTable("public.PlanDefinitionResIndexDateTime");
            DropTable("public.PlanDefinitionRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.PersonResIndexUri");
            DropTable("public.PersonResIndexToken");
            DropTable("public.PersonResIndexString");
            DropTable("public.PersonResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.PersonResIndexQuantity");
            DropTable("public.PersonResIndexDateTime");
            DropTable("public.PersonRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.PaymentReconciliationResIndexUri");
            DropTable("public.PaymentReconciliationResIndexToken");
            DropTable("public.PaymentReconciliationResIndexString");
            DropTable("public.PaymentReconciliationResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.PaymentReconciliationResIndexQuantity");
            DropTable("public.PaymentReconciliationResIndexDateTime");
            DropTable("public.PaymentReconciliationRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.PaymentNoticeResIndexUri");
            DropTable("public.PaymentNoticeResIndexToken");
            DropTable("public.PaymentNoticeResIndexString");
            DropTable("public.PaymentNoticeResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.PaymentNoticeResIndexQuantity");
            DropTable("public.PaymentNoticeResIndexDateTime");
            DropTable("public.PaymentNoticeRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.PatientResIndexUri");
            DropTable("public.PatientResIndexToken");
            DropTable("public.PatientResIndexString");
            DropTable("public.PatientResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.PatientResIndexQuantity");
            DropTable("public.PatientResIndexDateTime");
            DropTable("public.PatientRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ParametersResIndexUri");
            DropTable("public.ParametersResIndexToken");
            DropTable("public.ParametersResIndexString");
            DropTable("public.ParametersResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ParametersResIndexQuantity");
            DropTable("public.ParametersResIndexDateTime");
            DropTable("public.ParametersRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.OrganizationResIndexUri");
            DropTable("public.OrganizationResIndexToken");
            DropTable("public.OrganizationResIndexString");
            DropTable("public.OrganizationResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.OrganizationResIndexQuantity");
            DropTable("public.OrganizationResIndexDateTime");
            DropTable("public.OrganizationRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.OperationOutcomeResIndexUri");
            DropTable("public.OperationOutcomeResIndexToken");
            DropTable("public.OperationOutcomeResIndexString");
            DropTable("public.OperationOutcomeResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.OperationOutcomeResIndexQuantity");
            DropTable("public.OperationOutcomeResIndexDateTime");
            DropTable("public.OperationOutcomeRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.OperationDefinitionResIndexUri");
            DropTable("public.OperationDefinitionResIndexToken");
            DropTable("public.OperationDefinitionResIndexString");
            DropTable("public.OperationDefinitionResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.OperationDefinitionResIndexQuantity");
            DropTable("public.OperationDefinitionResIndexDateTime");
            DropTable("public.OperationDefinitionRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ObservationResIndexUri");
            DropTable("public.ObservationResIndexToken");
            DropTable("public.ObservationResIndexString");
            DropTable("public.ObservationResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ObservationResIndexQuantity");
            DropTable("public.ObservationResIndexDateTime");
            DropTable("public.ObservationRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.NutritionOrderResIndexUri");
            DropTable("public.NutritionOrderResIndexToken");
            DropTable("public.NutritionOrderResIndexString");
            DropTable("public.NutritionOrderResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.NutritionOrderResIndexQuantity");
            DropTable("public.NutritionOrderResIndexDateTime");
            DropTable("public.NutritionOrderRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.NamingSystemResIndexUri");
            DropTable("public.NamingSystemResIndexToken");
            DropTable("public.NamingSystemResIndexString");
            DropTable("public.NamingSystemResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.NamingSystemResIndexQuantity");
            DropTable("public.NamingSystemResIndexDateTime");
            DropTable("public.NamingSystemRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.MessageHeaderResIndexUri");
            DropTable("public.MessageHeaderResIndexToken");
            DropTable("public.MessageHeaderResIndexString");
            DropTable("public.MessageHeaderResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.MessageHeaderResIndexQuantity");
            DropTable("public.MessageHeaderResIndexDateTime");
            DropTable("public.MessageHeaderRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.MessageDefinitionResIndexUri");
            DropTable("public.MessageDefinitionResIndexToken");
            DropTable("public.MessageDefinitionResIndexString");
            DropTable("public.MessageDefinitionResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.MessageDefinitionResIndexQuantity");
            DropTable("public.MessageDefinitionResIndexDateTime");
            DropTable("public.MessageDefinitionRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.MedicationStatementResIndexUri");
            DropTable("public.MedicationStatementResIndexToken");
            DropTable("public.MedicationStatementResIndexString");
            DropTable("public.MedicationStatementResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.MedicationStatementResIndexQuantity");
            DropTable("public.MedicationStatementResIndexDateTime");
            DropTable("public.MedicationStatementRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.MedicationRequestResIndexUri");
            DropTable("public.MedicationRequestResIndexToken");
            DropTable("public.MedicationRequestResIndexString");
            DropTable("public.MedicationRequestResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.MedicationRequestResIndexQuantity");
            DropTable("public.MedicationRequestResIndexDateTime");
            DropTable("public.MedicationRequestRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.MedicationResIndexUri");
            DropTable("public.MedicationResIndexToken");
            DropTable("public.MedicationResIndexString");
            DropTable("public.MedicationResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.MedicationResIndexQuantity");
            DropTable("public.MedicationResIndexDateTime");
            DropTable("public.MedicationRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.MedicationDispenseResIndexUri");
            DropTable("public.MedicationDispenseResIndexToken");
            DropTable("public.MedicationDispenseResIndexString");
            DropTable("public.MedicationDispenseResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.MedicationDispenseResIndexQuantity");
            DropTable("public.MedicationDispenseResIndexDateTime");
            DropTable("public.MedicationDispenseRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.MedicationAdministrationResIndexUri");
            DropTable("public.MedicationAdministrationResIndexToken");
            DropTable("public.MedicationAdministrationResIndexString");
            DropTable("public.MedicationAdministrationResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.MedicationAdministrationResIndexQuantity");
            DropTable("public.MedicationAdministrationResIndexDateTime");
            DropTable("public.MedicationAdministrationRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.MediaResIndexUri");
            DropTable("public.MediaResIndexToken");
            DropTable("public.MediaResIndexString");
            DropTable("public.MediaResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.MediaResIndexQuantity");
            DropTable("public.MediaResIndexDateTime");
            DropTable("public.MediaRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.MeasureReportResIndexUri");
            DropTable("public.MeasureReportResIndexToken");
            DropTable("public.MeasureReportResIndexString");
            DropTable("public.MeasureReportResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.MeasureReportResIndexQuantity");
            DropTable("public.MeasureReportResIndexDateTime");
            DropTable("public.MeasureReportRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.MeasureResIndexUri");
            DropTable("public.MeasureResIndexToken");
            DropTable("public.MeasureResIndexString");
            DropTable("public.MeasureResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.MeasureResIndexQuantity");
            DropTable("public.MeasureResIndexDateTime");
            DropTable("public.MeasureRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.LocationResIndexUri");
            DropTable("public.LocationResIndexToken");
            DropTable("public.LocationResIndexString");
            DropTable("public.LocationResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.LocationResIndexQuantity");
            DropTable("public.LocationResIndexDateTime");
            DropTable("public.LocationRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ListResIndexUri");
            DropTable("public.ListResIndexToken");
            DropTable("public.ListResIndexString");
            DropTable("public.ListResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ListResIndexQuantity");
            DropTable("public.ListResIndexDateTime");
            DropTable("public.ListRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.LinkageResIndexUri");
            DropTable("public.LinkageResIndexToken");
            DropTable("public.LinkageResIndexString");
            DropTable("public.LinkageResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.LinkageResIndexQuantity");
            DropTable("public.LinkageResIndexDateTime");
            DropTable("public.LinkageRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.LibraryResIndexUri");
            DropTable("public.LibraryResIndexToken");
            DropTable("public.LibraryResIndexString");
            DropTable("public.LibraryResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.LibraryResIndexQuantity");
            DropTable("public.LibraryResIndexDateTime");
            DropTable("public.LibraryRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ImplementationGuideResIndexUri");
            DropTable("public.ImplementationGuideResIndexToken");
            DropTable("public.ImplementationGuideResIndexString");
            DropTable("public.ImplementationGuideResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ImplementationGuideResIndexQuantity");
            DropTable("public.ImplementationGuideResIndexDateTime");
            DropTable("public.ImplementationGuideRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ImmunizationRecommendationResIndexUri");
            DropTable("public.ImmunizationRecommendationResIndexToken");
            DropTable("public.ImmunizationRecommendationResIndexString");
            DropTable("public.ImmunizationRecommendationResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ImmunizationRecommendationResIndexQuantity");
            DropTable("public.ImmunizationRecommendationResIndexDateTime");
            DropTable("public.ImmunizationRecommendationRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ImmunizationResIndexUri");
            DropTable("public.ImmunizationResIndexToken");
            DropTable("public.ImmunizationResIndexString");
            DropTable("public.ImmunizationResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ImmunizationResIndexQuantity");
            DropTable("public.ImmunizationResIndexDateTime");
            DropTable("public.ImmunizationRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ImagingStudyResIndexUri");
            DropTable("public.ImagingStudyResIndexToken");
            DropTable("public.ImagingStudyResIndexString");
            DropTable("public.ImagingStudyResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ImagingStudyResIndexQuantity");
            DropTable("public.ImagingStudyResIndexDateTime");
            DropTable("public.ImagingStudyRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ImagingManifestResIndexUri");
            DropTable("public.ImagingManifestResIndexToken");
            DropTable("public.ImagingManifestResIndexString");
            DropTable("public.ImagingManifestResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ImagingManifestResIndexQuantity");
            DropTable("public.ImagingManifestResIndexDateTime");
            DropTable("public.ImagingManifestRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.HealthcareServiceResIndexUri");
            DropTable("public.HealthcareServiceResIndexToken");
            DropTable("public.HealthcareServiceResIndexString");
            DropTable("public.HealthcareServiceResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.HealthcareServiceResIndexQuantity");
            DropTable("public.HealthcareServiceResIndexDateTime");
            DropTable("public.HealthcareServiceRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.GuidanceResponseResIndexUri");
            DropTable("public.GuidanceResponseResIndexToken");
            DropTable("public.GuidanceResponseResIndexString");
            DropTable("public.GuidanceResponseResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.GuidanceResponseResIndexQuantity");
            DropTable("public.GuidanceResponseResIndexDateTime");
            DropTable("public.GuidanceResponseRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.GroupResIndexUri");
            DropTable("public.GroupResIndexToken");
            DropTable("public.GroupResIndexString");
            DropTable("public.GroupResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.GroupResIndexQuantity");
            DropTable("public.GroupResIndexDateTime");
            DropTable("public.GroupRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.GraphDefinitionResIndexUri");
            DropTable("public.GraphDefinitionResIndexToken");
            DropTable("public.GraphDefinitionResIndexString");
            DropTable("public.GraphDefinitionResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.GraphDefinitionResIndexQuantity");
            DropTable("public.GraphDefinitionResIndexDateTime");
            DropTable("public.GraphDefinitionRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.GoalResIndexUri");
            DropTable("public.GoalResIndexToken");
            DropTable("public.GoalResIndexString");
            DropTable("public.GoalResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.GoalResIndexQuantity");
            DropTable("public.GoalResIndexDateTime");
            DropTable("public.GoalRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.FlagResIndexUri");
            DropTable("public.FlagResIndexToken");
            DropTable("public.FlagResIndexString");
            DropTable("public.FlagResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.FlagResIndexQuantity");
            DropTable("public.FlagResIndexDateTime");
            DropTable("public.FlagRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.FamilyMemberHistoryResIndexUri");
            DropTable("public.FamilyMemberHistoryResIndexToken");
            DropTable("public.FamilyMemberHistoryResIndexString");
            DropTable("public.FamilyMemberHistoryResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.FamilyMemberHistoryResIndexQuantity");
            DropTable("public.FamilyMemberHistoryResIndexDateTime");
            DropTable("public.FamilyMemberHistoryRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ExplanationOfBenefitResIndexUri");
            DropTable("public.ExplanationOfBenefitResIndexToken");
            DropTable("public.ExplanationOfBenefitResIndexString");
            DropTable("public.ExplanationOfBenefitResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ExplanationOfBenefitResIndexQuantity");
            DropTable("public.ExplanationOfBenefitResIndexDateTime");
            DropTable("public.ExplanationOfBenefitRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ExpansionProfileResIndexUri");
            DropTable("public.ExpansionProfileResIndexToken");
            DropTable("public.ExpansionProfileResIndexString");
            DropTable("public.ExpansionProfileResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ExpansionProfileResIndexQuantity");
            DropTable("public.ExpansionProfileResIndexDateTime");
            DropTable("public.ExpansionProfileRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.EpisodeOfCareResIndexUri");
            DropTable("public.EpisodeOfCareResIndexToken");
            DropTable("public.EpisodeOfCareResIndexString");
            DropTable("public.EpisodeOfCareResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.EpisodeOfCareResIndexQuantity");
            DropTable("public.EpisodeOfCareResIndexDateTime");
            DropTable("public.EpisodeOfCareRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.EnrollmentResponseResIndexUri");
            DropTable("public.EnrollmentResponseResIndexToken");
            DropTable("public.EnrollmentResponseResIndexString");
            DropTable("public.EnrollmentResponseResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.EnrollmentResponseResIndexQuantity");
            DropTable("public.EnrollmentResponseResIndexDateTime");
            DropTable("public.EnrollmentResponseRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.EnrollmentRequestResIndexUri");
            DropTable("public.EnrollmentRequestResIndexToken");
            DropTable("public.EnrollmentRequestResIndexString");
            DropTable("public.EnrollmentRequestResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.EnrollmentRequestResIndexQuantity");
            DropTable("public.EnrollmentRequestResIndexDateTime");
            DropTable("public.EnrollmentRequestRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.EndpointResIndexUri");
            DropTable("public.EndpointResIndexToken");
            DropTable("public.EndpointResIndexString");
            DropTable("public.EndpointResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.EndpointResIndexQuantity");
            DropTable("public.EndpointResIndexDateTime");
            DropTable("public.EndpointRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.EncounterResIndexUri");
            DropTable("public.EncounterResIndexToken");
            DropTable("public.EncounterResIndexString");
            DropTable("public.EncounterResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.EncounterResIndexQuantity");
            DropTable("public.EncounterResIndexDateTime");
            DropTable("public.EncounterRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.EligibilityResponseResIndexUri");
            DropTable("public.EligibilityResponseResIndexToken");
            DropTable("public.EligibilityResponseResIndexString");
            DropTable("public.EligibilityResponseResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.EligibilityResponseResIndexQuantity");
            DropTable("public.EligibilityResponseResIndexDateTime");
            DropTable("public.EligibilityResponseRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.EligibilityRequestResIndexUri");
            DropTable("public.EligibilityRequestResIndexToken");
            DropTable("public.EligibilityRequestResIndexString");
            DropTable("public.EligibilityRequestResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.EligibilityRequestResIndexQuantity");
            DropTable("public.EligibilityRequestResIndexDateTime");
            DropTable("public.EligibilityRequestRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.DocumentReferenceResIndexUri");
            DropTable("public.DocumentReferenceResIndexToken");
            DropTable("public.DocumentReferenceResIndexString");
            DropTable("public.DocumentReferenceResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.DocumentReferenceResIndexQuantity");
            DropTable("public.DocumentReferenceResIndexDateTime");
            DropTable("public.DocumentReferenceRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.DocumentManifestResIndexUri");
            DropTable("public.DocumentManifestResIndexToken");
            DropTable("public.DocumentManifestResIndexString");
            DropTable("public.DocumentManifestResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.DocumentManifestResIndexQuantity");
            DropTable("public.DocumentManifestResIndexDateTime");
            DropTable("public.DocumentManifestRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.DiagnosticReportResIndexUri");
            DropTable("public.DiagnosticReportResIndexToken");
            DropTable("public.DiagnosticReportResIndexString");
            DropTable("public.DiagnosticReportResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.DiagnosticReportResIndexQuantity");
            DropTable("public.DiagnosticReportResIndexDateTime");
            DropTable("public.DiagnosticReportRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.DeviceUseStatementResIndexUri");
            DropTable("public.DeviceUseStatementResIndexToken");
            DropTable("public.DeviceUseStatementResIndexString");
            DropTable("public.DeviceUseStatementResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.DeviceUseStatementResIndexQuantity");
            DropTable("public.DeviceUseStatementResIndexDateTime");
            DropTable("public.DeviceUseStatementRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.DeviceRequestResIndexUri");
            DropTable("public.DeviceRequestResIndexToken");
            DropTable("public.DeviceRequestResIndexString");
            DropTable("public.DeviceRequestResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.DeviceRequestResIndexQuantity");
            DropTable("public.DeviceRequestResIndexDateTime");
            DropTable("public.DeviceRequestRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.DeviceMetricResIndexUri");
            DropTable("public.DeviceMetricResIndexToken");
            DropTable("public.DeviceMetricResIndexString");
            DropTable("public.DeviceMetricResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.DeviceMetricResIndexQuantity");
            DropTable("public.DeviceMetricResIndexDateTime");
            DropTable("public.DeviceMetricRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.DeviceResIndexUri");
            DropTable("public.DeviceResIndexToken");
            DropTable("public.DeviceResIndexString");
            DropTable("public.DeviceResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.DeviceResIndexQuantity");
            DropTable("public.DeviceResIndexDateTime");
            DropTable("public.DeviceRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.DeviceComponentResIndexUri");
            DropTable("public.DeviceComponentResIndexToken");
            DropTable("public.DeviceComponentResIndexString");
            DropTable("public.DeviceComponentResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.DeviceComponentResIndexQuantity");
            DropTable("public.DeviceComponentResIndexDateTime");
            DropTable("public.DeviceComponentRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.DetectedIssueResIndexUri");
            DropTable("public.DetectedIssueResIndexToken");
            DropTable("public.DetectedIssueResIndexString");
            DropTable("public.DetectedIssueResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.DetectedIssueResIndexQuantity");
            DropTable("public.DetectedIssueResIndexDateTime");
            DropTable("public.DetectedIssueRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.DataElementResIndexUri");
            DropTable("public.DataElementResIndexToken");
            DropTable("public.DataElementResIndexString");
            DropTable("public.DataElementResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.DataElementResIndexQuantity");
            DropTable("public.DataElementResIndexDateTime");
            DropTable("public.DataElementRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.CoverageResIndexUri");
            DropTable("public.CoverageResIndexToken");
            DropTable("public.CoverageResIndexString");
            DropTable("public.CoverageResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.CoverageResIndexQuantity");
            DropTable("public.CoverageResIndexDateTime");
            DropTable("public.CoverageRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ContractResIndexUri");
            DropTable("public.ContractResIndexToken");
            DropTable("public.ContractResIndexString");
            DropTable("public.ContractResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ContractResIndexQuantity");
            DropTable("public.ContractResIndexDateTime");
            DropTable("public.ContractRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ConsentResIndexUri");
            DropTable("public.ConsentResIndexToken");
            DropTable("public.ConsentResIndexString");
            DropTable("public.ConsentResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ConsentResIndexQuantity");
            DropTable("public.ConsentResIndexDateTime");
            DropTable("public.ConsentRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ConditionResIndexUri");
            DropTable("public.ConditionResIndexToken");
            DropTable("public.ConditionResIndexString");
            DropTable("public.ConditionResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ConditionResIndexQuantity");
            DropTable("public.ConditionResIndexDateTime");
            DropTable("public.ConditionRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ConceptMapResIndexUri");
            DropTable("public.ConceptMapResIndexToken");
            DropTable("public.ConceptMapResIndexString");
            DropTable("public.ConceptMapResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ConceptMapResIndexQuantity");
            DropTable("public.ConceptMapResIndexDateTime");
            DropTable("public.ConceptMapRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.CompositionResIndexUri");
            DropTable("public.CompositionResIndexToken");
            DropTable("public.CompositionResIndexString");
            DropTable("public.CompositionResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.CompositionResIndexQuantity");
            DropTable("public.CompositionResIndexDateTime");
            DropTable("public.CompositionRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.CompartmentDefinitionResIndexUri");
            DropTable("public.CompartmentDefinitionResIndexToken");
            DropTable("public.CompartmentDefinitionResIndexString");
            DropTable("public.CompartmentDefinitionResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.CompartmentDefinitionResIndexQuantity");
            DropTable("public.CompartmentDefinitionResIndexDateTime");
            DropTable("public.CompartmentDefinitionRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.CommunicationRequestResIndexUri");
            DropTable("public.CommunicationRequestResIndexToken");
            DropTable("public.CommunicationRequestResIndexString");
            DropTable("public.CommunicationRequestResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.CommunicationRequestResIndexQuantity");
            DropTable("public.CommunicationRequestResIndexDateTime");
            DropTable("public.CommunicationRequestRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.CommunicationResIndexUri");
            DropTable("public.CommunicationResIndexToken");
            DropTable("public.CommunicationResIndexString");
            DropTable("public.CommunicationResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.CommunicationResIndexQuantity");
            DropTable("public.CommunicationResIndexDateTime");
            DropTable("public.CommunicationRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.CodeSystemResIndexUri");
            DropTable("public.CodeSystemResIndexToken");
            DropTable("public.CodeSystemResIndexString");
            DropTable("public.CodeSystemResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.CodeSystemResIndexQuantity");
            DropTable("public.CodeSystemResIndexDateTime");
            DropTable("public.CodeSystemRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ClinicalImpressionResIndexUri");
            DropTable("public.ClinicalImpressionResIndexToken");
            DropTable("public.ClinicalImpressionResIndexString");
            DropTable("public.ClinicalImpressionResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ClinicalImpressionResIndexQuantity");
            DropTable("public.ClinicalImpressionResIndexDateTime");
            DropTable("public.ClinicalImpressionRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ClaimResponseResIndexUri");
            DropTable("public.ClaimResponseResIndexToken");
            DropTable("public.ClaimResponseResIndexString");
            DropTable("public.ClaimResponseResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ClaimResponseResIndexQuantity");
            DropTable("public.ClaimResponseResIndexDateTime");
            DropTable("public.ClaimResponseRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ClaimResIndexUri");
            DropTable("public.ClaimResIndexToken");
            DropTable("public.ClaimResIndexString");
            DropTable("public.ClaimResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ClaimResIndexQuantity");
            DropTable("public.ClaimResIndexDateTime");
            DropTable("public.ClaimRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ChargeItemResIndexUri");
            DropTable("public.ChargeItemResIndexToken");
            DropTable("public.ChargeItemResIndexString");
            DropTable("public.ChargeItemResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ChargeItemResIndexQuantity");
            DropTable("public.ChargeItemResIndexDateTime");
            DropTable("public.ChargeItemRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.CareTeamResIndexUri");
            DropTable("public.CareTeamResIndexToken");
            DropTable("public.CareTeamResIndexString");
            DropTable("public.CareTeamResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.CareTeamResIndexQuantity");
            DropTable("public.CareTeamResIndexDateTime");
            DropTable("public.CareTeamRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.CarePlanResIndexUri");
            DropTable("public.CarePlanResIndexToken");
            DropTable("public.CarePlanResIndexString");
            DropTable("public.CarePlanResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.CarePlanResIndexQuantity");
            DropTable("public.CarePlanResIndexDateTime");
            DropTable("public.CarePlanRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.CapabilityStatementResIndexUri");
            DropTable("public.CapabilityStatementResIndexToken");
            DropTable("public.CapabilityStatementResIndexString");
            DropTable("public.CapabilityStatementResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.CapabilityStatementResIndexQuantity");
            DropTable("public.CapabilityStatementResIndexDateTime");
            DropTable("public.CapabilityStatementRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.BundleResIndexUri");
            DropTable("public.BundleResIndexToken");
            DropTable("public.BundleResIndexString");
            DropTable("public.BundleResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.BundleResIndexQuantity");
            DropTable("public.BundleResIndexDateTime");
            DropTable("public.BundleRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.BodySiteResIndexUri");
            DropTable("public.BodySiteResIndexToken");
            DropTable("public.BodySiteResIndexString");
            DropTable("public.BodySiteResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.BodySiteResIndexQuantity");
            DropTable("public.BodySiteResIndexDateTime");
            DropTable("public.BodySiteRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.BinaryResIndexUri");
            DropTable("public.BinaryResIndexToken");
            DropTable("public.BinaryResIndexString");
            DropTable("public.BinaryResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.BinaryResIndexQuantity");
            DropTable("public.BinaryResIndexDateTime");
            DropTable("public.BinaryRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.BasicResIndexUri");
            DropTable("public.BasicResIndexToken");
            DropTable("public.BasicResIndexString");
            DropTable("public.BasicResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.BasicResIndexQuantity");
            DropTable("public.BasicResIndexDateTime");
            DropTable("public.BasicRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.AuditEventResIndexUri");
            DropTable("public.AuditEventResIndexToken");
            DropTable("public.AuditEventResIndexString");
            DropTable("public.AuditEventResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.AuditEventResIndexQuantity");
            DropTable("public.AuditEventResIndexDateTime");
            DropTable("public.AuditEventRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.AppointmentResponseResIndexUri");
            DropTable("public.AppointmentResponseResIndexToken");
            DropTable("public.AppointmentResponseResIndexString");
            DropTable("public.AppointmentResponseResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.AppointmentResponseResIndexQuantity");
            DropTable("public.AppointmentResponseResIndexDateTime");
            DropTable("public.AppointmentResponseRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.AppointmentResIndexUri");
            DropTable("public.AppointmentResIndexToken");
            DropTable("public.AppointmentResIndexString");
            DropTable("public.AppointmentResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.AppointmentResIndexQuantity");
            DropTable("public.AppointmentResIndexDateTime");
            DropTable("public.AppointmentRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.AllergyIntoleranceResIndexUri");
            DropTable("public.AllergyIntoleranceResIndexToken");
            DropTable("public.AllergyIntoleranceResIndexString");
            DropTable("public.AllergyIntoleranceResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.AllergyIntoleranceResIndexQuantity");
            DropTable("public.AllergyIntoleranceResIndexDateTime");
            DropTable("public.AllergyIntoleranceRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.AdverseEventResIndexUri");
            DropTable("public.AdverseEventResIndexToken");
            DropTable("public.AdverseEventResIndexString");
            DropTable("public.AdverseEventResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.AdverseEventResIndexQuantity");
            DropTable("public.AdverseEventResIndexDateTime");
            DropTable("public.AdverseEventRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ActivityDefinitionResIndexUri");
            DropTable("public.ActivityDefinitionResIndexToken");
            DropTable("public.ActivityDefinitionResIndexString");
            DropTable("public._BaseUrl");
            DropTable("public.ActivityDefinitionResIndexReference",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "ReferenceFhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "ReferenceVersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public.ActivityDefinitionResIndexQuantity");
            DropTable("public._SParamResource");
            DropTable("public._SearchParam");
            DropTable("public.ActivityDefinitionResIndexDateTime");
            DropTable("public.ActivityDefinitionRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
            DropTable("public._FhirRelease");
            DropTable("public.AccountRes",
                removedColumnAnnotations: new Dictionary<string, IDictionary<string, object>>
                {
                    {
                        "FhirId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                    {
                        "VersionId",
                        new Dictionary<string, object>
                        {
                            { "CaseSensitive", "True" },
                        }
                    },
                });
        }
    }
}
