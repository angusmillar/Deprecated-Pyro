<?xml version="1.0" encoding="utf-8" ?>

<!-- 
    This section defines how the logger it's self logs any issues it may have, i.e can not access log file
    These settings are only relevant for debugging and should not be changed in production
    -->
<nlog throwExceptions="false"
      internalLogToConsole="false"
      internalLogFile="NLogInternalLog.txt"
      internalLogToConsoleError ="false"
      internalLogLevel="Debug"
      xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" >

  <!-- 
    These are the variables for the logging, you may wish to change these
    -->
  <variable name="LogFilePath" value="C:\PyroLogs"/>
  <!--<variable name="LogFileName" value="${date:format=yyyy-MM-dd}_PyroServerLog"/>-->
  <variable name="LogFileName" value="PyroBackburnerLog"/>
  <variable name="NumberOfRollingLogs" value="14"/>
  <variable name="HeaderLayout" value="Pyro Backburner 
            ${newline}=========================================================================================
            ${newline}LogMachine: ${machinename} | Windows Identity: ${windows-identity}            
            ${newline}=========================================================================================
            ${newline}  Time Stamp  |  Level  |  Message  |  Call Site &amp; Line number  |  Exception  |  Guid
            ${newline}========================================================================================="/>

  <variable name="NormalLayout"
            value="${level}|${message}|${callsite:className=true:includeNamespace=true:fileName=false:includeSourcePath=false:methodName=true:cleanNamesOfAnonymousDelegates=true:skipFrames=1} Line#:${callsite-linenumber:skipFrames=1}|${exception:format=ToString:maxInnerExceptionLevel=10}|${guid}"/>
  <variable name="NormalFileLayout" value="${longdate}|${NormalLayout}"/>
  <variable name="NormalConsoleLayout" value="${date:format=HH\:mm\:ss}|${NormalLayout}"/>

  <!-- 
    Targets are the sources that messaging can be written to.    
    AWS Target package nuget: AWS.Logger.Nlog
   -->

  <targets>

    <!--This target defines Amazon Web Services (AWS) CloudWatch logging
        This wil not work unless you configure your own AWS User acount and profile.
        The profile you se here 'stu3_Test_PyrohealthCloudWatchLogging' will not work for other
        as you do not have the access tokens, you need your own or talk to me to set one up.
        
        You will also need to create a LogStream in AWS and update the LogStreamNameSuffix property 
        to suit, and set the correct AWS region code. The rest can remain unchnanged.
    -->

    <target
      name="aws"
      type="AWSTarget"
      logGroup="PyrohealthFhirServer"
      region="ap-southeast-2"
      LogStreamNameSuffix="PyroBackburner-Prod"
      layout= "${NormalFileLayout}"
      Profile="PyroServerUser"/>

    <!--This target defines the file log parameters and the archiving policy, 
        there should no reason to need to change these, change the variables above 
    -->
    <target name="file" xsi:type="AsyncWrapper" queueLimit="5000" overflowAction="Discard">
      <target xsi:type="RetryingWrapper">
        <target xsi:type="File"
            header="${HeaderLayout}"
            layout= "${NormalFileLayout}"
            fileName="${LogFilePath}\${LogFileName}.txt"
            archiveFileName="${LogFilePath}\LogArchives\${LogFileName}.{#}.txt"
            archiveEvery="Day"
            archiveNumbering="Date"
            maxArchiveFiles="${NumberOfRollingLogs}"
            archiveDateFormat="yyyy-MM-dd"
            concurrentWrites="true"
            keepFileOpen="false"
            createDirs="True" />
      </target>
    </target>

    <!-- 
    This target defines the logging seen in the console for debugging.
    -->
    <target name="console" xsi:type="ColoredConsole" layout="${NormalConsoleLayout}" />

  </targets>
  
  <rules>

    <!-- 
    This section defines rules of which messages to write to which source targets
    You can define complex rules, see rules examples below.
    -->

    <!-- 
    You may wish to increases the level of logging to be more granular or less 
    by changing the 'minlevel' property and setting a new Log Level, see reference below for available levels
    'name=*' means all messages are logged to the target, no filtering applied, except for the minlevel setting
    'writeTo=' points the target as defined above.
    
    Each line below tiggers the looging to the target output, comment out as required:    
    
    Syntax:
    <logger name="HeaderLogger" minlevel="Trace" writeTo="fileHeader" final="true" />
    -->

    <!--writeTo="Console": Writes to the development envrioment console, only for dev-->
    <logger name="*" minlevel="Debug" writeTo="console" />

    <!--writeTo="file":    Writes to a text file on the server, see file target above for path-->
    <logger name="*" minlevel="Debug" writeTo="file" />

    <!--writeTo="aws":     Writes to Amazon Web Services (AWS) CloudWatch logging, you need your own profile to work.-->
    <logger name="*" minlevel="Debug" writeTo="aws" />

  </rules>
</nlog>

<!--
Log Levels:
Trace - Very detailed log messages, potentially of a high frequency and volume
Debug -Less detailed and/or less frequent debugging messages
Info - Informational messages
Warn - Warnings which don't appear to the user of the application
Error - Error messages
Fatal - Fatal error messages. After a fatal error, the application usually terminates.
-->

<!--
Example Rules
<logger name="Name.Space.Class1" minlevel="Debug" writeTo="f1" /> - all messages from Class1 in Name.Space whose level is Debug or higher are written to the "f1" target.
<logger name="Name.Space.Class1" levels="Debug,Error" writeTo="f1" /> - all messages from Class1 in Name.Space whose level is either Debug or Error or higher are written to the "f1" target.
<logger name="Name.Space.*" writeTo="f3,f4" /> - messages from any class in the Name.Space namespace are written to both "f3" and "f4" targets regardless of their levels.
<logger name="Name.Space.*" minlevel="Debug" maxlevel="Error" final="true" /> - messages from any class in the Name.Space namespace whose level is between Debug and Error (which makes it Debug, Info, Warn, Error) are rejected (as there's no writeTo clause) and no further rules are processed for them (because of the final="true" setting).
-->

