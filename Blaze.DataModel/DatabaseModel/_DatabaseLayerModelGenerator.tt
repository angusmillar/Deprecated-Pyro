<#@ template debug="true" language="C#" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ include file="$(SolutionDir)Blaze.DataModel\DatabaseModel\TemplateFileManagerV2.1.ttinclude" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Linq" #>
<#@ Assembly Name="System.Threading.Tasks" #>
<#@ Assembly Name="System.ComponentModel.DataAnnotations" #>
<#@ Assembly Name="System.Data" #>
<#@ Assembly Name="$(SolutionDir)packages\EntityFramework.6.1.3\lib\net45\EntityFramework.dll" #>
<#@ Assembly Name="$(SolutionDir)packages\Newtonsoft.Json.6.0.7\lib\net45\Newtonsoft.Json.dll"#>
<#@ Assembly Name="$(SolutionDir)packages\Hl7.Fhir.DSTU2.0.90.4\lib\net45\Hl7.Fhir.DSTU2.Core.dll"#>
<#@ Assembly Name="$(SolutionDir)Blaze.CodeGenerationSupport\bin\Release\Blaze.CodeGenerationSupport.dll"#>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Threading.Tasks" #>
<#@ import namespace="System.ComponentModel" #> 
<#@ import namespace="System.ComponentModel.DataAnnotations.Schema" #> 
<#@ import namespace="System.Data.Entity.ModelConfiguration.Conventions" #> 
<#@ import namespace="System.Data.Entity.Infrastructure.Annotations" #> 

<#  
  var manager = TemplateFileManager.Create(this);
  // Any output below here will go to the BlazeDbModelCodeGenerator.cs
  
  Blaze.CodeGenerationSupport.CodeGenerationDatabaseModelCreate oCreate = new Blaze.CodeGenerationSupport.CodeGenerationDatabaseModelCreate();
  List<Blaze.CodeGenerationSupport.CodeGenerationDbTableModel> DbModelList = oCreate.CodeGenerationDbTableModelList;

  manager.StartNewFile(string.Format("{0}.cs","DatabaseContext"));
#>

<# 
  foreach(var item in DbModelList)
  {
    manager.StartNewFile(string.Format("{0}.cs",item.TableClassModel.ClassName));
#>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

//This source file has been auto generated.

namespace Blaze.DataModel.DatabaseModel
{

  public class <#=item.TableClassModel.ClassName#>
  {
<#
      foreach(var property in item.TableClassModel.PropertyList)
      {#>
    <#=property#>
<#
      }
#>   
    public <#=item.TableClassModel.ClassName#>()
    {
<#
      foreach(var ConstructorProp in item.TableClassModel.PropertyConstructorInstantiationList)
      {#>
      <#=ConstructorProp#>
<#
      }
#>
    }
  }
}

<#
  }
  manager.Process();
#>
