<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Linq" #>
<#@ Assembly Name="System.Threading.Tasks" #>
<#@ Assembly Name="System.ComponentModel.DataAnnotations" #>
<#@ Assembly Name="System.Data" #>
<#@ Assembly Name="$(SolutionDir)packages\EntityFramework.6.1.3\lib\net45\EntityFramework.dll" #>
<#@ Assembly Name="$(SolutionDir)packages\Newtonsoft.Json.6.0.7\lib\net45\Newtonsoft.Json.dll"#>
<#@ Assembly Name="$(SolutionDir)packages\Hl7.Fhir.DSTU2.0.90.4\lib\net45\Hl7.Fhir.DSTU2.Core.dll"#>
<#@ Assembly Name="$(SolutionDir)CodeGenerationSupport\bin\Release\CodeGenerationSupport.dll"#>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Threading.Tasks" #>
<#@ import namespace="System.ComponentModel" #> 
<#@ import namespace="System.ComponentModel.DataAnnotations.Schema" #> 
<#@ import namespace="System.Data.Entity.ModelConfiguration.Conventions" #> 
<#@ import namespace="System.Data.Entity.Infrastructure.Annotations" #> 
<#@ import namespace="CodeGenerationSupport.FhirApiIntrospection" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Data.Entity;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity.ModelConfiguration.Conventions;
using System.Data.Entity.Infrastructure.Annotations;

//This is an Auto generated file do not change it's contents!!.

namespace DataModel.BlazeDbModel
{
<#
      var ResourceList = Hl7.Fhir.Model.ModelInfo.SupportedResources;
      List<FhirApiSearchParameterInfo> ListOfSearchParameters = FhirApiSearchParameterInfoFactory.GetApiSearchParameterInfo();
      
      string ClassNameResource = string.Empty;
      string ClassNameResourceSearch = string.Empty;

        
#>
  public class BlazeDbContext: DbContext
  {
    public BlazeDbContext()
      : base("BlazeConnectionString")
    {
      this.Database.CreateIfNotExists();      
    }

<#
        foreach(var ResourceName in ResourceList)
        {
          List<FhirApiSearchParameterInfo> SearchParametersForResource = (from x in ListOfSearchParameters
                                          where x.Resource == ResourceName
                                          select x).ToList();

          List<FhirApiSearchParameterInfo> CollectionParameters = (from x in SearchParametersForResource
                                    where x.IsCollection == true
                                    select x).ToList();

          CollectionParameters = FhirApiSearchParameterInfoFactory.CheckAndRemoveDuplicates(CollectionParameters);
          ClassNameResource = FhirApiSearchParameterInfoFactory.ConstructClassNameForResourceClass(ResourceName);
#>    public DbSet<<#=ClassNameResource#>> <#=ClassNameResource#> { get; set; }
<#        foreach(var SearchParameter in CollectionParameters)
          {
            ClassNameResourceSearch = FhirApiSearchParameterInfoFactory.ConstructClassNameForResourceSearchClass(ResourceName, SearchParameter);

#>    public DbSet<<#=ClassNameResourceSearch#>> <#=ClassNameResourceSearch#> { get; set; }
<#

          }
#>

<#
        }

#>

    protected override void OnModelCreating(DbModelBuilder Mb)
    {
      base.OnModelCreating(Mb);
      Mb.Conventions.Remove<PluralizingTableNameConvention>();
<#
      foreach(var ResourceName in ResourceList)
      {
        List<FhirApiSearchParameterInfo> SearchParametersForResource = (from x in ListOfSearchParameters
                                        where x.Resource == ResourceName
                                        select x).ToList();

        List<FhirApiSearchParameterInfo> CollectionParameters = (from x in SearchParametersForResource
                                  where x.IsCollection == true
                                  select x).ToList();

        CollectionParameters = FhirApiSearchParameterInfoFactory.CheckAndRemoveDuplicates(CollectionParameters);

        List<FhirApiSearchParameterInfo> NonCollectionParameters = (from x in SearchParametersForResource
                                  where x.IsCollection == false
                                  select x).ToList();               

        NonCollectionParameters = FhirApiSearchParameterInfoFactory.CheckAndRemoveDuplicates(NonCollectionParameters);

        ClassNameResource = FhirApiSearchParameterInfoFactory.ConstructClassNameForResourceClass(ResourceName);
#>      Mb.Configurations.Add(new <#=ClassNameResource#>_Configuration());
<#      
        foreach(var CollectionItem in CollectionParameters)
        {
          ClassNameResource = FhirApiSearchParameterInfoFactory.ConstructClassNameForResourceClass(ResourceName);
          ClassNameResourceSearch = FhirApiSearchParameterInfoFactory.ConstructClassNameForResourceSearchClass(ResourceName, CollectionItem);            
#>      Mb.Configurations.Add(new <#=ClassNameResourceSearch#>_Configuration());
<#
        }
#>

<#
      }
#>
    }
  }
}
