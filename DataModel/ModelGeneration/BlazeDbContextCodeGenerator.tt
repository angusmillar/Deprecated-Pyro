<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Linq" #>
<#@ Assembly Name="System.Threading.Tasks" #>
<#@ Assembly Name="System.ComponentModel.DataAnnotations" #>
<#@ Assembly Name="System.Data" #>
<#@ Assembly Name="$(SolutionDir)packages\EntityFramework.6.1.3\lib\net45\EntityFramework.dll" #>
<#@ Assembly Name="$(SolutionDir)packages\Newtonsoft.Json.6.0.7\lib\net45\Newtonsoft.Json.dll"#>
<#@ Assembly Name="$(SolutionDir)packages\Hl7.Fhir.DSTU2.0.90.4\lib\net45\Hl7.Fhir.DSTU2.Core.dll"#>
<#@ Assembly Name="$(SolutionDir)CodeGenerationSupport\bin\Debug\CodeGenerationSupport.dll"#>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Threading.Tasks" #>
<#@ import namespace="System.ComponentModel" #> 
<#@ import namespace="System.ComponentModel.DataAnnotations.Schema" #> 
<#@ import namespace="System.Data.Entity.ModelConfiguration.Conventions" #> 
<#@ import namespace="System.Data.Entity.Infrastructure.Annotations" #> 
<#@ import namespace="CodeGenerationSupport.FhirApiIntrospection" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Data.Entity;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity.ModelConfiguration.Conventions;
using System.Data.Entity.Infrastructure.Annotations;
using DataModel.BlazeDbModel2;

//This is an Auto generated file do not change it's contents!!.

namespace DataModel.BlazeDbModel2
{
<#
      var ResourceList = Hl7.Fhir.Model.ModelInfo.SupportedResources;
      List<FhirApiSearchParameterInfo> ListOfSearchParameters = FhirApiSearchParameterInfoFactory.GetApiSearchParameterInfo();
      
      string ClassNameResource = string.Empty;
      string ClassNameResourceSearch = string.Empty;

        
#>
  public class BlazeDbContext: DbContext
  {
    public BlazeDbContext()
      : base("BlazeConnectionString")
    {
      //Database.SetInitializer<BlazeDbContext>(new DropCreateDatabaseAlways<BlazeDbContext>());       
    }

<#
        foreach(var ResourceName in ResourceList)
        {
          List<FhirApiSearchParameterInfo> SearchParametersForResource = (from x in ListOfSearchParameters
                                          where x.Resource == ResourceName
                                          select x).ToList();

          List<FhirApiSearchParameterInfo> CollectionParameters = (from x in SearchParametersForResource
                                    where x.IsCollection == true
                                    select x).ToList();

          CollectionParameters = FhirApiSearchParameterInfoFactory.CheckAndRemoveDuplicates(CollectionParameters);
          ClassNameResource = FhirApiSearchParameterInfoFactory.ConstructClassNameForResourceClass(ResourceName);
#>    public DbSet<<#=ClassNameResource#>> <#=ClassNameResource#> { get; set; }
<#        foreach(var SearchParameter in CollectionParameters)
          {
            ClassNameResourceSearch = FhirApiSearchParameterInfoFactory.ConstructClassNameForResourceSearchClass(ResourceName, SearchParameter.SearchName);

#>    public DbSet<<#=ClassNameResourceSearch#>> <#=ClassNameResourceSearch#> { get; set; }
<#

          }
#>

<#
        }

#>

    protected override void OnModelCreating(DbModelBuilder Mb)
    {
      Mb.Conventions.Remove<PluralizingTableNameConvention>();

<#
      foreach(var ResourceName in ResourceList)
      {
        List<FhirApiSearchParameterInfo> SearchParametersForResource = (from x in ListOfSearchParameters
                                        where x.Resource == ResourceName
                                        select x).ToList();

        List<FhirApiSearchParameterInfo> CollectionParameters = (from x in SearchParametersForResource
                                  where x.IsCollection == true
                                  select x).ToList();

        CollectionParameters = FhirApiSearchParameterInfoFactory.CheckAndRemoveDuplicates(CollectionParameters);

        List<FhirApiSearchParameterInfo> NonCollectionParameters = (from x in SearchParametersForResource
                                  where x.IsCollection == false
                                  select x).ToList();               

        NonCollectionParameters = FhirApiSearchParameterInfoFactory.CheckAndRemoveDuplicates(NonCollectionParameters);

        ClassNameResource = FhirApiSearchParameterInfoFactory.ConstructClassNameForResourceClass(ResourceName);
#>
      //<#=ResourceName#> Resource
      Mb.Entity<<#=ClassNameResource#>>().HasKey(x => x.Id).Property(x => x.Id).IsRequired();
      Mb.Entity<<#=ClassNameResource#>>().Property(x => x.FhirId).IsRequired().HasMaxLength(500).HasColumnAnnotation(IndexAnnotation.AnnotationName, new IndexAnnotation(new IndexAttribute("IX_FhirId") { IsUnique = true }));;
      Mb.Entity<<#=ClassNameResource#>>().Property(x => x.Received).IsRequired();
      Mb.Entity<<#=ClassNameResource#>>().Property(x => x.XmlBlob).IsRequired();      
<#      foreach(var NonCollectionItem in NonCollectionParameters)
        {
          GenerateClassPropertyFluentStatmentForSearchParameterDataType(ClassNameResource, NonCollectionItem.SearchName.Replace('-','_') + '_', NonCollectionItem.SearchParamType);           
        }
        foreach(var CollectionItem in CollectionParameters)
        {
          ClassNameResource = FhirApiSearchParameterInfoFactory.ConstructClassNameForResourceClass(ResourceName);
          ClassNameResourceSearch = FhirApiSearchParameterInfoFactory.ConstructClassNameForResourceSearchClass(ResourceName, CollectionItem.SearchName);            
#>      Mb.Entity<<#=ClassNameResourceSearch#>>().HasRequired(x => x.<#=ClassNameResource#>);
<#
          GenerateClassPropertyFluentStatmentForSearchParameterDataType(ClassNameResourceSearch, string.Empty, CollectionItem.SearchParamType);           
        }
#>

<#
      }
#>
    }
  }
}

<#+
    void GenerateClassPropertyFluentStatmentForSearchParameterDataType(string ClassName, string Prefix, Hl7.Fhir.Model.SearchParamType DataType)
    {
      switch (DataType)
           {
             case Hl7.Fhir.Model.SearchParamType.Composite:
               {

                //ToDo: this one looks hard

               }
               break;
             case Hl7.Fhir.Model.SearchParamType.Date:
               {
#>      Mb.Entity<<#=ClassName#>>().Property(x => x.<#= Prefix #>DateTimeOffset).IsRequired();
<#+              }
               break;
             case Hl7.Fhir.Model.SearchParamType.Number:
               {
#>      Mb.Entity<<#=ClassName#>>().Property(x => x.<#= Prefix #>Number).IsRequired();       
<#+               }
               break;
             case Hl7.Fhir.Model.SearchParamType.Quantity:
               {
#>      Mb.Entity<<#=ClassName#>>().Property(x => x.<#= Prefix #>Quantity).IsRequired();
      Mb.Entity<<#=ClassName#>>().Property(x => x.<#= Prefix #>System).IsOptional();
      Mb.Entity<<#=ClassName#>>().Property(x => x.<#= Prefix #>Code).IsOptional();
<#+               }
               break;
             case Hl7.Fhir.Model.SearchParamType.Reference:
               {
#>      Mb.Entity<<#=ClassName#>>().Property(x => x.<#= Prefix #>FhirId).IsRequired();
      Mb.Entity<<#=ClassName#>>().Property(x => x.<#= Prefix #>Type).IsRequired();
      Mb.Entity<<#=ClassName#>>().Property(x => x.<#= Prefix #>Url).IsOptional();
<#+               }
               break;
             case Hl7.Fhir.Model.SearchParamType.String:
               {
#>      Mb.Entity<<#=ClassName#>>().Property(x => x.<#= Prefix #>String).IsRequired();
<#+               }
               break;
             case Hl7.Fhir.Model.SearchParamType.Token:
               {
#>      Mb.Entity<<#=ClassName#>>().Property(x => x.<#= Prefix #>Code).IsRequired();
      Mb.Entity<<#=ClassName#>>().Property(x => x.<#= Prefix #>System).IsOptional();
<#+
               }
               break;
             case Hl7.Fhir.Model.SearchParamType.Uri:
               {
#>      Mb.Entity<<#=ClassName#>>().Property(x => x.<#= Prefix #>Uri).IsRequired();
<#+ 
               }
               break;
             default:
               throw new InvalidEnumArgumentException(DataType.ToString(), (int)DataType, typeof(Hl7.Fhir.Model.SearchParamType));
           }


    }


#>