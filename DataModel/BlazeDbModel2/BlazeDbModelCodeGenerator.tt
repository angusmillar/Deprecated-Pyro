<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Linq" #>
<#@ Assembly Name="System.Threading.Tasks" #>
<#@ Assembly Name="$(SolutionDir)packages\Newtonsoft.Json.6.0.7\lib\net45\Newtonsoft.Json.dll"#>
<#@ Assembly Name="$(SolutionDir)packages\Hl7.Fhir.DSTU2.0.90.4\lib\net45\Hl7.Fhir.DSTU2.Core.dll"#>
<#@ Assembly Name="$(SolutionDir)CodeGenerationSupport\bin\Release\CodeGenerationSupport.dll"#>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Threading.Tasks" #>
<#@ import namespace="System.ComponentModel" #> 
<#@ import namespace="CodeGenerationSupport.FhirApiIntrospection" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

//This is an Auto generated file do not change it's contents!!.

namespace DataModel.BlazeDbModel2
{
<#
      var ResourceList = Hl7.Fhir.Model.ModelInfo.SupportedResources;
      List<FhirApiSearchParameterInfo> ListOfSearchParameters = FhirApiSearchParameterInfoFactory.GetApiSearchParameterInfo();
      string CurrentResourceName = string.Empty;
      
      
      string ClassNameResource = string.Empty;
      string ClassNameResourceSearch = string.Empty;
      foreach(var ResourceName in ResourceList)
      {
        List<FhirApiSearchParameterInfo> SearchParametersForResource = (from x in ListOfSearchParameters
                                           where x.Resource == ResourceName
                                           select x).ToList();

        List<FhirApiSearchParameterInfo> NonCollectionParameters = (from x in SearchParametersForResource
                                       where x.IsCollection == false
                                       select x).ToList();               

        NonCollectionParameters = FhirApiSearchParameterInfoFactory.CheckAndRemoveDuplicates(NonCollectionParameters);

        List<FhirApiSearchParameterInfo> CollectionParameters = (from x in SearchParametersForResource
                                     where x.IsCollection == true
                                     select x).ToList();
        
        CollectionParameters = FhirApiSearchParameterInfoFactory.CheckAndRemoveDuplicates(CollectionParameters);
        

        if (CurrentResourceName != ResourceName)
        {
          ClassNameResource = FhirApiSearchParameterInfoFactory.ConstructClassNameForResourceClass(ResourceName);
          CurrentResourceName = ResourceName;
#>

  public class <#= ClassNameResource #>
  {
    public int Id {get; set;}
    public string FhirId {get; set;}    
    public DateTimeOffset Received {get; set;}
    public string XmlBlob {get; set;}    
<#

          foreach(var NonCollectionItem in NonCollectionParameters)
          {          
            GenerateClassPropertiesForSearchParameterDataType(NonCollectionItem.SearchName.Replace('-','_') + '_', NonCollectionItem.SearchParamType);                        
          }
#>

<#
          foreach(FhirApiSearchParameterInfo CollectionItem in CollectionParameters)
          {
            ClassNameResourceSearch = FhirApiSearchParameterInfoFactory.ConstructClassNameForResourceSearchClass(ResourceName, CollectionItem);   
#>
    public ICollection<<#=ClassNameResourceSearch#>> <#=FhirApiSearchParameterInfoFactory.ConstructCollectionListName(CollectionItem)#> { get; set; }   
<#            
          }

#>

    public <#=ClassNameResource#>()
    {
<#
          foreach( var CollectionItem in CollectionParameters)
          {
          ClassNameResourceSearch = FhirApiSearchParameterInfoFactory.ConstructClassNameForResourceSearchClass(ResourceName, CollectionItem);   
#>
      this.<#=FhirApiSearchParameterInfoFactory.ConstructCollectionListName(CollectionItem)#> = new HashSet<<#=ClassNameResourceSearch#>>();
<#
          }
#>
    }
<#

#>
  }
<#
         foreach( var CollectionItem in CollectionParameters)
         {
           ClassNameResourceSearch = FhirApiSearchParameterInfoFactory.ConstructClassNameForResourceSearchClass(ResourceName, CollectionItem);           
#>  
  public class <#= ClassNameResourceSearch #>
  {
    public int Id {get; set;}
<#
            if (CollectionItem.SearchParamType == Hl7.Fhir.Model.SearchParamType.Composite)
            {
              foreach(var Composite in CollectionItem.CompositeSearchParameterList)
              {
                GenerateClassPropertiesForSearchParameterDataType(Composite.SearchName.Replace("-","_"), Composite.SearchParamType);           
              }
            }
            else
            {           
              GenerateClassPropertiesForSearchParameterDataType(string.Empty, CollectionItem.SearchParamType);           
            }           
#>    
    //Keyed
    public virtual <#= ClassNameResource#> <#= ClassNameResource#> { get; set; }                     
<#

#>
  }
<#
         }
      }
    }
#>

}






<#+
    void GenerateClassPropertiesForSearchParameterDataType(string Prefix, Hl7.Fhir.Model.SearchParamType DataType)
    {

      switch (DataType)
           {
             case Hl7.Fhir.Model.SearchParamType.Composite:
               {
                  //Nothing to do for this type as composite type is a composite of the other types
                  //We should never get here
                  throw new ApplicationException("Attempt to create database fields for composite type search parameter. This should not happen.");                
               }
               break;
             case Hl7.Fhir.Model.SearchParamType.Date:
               {
#>    public DateTimeOffset <#= Prefix #>DateTimeOffset {get; set;}              
<#+              }
               break;
             case Hl7.Fhir.Model.SearchParamType.Number:
               {
#>    public decimal <#= Prefix #>Number {get; set;}                  
<#+               }
               break;
             case Hl7.Fhir.Model.SearchParamType.Quantity:
               {
#>    public decimal <#= Prefix #>Quantity {get; set;}     
    public string <#= Prefix #>System {get; set;}     
    public string <#= Prefix #>Code {get; set;}     
<#+               }
               break;
             case Hl7.Fhir.Model.SearchParamType.Reference:
               {
#>    public string <#= Prefix #>FhirId {get; set;}     
    public string <#= Prefix #>Type {get; set;}     
    public string <#= Prefix #>Url {get; set;}     
<#+               }
               break;
             case Hl7.Fhir.Model.SearchParamType.String:
               {
#>    public string <#= Prefix #>String {get; set;}                  
<#+               }
               break;
             case Hl7.Fhir.Model.SearchParamType.Token:
               {
#>    public string <#= Prefix #>Code {get; set;}                  
    public string <#= Prefix #>System {get; set;}                
<#+
               }
               break;
             case Hl7.Fhir.Model.SearchParamType.Uri:
               {
#>    public string <#= Prefix #>Uri {get; set;}     
<#+ 
               }
               break;
             default:
               throw new InvalidEnumArgumentException(DataType.ToString(), (int)DataType, typeof(Hl7.Fhir.Model.SearchParamType));
           }


    }


#>



