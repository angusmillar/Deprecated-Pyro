<#@ template debug="true" language="C#" hostSpecific="true" #>
<#@ output extension=".cs" #>

<#@ include file="$(SolutionDir)Pyro.CodeGeneration\FileManager\TemplateFileManagerV2.1.ttinclude" #>

<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="$(SolutionDir)packages\Newtonsoft.Json.9.0.1\lib\net45\Newtonsoft.Json.dll"#>
<#@ Assembly Name="$(SolutionDir)packages\Hl7.Fhir.STU3.0.93.4\lib\net45\Hl7.Fhir.STU3.Core.dll"#>
<#@ Assembly Name="$(SolutionDir)packages\Hl7.Fhir.Support.0.4.2\lib\net45\Hl7.Fhir.Support.dll"#>
<#@ Assembly Name="$(SolutionDir)packages\Hl7.FhirPath.0.4.2\lib\net45\Hl7.FhirPath.dll"#>
<#@ Assembly Name="$(SolutionDir)Pyro.CodeGeneration\bin\Debug\Pyro.CodeGeneration.dll"#>

<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 


<#
  var manager = TemplateFileManager.Create(this);
  // Any output below here will go to the PyroDbModelCodeGenerator.cs
  var MainModel = new Pyro.CodeGeneration.Model.MainModel();  
  string DateTimeNow = DateTime.Now.ToString();
  manager.StartNewFile($"GeneratedResourceEntities.cs", "Pyro.DataLayer", "EntityGenerated");  

//#####################################################################################################
//##########################| EntityGenerated Partial Classes #########################################
//#####################################################################################################

#>
using Pyro.DataLayer.DbModel.EntityBase;

//This file was code generated by Pyro.CodeGeneration.Template.MainTemplate.tt
//Generation TimeStamp: <#=DateTimeNow#>

namespace Pyro.DataLayer.DbModel.EntityGenerated
{
<#   
  foreach(string ResourceName in MainModel.GetResourceNameList())
  {
#>
  public partial class <#=ResourceName#>Res : ResourceCurrentBase<<#=ResourceName#>Res, <#=ResourceName#>ResIndex>, I<#=ResourceName#>Res { }
  public interface I<#=ResourceName#>Res : IResourceCurrentBase<<#=ResourceName#>Res, <#=ResourceName#>ResIndex> { }
  public partial class <#=ResourceName#>ResIndex : ResourceIndexBase<<#=ResourceName#>Res, <#=ResourceName#>ResIndex>, I<#=ResourceName#>ResIndex { }
  public interface I<#=ResourceName#>ResIndex : IResourceIndexBase<<#=ResourceName#>Res, <#=ResourceName#>ResIndex> { } 
  
<#
}
#>

}

<#
//#####################################################################################################
//##########################| CommonResourceRepositoryTypeListTest Static Class #######################
//#####################################################################################################
  manager.StartNewFile($"CommonResourceRepositoryTypeList.cs", "Pyro.DataLayer", "EntityGenerated");
#>
using System;
using System.Collections.Generic;
using Pyro.DataLayer.Repository;

//This file was code generated by Pyro.CodeGeneration.Template.MainTemplate.tt
//Generation TimeStamp: <#=DateTimeNow#>
namespace Pyro.DataLayer.DbModel.EntityGenerated
{
  public static class CommonResourceRepositoryTypeList
  {
    public static List<Type> GetTypeList()
    {
      return new List<Type>()
      {
    <#   
      foreach(string ResourceName in MainModel.GetResourceNameList())
      {
    #>
      typeof(CommonResourceRepository<<#=ResourceName#>Res, <#=ResourceName#>ResIndex>),       
    <#
    }
    #>       
      };      
    }
  }
}

<#    
//#####################################################################################################
//##########################| UnitOfWork |#############################################################
//#####################################################################################################

  manager.StartNewFile($"UnitOfWorkCodeGenerated.cs", "Pyro.DataLayer", "UnitOfWork");
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Diagnostics;
using Pyro.Common.Interfaces.Repositories;
using Pyro.DataLayer.Repository;
using Pyro.DataLayer.DbModel.EntityGenerated;
using Hl7.Fhir.Model;

//This file was code generated by Pyro.CodeGeneration.Template.MainTemplate.tt
//Generation TimeStamp: <#=DateTimeNow#>

namespace Pyro.DataLayer.DbModel.UnitOfWork
{  
  public partial class UnitOfWork : IUnitOfWork, IDisposable
  {    
<#   
  foreach(string ResourceName in MainModel.GetResourceNameList())
  {
#>
    public IResourceRepository <#=ResourceName#>Repository
    {
      get
      {      
        return IResourceRepositoryFactory.Create<<#=ResourceName#>Res, <#=ResourceName#>ResIndex>(FHIRAllTypes.<#=ResourceName#>);     
      }
    }
<#
}
#>	
  }
}
<#    

//#####################################################################################################
//##########################| IUnitOfWork |############################################################
//#####################################################################################################

  manager.StartNewFile($"IUnitOfWorkCodeGeneration.cs", "Pyro.Common", "Repositories");
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

//This file was code generated by Pyro.CodeGeneration.Template.MainTemplate.tt
//Generation TimeStamp: <#=DateTimeNow#>

namespace Pyro.Common.Interfaces.Repositories
{
  public partial interface IUnitOfWork
  {
<#   
  foreach(string ResourceName in MainModel.GetResourceNameList())
  {
#>
    IResourceRepository <#=ResourceName#>Repository { get; }
<#
}
#>
  }
}
<#

//#####################################################################################################
//##########################| PyroDbContext |##########################################################
//#####################################################################################################

  manager.StartNewFile($"PyroDbContextCodeGenerated.cs", "Pyro.DataLayer", "DatabaseContext");
#>
using System.Data.Entity;
using System.Data.Entity.ModelConfiguration.Conventions;
using Pyro.DataLayer.DbModel.EntityGenerated;
using Pyro.DataLayer.DbModel.DatabaseContextConfig;

//This file was code generated by Pyro.CodeGeneration.Template.MainTemplate.tt
//Generation TimeStamp: <#=DateTimeNow#>

namespace Pyro.DataLayer.DbModel.DatabaseContext
{
  public partial class PyroDbContext : DbContext, IPyroDbContext
  {
<#   
  foreach(string ResourceName in MainModel.GetResourceNameList())
  {
#>
    public DbSet<<#=ResourceName#>Res> <#=ResourceName#> { get; set; }    
<#
  }
#>

    protected override void OnModelCreating(DbModelBuilder Mb)
    {
      base.OnModelCreating(Mb);

      Mb.Conventions.Remove<PluralizingTableNameConvention>();
      
      Mb.Configurations.Add(new ServiceBaseUrlContextConfig());
      Mb.Configurations.Add(new ServiceSearchParameterConfig());

<#   
  foreach(string ResourceName in MainModel.GetResourceNameList())
  {
#>
      Mb.Configurations.Add(new ResourceContextConfig<<#=ResourceName#>Res, <#=ResourceName#>ResIndex>());            
      Mb.Configurations.Add(new IndexContextConfig<<#=ResourceName#>Res, <#=ResourceName#>ResIndex>());
<#
  }
#>
    }
  }
}

<#
//#####################################################################################################
//##########################| IPyroDbContext |##########################################################
//#####################################################################################################

  manager.StartNewFile($"IPyroDbContextCodeGenerated.cs", "Pyro.DataLayer", "DatabaseContext");
#>
using System.Data.Entity;
using Pyro.DataLayer.DbModel.Entity;
using Pyro.DataLayer.DbModel.EntityGenerated;

//This file was code generated by Pyro.CodeGeneration.Template.MainTemplate.tt
//Generation TimeStamp: <#=DateTimeNow#>

namespace Pyro.DataLayer.DbModel.DatabaseContext
{
  public partial interface IPyroDbContext
  {
<#   
  foreach(string ResourceName in MainModel.GetResourceNameList())
  { 
  #>
    DbSet<<#=ResourceName#>Res> <#=ResourceName#> { get; set; }
  <#
  }
#>
}
}
<#
//#####################################################################################################
//##########################| RepositorySwitcher |#####################################################
//#####################################################################################################
  manager.StartNewFile($"RepositorySwitcher.cs", "Pyro.Common", "Tools");
#>

using Hl7.Fhir.Model;
using Hl7.Fhir.Utility;
using Pyro.Common.Exceptions;
using Pyro.Common.Interfaces.Repositories;
using Pyro.Common.Interfaces.ITools;
using System.Net;

//This file was code generated by Pyro.CodeGeneration.Template.MainTemplate.tt
//Generation TimeStamp: <#=DateTimeNow#>

namespace Pyro.Common.Tools
{
  public class RepositorySwitcher : IRepositorySwitcher
  {
    private IUnitOfWork IUnitOfWork;
    public RepositorySwitcher(IUnitOfWork IUnitOfWork)
    {
      this.IUnitOfWork = IUnitOfWork;
    }

    public IResourceRepository GetRepository(FHIRAllTypes ResourceType)
    {
      switch (ResourceType)
      {
<#   
  foreach(string ResourceName in MainModel.GetResourceNameList())
  {
#>
        case FHIRAllTypes.<#=ResourceName#>:
          return IUnitOfWork.<#=ResourceName#>Repository;
<#
  }
#>  
        default:
          {
            string Message = $"The Resource name given: '{ResourceType.GetLiteral()}' has no matching server repository. ";
            var OpOutCome = FhirOperationOutcomeSupport.Create(OperationOutcome.IssueSeverity.Fatal, OperationOutcome.IssueType.Invalid, Message);
            throw new PyroException(HttpStatusCode.BadRequest, OpOutCome, Message);
          }
      }
    }
  }
}


<#  
  manager.Process();    
#>

